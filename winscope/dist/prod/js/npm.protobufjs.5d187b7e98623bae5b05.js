"use strict";(self.webpackChunkwinscope=self.webpackChunkwinscope||[]).push([[568],{8045:e=>{e.exports=function asPromise(e,t){var r=new Array(arguments.length-1),i=0,n=2,o=!0;for(;n<arguments.length;)r[i++]=arguments[n++];return new Promise((function executor(n,s){r[i]=function callback(e){if(o)if(o=!1,e)s(e);else{for(var t=new Array(arguments.length-1),r=0;r<t.length;)t[r++]=arguments[r];n.apply(null,t)}};try{e.apply(t||null,r)}catch(e){o&&(o=!1,s(e))}}))}},8839:(e,t)=>{var r=t;r.length=function length(e){var t=e.length;if(!t)return 0;for(var r=0;--t%4>1&&"="===e.charAt(t);)++r;return Math.ceil(3*e.length)/4-r};for(var i=new Array(64),n=new Array(123),o=0;o<64;)n[i[o]=o<26?o+65:o<52?o+71:o<62?o-4:o-59|43]=o++;r.encode=function encode(e,t,r){for(var n,o=null,s=[],a=0,l=0;t<r;){var f=e[t++];switch(l){case 0:s[a++]=i[f>>2],n=(3&f)<<4,l=1;break;case 1:s[a++]=i[n|f>>4],n=(15&f)<<2,l=2;break;case 2:s[a++]=i[n|f>>6],s[a++]=i[63&f],l=0}a>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,s)),a=0)}return l&&(s[a++]=i[n],s[a++]=61,1===l&&(s[a++]=61)),o?(a&&o.push(String.fromCharCode.apply(String,s.slice(0,a))),o.join("")):String.fromCharCode.apply(String,s.slice(0,a))};var s="invalid encoding";r.decode=function decode(e,t,r){for(var i,o=r,a=0,l=0;l<e.length;){var f=e.charCodeAt(l++);if(61===f&&a>1)break;if(void 0===(f=n[f]))throw Error(s);switch(a){case 0:i=f,a=1;break;case 1:t[r++]=i<<2|(48&f)>>4,i=f,a=2;break;case 2:t[r++]=(15&i)<<4|(60&f)>>2,i=f,a=3;break;case 3:t[r++]=(3&i)<<6|f,a=0}}if(1===a)throw Error(s);return r-o},r.test=function test(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)}},8561:e=>{function codegen(e,t){"string"==typeof e&&(t=e,e=void 0);var r=[];function Codegen(e){if("string"!=typeof e){var t=toString();if(codegen.verbose&&console.log("codegen: "+t),t="return "+t,e){for(var i=Object.keys(e),n=new Array(i.length+1),o=new Array(i.length),s=0;s<i.length;)n[s]=i[s],o[s]=e[i[s++]];return n[s]=t,Function.apply(null,n).apply(null,o)}return Function(t)()}for(var a=new Array(arguments.length-1),l=0;l<a.length;)a[l]=arguments[++l];if(l=0,e=e.replace(/%([%dfijs])/g,(function replace(e,t){var r=a[l++];switch(t){case"d":case"f":return String(Number(r));case"i":return String(Math.floor(r));case"j":return JSON.stringify(r);case"s":return String(r)}return"%"})),l!==a.length)throw Error("parameter count mismatch");return r.push(e),Codegen}function toString(i){return"function "+(i||t||"")+"("+(e&&e.join(",")||"")+"){\n  "+r.join("\n  ")+"\n}"}return Codegen.toString=toString,Codegen}e.exports=codegen,codegen.verbose=!1},4358:e=>{function EventEmitter(){this._listeners={}}e.exports=EventEmitter,EventEmitter.prototype.on=function on(e,t,r){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:r||this}),this},EventEmitter.prototype.off=function off(e,t){if(void 0===e)this._listeners={};else if(void 0===t)this._listeners[e]=[];else for(var r=this._listeners[e],i=0;i<r.length;)r[i].fn===t?r.splice(i,1):++i;return this},EventEmitter.prototype.emit=function emit(e){var t=this._listeners[e];if(t){for(var r=[],i=1;i<arguments.length;)r.push(arguments[i++]);for(i=0;i<t.length;)t[i].fn.apply(t[i++].ctx,r)}return this}},5212:(e,t,r)=>{e.exports=fetch;var i=r(8045),n=r(4153)("fs");function fetch(e,t,r){return"function"==typeof t?(r=t,t={}):t||(t={}),r?!t.xhr&&n&&n.readFile?n.readFile(e,(function fetchReadFileCallback(i,n){return i&&"undefined"!=typeof XMLHttpRequest?fetch.xhr(e,t,r):i?r(i):r(null,t.binary?n:n.toString("utf8"))})):fetch.xhr(e,t,r):i(fetch,this,e,t)}fetch.xhr=function fetch_xhr(e,t,r){var i=new XMLHttpRequest;i.onreadystatechange=function fetchOnReadyStateChange(){if(4===i.readyState){if(0!==i.status&&200!==i.status)return r(Error("status "+i.status));if(t.binary){var e=i.response;if(!e){e=[];for(var n=0;n<i.responseText.length;++n)e.push(255&i.responseText.charCodeAt(n))}return r(null,"undefined"!=typeof Uint8Array?new Uint8Array(e):e)}return r(null,i.responseText)}},t.binary&&("overrideMimeType"in i&&i.overrideMimeType("text/plain; charset=x-user-defined"),i.responseType="arraybuffer"),i.open("GET",e),i.send()}},9410:e=>{function factory(e){return"undefined"!=typeof Float32Array?function(){var t=new Float32Array([-0]),r=new Uint8Array(t.buffer),i=128===r[3];function writeFloat_f32_cpy(e,i,n){t[0]=e,i[n]=r[0],i[n+1]=r[1],i[n+2]=r[2],i[n+3]=r[3]}function writeFloat_f32_rev(e,i,n){t[0]=e,i[n]=r[3],i[n+1]=r[2],i[n+2]=r[1],i[n+3]=r[0]}function readFloat_f32_cpy(e,i){return r[0]=e[i],r[1]=e[i+1],r[2]=e[i+2],r[3]=e[i+3],t[0]}function readFloat_f32_rev(e,i){return r[3]=e[i],r[2]=e[i+1],r[1]=e[i+2],r[0]=e[i+3],t[0]}e.writeFloatLE=i?writeFloat_f32_cpy:writeFloat_f32_rev,e.writeFloatBE=i?writeFloat_f32_rev:writeFloat_f32_cpy,e.readFloatLE=i?readFloat_f32_cpy:readFloat_f32_rev,e.readFloatBE=i?readFloat_f32_rev:readFloat_f32_cpy}():function(){function writeFloat_ieee754(e,t,r,i){var n=t<0?1:0;if(n&&(t=-t),0===t)e(1/t>0?0:2147483648,r,i);else if(isNaN(t))e(2143289344,r,i);else if(t>34028234663852886e22)e((n<<31|2139095040)>>>0,r,i);else if(t<11754943508222875e-54)e((n<<31|Math.round(t/1401298464324817e-60))>>>0,r,i);else{var o=Math.floor(Math.log(t)/Math.LN2);e((n<<31|o+127<<23|8388607&Math.round(t*Math.pow(2,-o)*8388608))>>>0,r,i)}}function readFloat_ieee754(e,t,r){var i=e(t,r),n=2*(i>>31)+1,o=i>>>23&255,s=8388607&i;return 255===o?s?NaN:n*(1/0):0===o?1401298464324817e-60*n*s:n*Math.pow(2,o-150)*(s+8388608)}e.writeFloatLE=writeFloat_ieee754.bind(null,writeUintLE),e.writeFloatBE=writeFloat_ieee754.bind(null,writeUintBE),e.readFloatLE=readFloat_ieee754.bind(null,readUintLE),e.readFloatBE=readFloat_ieee754.bind(null,readUintBE)}(),"undefined"!=typeof Float64Array?function(){var t=new Float64Array([-0]),r=new Uint8Array(t.buffer),i=128===r[7];function writeDouble_f64_cpy(e,i,n){t[0]=e,i[n]=r[0],i[n+1]=r[1],i[n+2]=r[2],i[n+3]=r[3],i[n+4]=r[4],i[n+5]=r[5],i[n+6]=r[6],i[n+7]=r[7]}function writeDouble_f64_rev(e,i,n){t[0]=e,i[n]=r[7],i[n+1]=r[6],i[n+2]=r[5],i[n+3]=r[4],i[n+4]=r[3],i[n+5]=r[2],i[n+6]=r[1],i[n+7]=r[0]}function readDouble_f64_cpy(e,i){return r[0]=e[i],r[1]=e[i+1],r[2]=e[i+2],r[3]=e[i+3],r[4]=e[i+4],r[5]=e[i+5],r[6]=e[i+6],r[7]=e[i+7],t[0]}function readDouble_f64_rev(e,i){return r[7]=e[i],r[6]=e[i+1],r[5]=e[i+2],r[4]=e[i+3],r[3]=e[i+4],r[2]=e[i+5],r[1]=e[i+6],r[0]=e[i+7],t[0]}e.writeDoubleLE=i?writeDouble_f64_cpy:writeDouble_f64_rev,e.writeDoubleBE=i?writeDouble_f64_rev:writeDouble_f64_cpy,e.readDoubleLE=i?readDouble_f64_cpy:readDouble_f64_rev,e.readDoubleBE=i?readDouble_f64_rev:readDouble_f64_cpy}():function(){function writeDouble_ieee754(e,t,r,i,n,o){var s=i<0?1:0;if(s&&(i=-i),0===i)e(0,n,o+t),e(1/i>0?0:2147483648,n,o+r);else if(isNaN(i))e(0,n,o+t),e(2146959360,n,o+r);else if(i>17976931348623157e292)e(0,n,o+t),e((s<<31|2146435072)>>>0,n,o+r);else{var a;if(i<22250738585072014e-324)e((a=i/5e-324)>>>0,n,o+t),e((s<<31|a/4294967296)>>>0,n,o+r);else{var l=Math.floor(Math.log(i)/Math.LN2);1024===l&&(l=1023),e(4503599627370496*(a=i*Math.pow(2,-l))>>>0,n,o+t),e((s<<31|l+1023<<20|1048576*a&1048575)>>>0,n,o+r)}}}function readDouble_ieee754(e,t,r,i,n){var o=e(i,n+t),s=e(i,n+r),a=2*(s>>31)+1,l=s>>>20&2047,f=4294967296*(1048575&s)+o;return 2047===l?f?NaN:a*(1/0):0===l?5e-324*a*f:a*Math.pow(2,l-1075)*(f+4503599627370496)}e.writeDoubleLE=writeDouble_ieee754.bind(null,writeUintLE,0,4),e.writeDoubleBE=writeDouble_ieee754.bind(null,writeUintBE,4,0),e.readDoubleLE=readDouble_ieee754.bind(null,readUintLE,0,4),e.readDoubleBE=readDouble_ieee754.bind(null,readUintBE,4,0)}(),e}function writeUintLE(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24}function writeUintBE(e,t,r){t[r]=e>>>24,t[r+1]=e>>>16&255,t[r+2]=e>>>8&255,t[r+3]=255&e}function readUintLE(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function readUintBE(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}e.exports=factory(factory)},4153:module=>{function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(e){}return null}module.exports=inquire},9207:(e,t)=>{var r=t,i=r.isAbsolute=function isAbsolute(e){return/^(?:\/|\w+:)/.test(e)},n=r.normalize=function normalize(e){var t=(e=e.replace(/\\/g,"/").replace(/\/{2,}/g,"/")).split("/"),r=i(e),n="";r&&(n=t.shift()+"/");for(var o=0;o<t.length;)".."===t[o]?o>0&&".."!==t[o-1]?t.splice(--o,2):r?t.splice(o,1):++o:"."===t[o]?t.splice(o,1):++o;return n+t.join("/")};r.resolve=function resolve(e,t,r){return r||(t=n(t)),i(t)?t:(r||(e=n(e)),(e=e.replace(/(?:\/|^)[^/]+$/,"")).length?n(e+"/"+t):t)}},9390:e=>{e.exports=function pool(e,t,r){var i=r||8192,n=i>>>1,o=null,s=i;return function pool_alloc(r){if(r<1||r>n)return e(r);s+r>i&&(o=e(i),s=0);var a=t.call(o,s,s+=r);return 7&s&&(s=1+(7|s)),a}}},1447:(e,t)=>{var r=t;r.length=function utf8_length(e){for(var t=0,r=0,i=0;i<e.length;++i)(r=e.charCodeAt(i))<128?t+=1:r<2048?t+=2:55296==(64512&r)&&56320==(64512&e.charCodeAt(i+1))?(++i,t+=4):t+=3;return t},r.read=function utf8_read(e,t,r){if(r-t<1)return"";for(var i,n=null,o=[],s=0;t<r;)(i=e[t++])<128?o[s++]=i:i>191&&i<224?o[s++]=(31&i)<<6|63&e[t++]:i>239&&i<365?(i=((7&i)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536,o[s++]=55296+(i>>10),o[s++]=56320+(1023&i)):o[s++]=(15&i)<<12|(63&e[t++])<<6|63&e[t++],s>8191&&((n||(n=[])).push(String.fromCharCode.apply(String,o)),s=0);return n?(s&&n.push(String.fromCharCode.apply(String,o.slice(0,s))),n.join("")):String.fromCharCode.apply(String,o.slice(0,s))},r.write=function utf8_write(e,t,r){for(var i,n,o=r,s=0;s<e.length;++s)(i=e.charCodeAt(s))<128?t[r++]=i:i<2048?(t[r++]=i>>6|192,t[r++]=63&i|128):55296==(64512&i)&&56320==(64512&(n=e.charCodeAt(s+1)))?(i=65536+((1023&i)<<10)+(1023&n),++s,t[r++]=i>>18|240,t[r++]=i>>12&63|128,t[r++]=i>>6&63|128,t[r++]=63&i|128):(t[r++]=i>>12|224,t[r++]=i>>6&63|128,t[r++]=63&i|128);return r-o}},2549:(e,t,r)=>{e.exports=r(9100)},8341:(e,t,r)=>{e.exports=r(5325)},6946:(e,t,r)=>{e.exports=r(4394)},5095:e=>{e.exports=common;var t,r=/\/|\./;function common(e,t){r.test(e)||(e="google/protobuf/"+e+".proto",t={nested:{google:{nested:{protobuf:{nested:t}}}}}),common[e]=t}common("any",{Any:{fields:{type_url:{type:"string",id:1},value:{type:"bytes",id:2}}}}),common("duration",{Duration:t={fields:{seconds:{type:"int64",id:1},nanos:{type:"int32",id:2}}}}),common("timestamp",{Timestamp:t}),common("empty",{Empty:{fields:{}}}),common("struct",{Struct:{fields:{fields:{keyType:"string",type:"Value",id:1}}},Value:{oneofs:{kind:{oneof:["nullValue","numberValue","stringValue","boolValue","structValue","listValue"]}},fields:{nullValue:{type:"NullValue",id:1},numberValue:{type:"double",id:2},stringValue:{type:"string",id:3},boolValue:{type:"bool",id:4},structValue:{type:"Struct",id:5},listValue:{type:"ListValue",id:6}}},NullValue:{values:{NULL_VALUE:0}},ListValue:{fields:{values:{rule:"repeated",type:"Value",id:1}}}}),common("wrappers",{DoubleValue:{fields:{value:{type:"double",id:1}}},FloatValue:{fields:{value:{type:"float",id:1}}},Int64Value:{fields:{value:{type:"int64",id:1}}},UInt64Value:{fields:{value:{type:"uint64",id:1}}},Int32Value:{fields:{value:{type:"int32",id:1}}},UInt32Value:{fields:{value:{type:"uint32",id:1}}},BoolValue:{fields:{value:{type:"bool",id:1}}},StringValue:{fields:{value:{type:"string",id:1}}},BytesValue:{fields:{value:{type:"bytes",id:1}}}}),common("field_mask",{FieldMask:{fields:{paths:{rule:"repeated",type:"string",id:1}}}}),common.get=function get(e){return common[e]||null}},744:(e,t,r)=>{var i=t,n=r(5643),o=r(3262);function genValuePartial_fromObject(e,t,r,i){var o=!1;if(t.resolvedType)if(t.resolvedType instanceof n){e("switch(d%s){",i);for(var s=t.resolvedType.values,a=Object.keys(s),l=0;l<a.length;++l)s[a[l]]!==t.typeDefault||o||(e("default:")('if(typeof(d%s)==="number"){m%s=d%s;break}',i,i,i),t.repeated||e("break"),o=!0),e("case%j:",a[l])("case %i:",s[a[l]])("m%s=%j",i,s[a[l]])("break");e("}")}else e('if(typeof d%s!=="object")',i)("throw TypeError(%j)",t.fullName+": object expected")("m%s=types[%i].fromObject(d%s)",i,r,i);else{var f=!1;switch(t.type){case"double":case"float":e("m%s=Number(d%s)",i,i);break;case"uint32":case"fixed32":e("m%s=d%s>>>0",i,i);break;case"int32":case"sint32":case"sfixed32":e("m%s=d%s|0",i,i);break;case"uint64":f=!0;case"int64":case"sint64":case"fixed64":case"sfixed64":e("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j",i,i,f)('else if(typeof d%s==="string")',i)("m%s=parseInt(d%s,10)",i,i)('else if(typeof d%s==="number")',i)("m%s=d%s",i,i)('else if(typeof d%s==="object")',i)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)",i,i,i,f?"true":"");break;case"bytes":e('if(typeof d%s==="string")',i)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)",i,i,i)("else if(d%s.length >= 0)",i)("m%s=d%s",i,i);break;case"string":e("m%s=String(d%s)",i,i);break;case"bool":e("m%s=Boolean(d%s)",i,i)}}return e}function genValuePartial_toObject(e,t,r,i){if(t.resolvedType)t.resolvedType instanceof n?e("d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s",i,r,i,i,r,i,i):e("d%s=types[%i].toObject(m%s,o)",i,r,i);else{var o=!1;switch(t.type){case"double":case"float":e("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s",i,i,i,i);break;case"uint64":o=!0;case"int64":case"sint64":case"fixed64":case"sfixed64":e('if(typeof m%s==="number")',i)("d%s=o.longs===String?String(m%s):m%s",i,i,i)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s",i,i,i,i,o?"true":"",i);break;case"bytes":e("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s",i,i,i,i,i);break;default:e("d%s=m%s",i,i)}}return e}i.fromObject=function fromObject(e){var t=e.fieldsArray,r=o.codegen(["d"],e.name+"$fromObject")("if(d instanceof this.ctor)")("return d");if(!t.length)return r("return new this.ctor");r("var m=new this.ctor");for(var i=0;i<t.length;++i){var s=t[i].resolve(),a=o.safeProp(s.name);s.map?(r("if(d%s){",a)('if(typeof d%s!=="object")',a)("throw TypeError(%j)",s.fullName+": object expected")("m%s={}",a)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){",a),genValuePartial_fromObject(r,s,i,a+"[ks[i]]")("}")("}")):s.repeated?(r("if(d%s){",a)("if(!Array.isArray(d%s))",a)("throw TypeError(%j)",s.fullName+": array expected")("m%s=[]",a)("for(var i=0;i<d%s.length;++i){",a),genValuePartial_fromObject(r,s,i,a+"[i]")("}")("}")):(s.resolvedType instanceof n||r("if(d%s!=null){",a),genValuePartial_fromObject(r,s,i,a),s.resolvedType instanceof n||r("}"))}return r("return m")},i.toObject=function toObject(e){var t=e.fieldsArray.slice().sort(o.compareFieldsById);if(!t.length)return o.codegen()("return {}");for(var r=o.codegen(["m","o"],e.name+"$toObject")("if(!o)")("o={}")("var d={}"),i=[],s=[],a=[],l=0;l<t.length;++l)t[l].partOf||(t[l].resolve().repeated?i:t[l].map?s:a).push(t[l]);if(i.length){for(r("if(o.arrays||o.defaults){"),l=0;l<i.length;++l)r("d%s=[]",o.safeProp(i[l].name));r("}")}if(s.length){for(r("if(o.objects||o.defaults){"),l=0;l<s.length;++l)r("d%s={}",o.safeProp(s[l].name));r("}")}if(a.length){for(r("if(o.defaults){"),l=0;l<a.length;++l){var f=a[l],u=o.safeProp(f.name);if(f.resolvedType instanceof n)r("d%s=o.enums===String?%j:%j",u,f.resolvedType.valuesById[f.typeDefault],f.typeDefault);else if(f.long)r("if(util.Long){")("var n=new util.Long(%i,%i,%j)",f.typeDefault.low,f.typeDefault.high,f.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n",u)("}else")("d%s=o.longs===String?%j:%i",u,f.typeDefault.toString(),f.typeDefault.toNumber());else if(f.bytes){var p="["+Array.prototype.slice.call(f.typeDefault).join(",")+"]";r("if(o.bytes===String)d%s=%j",u,String.fromCharCode.apply(String,f.typeDefault))("else{")("d%s=%s",u,p)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)",u,u)("}")}else r("d%s=%j",u,f.typeDefault)}r("}")}var c=!1;for(l=0;l<t.length;++l){f=t[l];var d=e._fieldsArray.indexOf(f);u=o.safeProp(f.name);f.map?(c||(c=!0,r("var ks2")),r("if(m%s&&(ks2=Object.keys(m%s)).length){",u,u)("d%s={}",u)("for(var j=0;j<ks2.length;++j){"),genValuePartial_toObject(r,f,d,u+"[ks2[j]]")("}")):f.repeated?(r("if(m%s&&m%s.length){",u,u)("d%s=[]",u)("for(var j=0;j<m%s.length;++j){",u),genValuePartial_toObject(r,f,d,u+"[j]")("}")):(r("if(m%s!=null&&m.hasOwnProperty(%j)){",u,f.name),genValuePartial_toObject(r,f,d,u),f.partOf&&r("if(o.oneofs)")("d%s=%j",o.safeProp(f.partOf.name),f.name)),r("}")}return r("return d")}},7728:(e,t,r)=>{e.exports=function decoder(e){var t=o.codegen(["r","l"],e.name+"$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor"+(e.fieldsArray.filter((function(e){return e.map})).length?",k,value":""))("while(r.pos<c){")("var t=r.uint32()");e.group&&t("if((t&7)===4)")("break");t("switch(t>>>3){");for(var r=0;r<e.fieldsArray.length;++r){var s=e._fieldsArray[r].resolve(),a=s.resolvedType instanceof i?"int32":s.type,l="m"+o.safeProp(s.name);t("case %i: {",s.id),s.map?(t("if(%s===util.emptyObject)",l)("%s={}",l)("var c2 = r.uint32()+r.pos"),void 0!==n.defaults[s.keyType]?t("k=%j",n.defaults[s.keyType]):t("k=null"),void 0!==n.defaults[a]?t("value=%j",n.defaults[a]):t("value=null"),t("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break",s.keyType)("case 2:"),void 0===n.basic[a]?t("value=types[%i].decode(r,r.uint32())",r):t("value=r.%s()",a),t("break")("default:")("r.skipType(tag2&7)")("break")("}")("}"),void 0!==n.long[s.keyType]?t('%s[typeof k==="object"?util.longToHash(k):k]=value',l):t("%s[k]=value",l)):s.repeated?(t("if(!(%s&&%s.length))",l,l)("%s=[]",l),void 0!==n.packed[a]&&t("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())",l,a)("}else"),void 0===n.basic[a]?t(s.resolvedType.group?"%s.push(types[%i].decode(r))":"%s.push(types[%i].decode(r,r.uint32()))",l,r):t("%s.push(r.%s())",l,a)):void 0===n.basic[a]?t(s.resolvedType.group?"%s=types[%i].decode(r)":"%s=types[%i].decode(r,r.uint32())",l,r):t("%s=r.%s()",l,a),t("break")("}")}for(t("default:")("r.skipType(t&7)")("break")("}")("}"),r=0;r<e._fieldsArray.length;++r){var f=e._fieldsArray[r];f.required&&t("if(!m.hasOwnProperty(%j))",f.name)("throw util.ProtocolError(%j,{instance:m})",missing(f))}return t("return m")};var i=r(5643),n=r(361),o=r(3262);function missing(e){return"missing required '"+e.name+"'"}},1080:(e,t,r)=>{e.exports=function encoder(e){for(var t,r=o.codegen(["m","w"],e.name+"$encode")("if(!w)")("w=Writer.create()"),s=e.fieldsArray.slice().sort(o.compareFieldsById),a=0;a<s.length;++a){var l=s[a].resolve(),f=e._fieldsArray.indexOf(l),u=l.resolvedType instanceof i?"int32":l.type,p=n.basic[u];t="m"+o.safeProp(l.name),l.map?(r("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){",t,l.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){",t)("w.uint32(%i).fork().uint32(%i).%s(ks[i])",(l.id<<3|2)>>>0,8|n.mapKey[l.keyType],l.keyType),void 0===p?r("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()",f,t):r(".uint32(%i).%s(%s[ks[i]]).ldelim()",16|p,u,t),r("}")("}")):l.repeated?(r("if(%s!=null&&%s.length){",t,t),l.packed&&void 0!==n.packed[u]?r("w.uint32(%i).fork()",(l.id<<3|2)>>>0)("for(var i=0;i<%s.length;++i)",t)("w.%s(%s[i])",u,t)("w.ldelim()"):(r("for(var i=0;i<%s.length;++i)",t),void 0===p?genTypePartial(r,l,f,t+"[i]"):r("w.uint32(%i).%s(%s[i])",(l.id<<3|p)>>>0,u,t)),r("}")):(l.optional&&r("if(%s!=null&&Object.hasOwnProperty.call(m,%j))",t,l.name),void 0===p?genTypePartial(r,l,f,t):r("w.uint32(%i).%s(%s)",(l.id<<3|p)>>>0,u,t))}return r("return w")};var i=r(5643),n=r(361),o=r(3262);function genTypePartial(e,t,r,i){return t.resolvedType.group?e("types[%i].encode(%s,w.uint32(%i)).uint32(%i)",r,i,(t.id<<3|3)>>>0,(t.id<<3|4)>>>0):e("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()",r,i,(t.id<<3|2)>>>0)}},5643:(e,t,r)=>{e.exports=Enum;var i=r(7209);((Enum.prototype=Object.create(i.prototype)).constructor=Enum).className="Enum";var n=r(8923),o=r(3262);function Enum(e,t,r,n,o,s){if(i.call(this,e,r),t&&"object"!=typeof t)throw TypeError("values must be an object");if(this.valuesById={},this.values=Object.create(this.valuesById),this.comment=n,this.comments=o||{},this.valuesOptions=s,this.reserved=void 0,t)for(var a=Object.keys(t),l=0;l<a.length;++l)"number"==typeof t[a[l]]&&(this.valuesById[this.values[a[l]]=t[a[l]]]=a[l])}Enum.fromJSON=function fromJSON(e,t){var r=new Enum(e,t.values,t.options,t.comment,t.comments);return r.reserved=t.reserved,r},Enum.prototype.toJSON=function toJSON(e){var t=!!e&&Boolean(e.keepComments);return o.toObject(["options",this.options,"valuesOptions",this.valuesOptions,"values",this.values,"reserved",this.reserved&&this.reserved.length?this.reserved:void 0,"comment",t?this.comment:void 0,"comments",t?this.comments:void 0])},Enum.prototype.add=function add(e,t,r,i){if(!o.isString(e))throw TypeError("name must be a string");if(!o.isInteger(t))throw TypeError("id must be an integer");if(void 0!==this.values[e])throw Error("duplicate name '"+e+"' in "+this);if(this.isReservedId(t))throw Error("id "+t+" is reserved in "+this);if(this.isReservedName(e))throw Error("name '"+e+"' is reserved in "+this);if(void 0!==this.valuesById[t]){if(!this.options||!this.options.allow_alias)throw Error("duplicate id "+t+" in "+this);this.values[e]=t}else this.valuesById[this.values[e]=t]=e;return i&&(void 0===this.valuesOptions&&(this.valuesOptions={}),this.valuesOptions[e]=i||null),this.comments[e]=r||null,this},Enum.prototype.remove=function remove(e){if(!o.isString(e))throw TypeError("name must be a string");var t=this.values[e];if(null==t)throw Error("name '"+e+"' does not exist in "+this);return delete this.valuesById[t],delete this.values[e],delete this.comments[e],this.valuesOptions&&delete this.valuesOptions[e],this},Enum.prototype.isReservedId=function isReservedId(e){return n.isReservedId(this.reserved,e)},Enum.prototype.isReservedName=function isReservedName(e){return n.isReservedName(this.reserved,e)}},1344:(e,t,r)=>{e.exports=Field;var i=r(7209);((Field.prototype=Object.create(i.prototype)).constructor=Field).className="Field";var n,o=r(5643),s=r(361),a=r(3262),l=/^required|optional|repeated$/;function Field(e,t,r,n,o,f,u){if(a.isObject(n)?(u=o,f=n,n=o=void 0):a.isObject(o)&&(u=f,f=o,o=void 0),i.call(this,e,f),!a.isInteger(t)||t<0)throw TypeError("id must be a non-negative integer");if(!a.isString(r))throw TypeError("type must be a string");if(void 0!==n&&!l.test(n=n.toString().toLowerCase()))throw TypeError("rule must be a string rule");if(void 0!==o&&!a.isString(o))throw TypeError("extend must be a string");"proto3_optional"===n&&(n="optional"),this.rule=n&&"optional"!==n?n:void 0,this.type=r,this.id=t,this.extend=o||void 0,this.required="required"===n,this.optional=!this.required,this.repeated="repeated"===n,this.map=!1,this.message=null,this.partOf=null,this.typeDefault=null,this.defaultValue=null,this.long=!!a.Long&&void 0!==s.long[r],this.bytes="bytes"===r,this.resolvedType=null,this.extensionField=null,this.declaringField=null,this._packed=null,this.comment=u}Field.fromJSON=function fromJSON(e,t){return new Field(e,t.id,t.type,t.rule,t.extend,t.options,t.comment)},Object.defineProperty(Field.prototype,"packed",{get:function(){return null===this._packed&&(this._packed=!1!==this.getOption("packed")),this._packed}}),Field.prototype.setOption=function setOption(e,t,r){return"packed"===e&&(this._packed=null),i.prototype.setOption.call(this,e,t,r)},Field.prototype.toJSON=function toJSON(e){var t=!!e&&Boolean(e.keepComments);return a.toObject(["rule","optional"!==this.rule&&this.rule||void 0,"type",this.type,"id",this.id,"extend",this.extend,"options",this.options,"comment",t?this.comment:void 0])},Field.prototype.resolve=function resolve(){if(this.resolved)return this;if(void 0===(this.typeDefault=s.defaults[this.type])?(this.resolvedType=(this.declaringField?this.declaringField.parent:this.parent).lookupTypeOrEnum(this.type),this.resolvedType instanceof n?this.typeDefault=null:this.typeDefault=this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]):this.options&&this.options.proto3_optional&&(this.typeDefault=null),this.options&&null!=this.options.default&&(this.typeDefault=this.options.default,this.resolvedType instanceof o&&"string"==typeof this.typeDefault&&(this.typeDefault=this.resolvedType.values[this.typeDefault])),this.options&&(!0!==this.options.packed&&(void 0===this.options.packed||!this.resolvedType||this.resolvedType instanceof o)||delete this.options.packed,Object.keys(this.options).length||(this.options=void 0)),this.long)this.typeDefault=a.Long.fromNumber(this.typeDefault,"u"===this.type.charAt(0)),Object.freeze&&Object.freeze(this.typeDefault);else if(this.bytes&&"string"==typeof this.typeDefault){var e;a.base64.test(this.typeDefault)?a.base64.decode(this.typeDefault,e=a.newBuffer(a.base64.length(this.typeDefault)),0):a.utf8.write(this.typeDefault,e=a.newBuffer(a.utf8.length(this.typeDefault)),0),this.typeDefault=e}return this.map?this.defaultValue=a.emptyObject:this.repeated?this.defaultValue=a.emptyArray:this.defaultValue=this.typeDefault,this.parent instanceof n&&(this.parent.ctor.prototype[this.name]=this.defaultValue),i.prototype.resolve.call(this)},Field.d=function decorateField(e,t,r,i){return"function"==typeof t?t=a.decorateType(t).name:t&&"object"==typeof t&&(t=a.decorateEnum(t).name),function fieldDecorator(n,o){a.decorateType(n.constructor).add(new Field(o,e,t,r,{default:i}))}},Field._configure=function configure(e){n=e}},5325:(e,t,r)=>{var i=e.exports=r(4394);i.build="light",i.load=function load(e,t,r){return"function"==typeof t?(r=t,t=new i.Root):t||(t=new i.Root),t.load(e,r)},i.loadSync=function loadSync(e,t){return t||(t=new i.Root),t.loadSync(e)},i.encoder=r(1080),i.decoder=r(7728),i.verifier=r(420),i.converter=r(744),i.ReflectionObject=r(7209),i.Namespace=r(8923),i.Root=r(5330),i.Enum=r(5643),i.Type=r(7882),i.Field=r(1344),i.OneOf=r(1457),i.MapField=r(8252),i.Service=r(9687),i.Method=r(8811),i.Message=r(2551),i.wrappers=r(6434),i.types=r(361),i.util=r(3262),i.ReflectionObject._configure(i.Root),i.Namespace._configure(i.Type,i.Service,i.Enum),i.Root._configure(i.Type),i.Field._configure(i.Type)},4394:(e,t,r)=>{var i=t;function configure(){i.util._configure(),i.Writer._configure(i.BufferWriter),i.Reader._configure(i.BufferReader)}i.build="minimal",i.Writer=r(3449),i.BufferWriter=r(818),i.Reader=r(6237),i.BufferReader=r(3158),i.util=r(3610),i.rpc=r(5047),i.roots=r(4529),i.configure=configure,configure()},9100:(e,t,r)=>{var i=e.exports=r(5325);i.build="full",i.tokenize=r(527),i.parse=r(4863),i.common=r(5095),i.Root._configure(i.Type,i.parse,i.common)},8252:(e,t,r)=>{e.exports=MapField;var i=r(1344);((MapField.prototype=Object.create(i.prototype)).constructor=MapField).className="MapField";var n=r(361),o=r(3262);function MapField(e,t,r,n,s,a){if(i.call(this,e,t,n,void 0,void 0,s,a),!o.isString(r))throw TypeError("keyType must be a string");this.keyType=r,this.resolvedKeyType=null,this.map=!0}MapField.fromJSON=function fromJSON(e,t){return new MapField(e,t.id,t.keyType,t.type,t.options,t.comment)},MapField.prototype.toJSON=function toJSON(e){var t=!!e&&Boolean(e.keepComments);return o.toObject(["keyType",this.keyType,"type",this.type,"id",this.id,"extend",this.extend,"options",this.options,"comment",t?this.comment:void 0])},MapField.prototype.resolve=function resolve(){if(this.resolved)return this;if(void 0===n.mapKey[this.keyType])throw Error("invalid key type: "+this.keyType);return i.prototype.resolve.call(this)},MapField.d=function decorateMapField(e,t,r){return"function"==typeof r?r=o.decorateType(r).name:r&&"object"==typeof r&&(r=o.decorateEnum(r).name),function mapFieldDecorator(i,n){o.decorateType(i.constructor).add(new MapField(n,e,t,r))}}},2551:(e,t,r)=>{e.exports=Message;var i=r(3610);function Message(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)this[t[r]]=e[t[r]]}Message.create=function create(e){return this.$type.create(e)},Message.encode=function encode(e,t){return this.$type.encode(e,t)},Message.encodeDelimited=function encodeDelimited(e,t){return this.$type.encodeDelimited(e,t)},Message.decode=function decode(e){return this.$type.decode(e)},Message.decodeDelimited=function decodeDelimited(e){return this.$type.decodeDelimited(e)},Message.verify=function verify(e){return this.$type.verify(e)},Message.fromObject=function fromObject(e){return this.$type.fromObject(e)},Message.toObject=function toObject(e,t){return this.$type.toObject(e,t)},Message.prototype.toJSON=function toJSON(){return this.$type.toObject(this,i.toJSONOptions)}},8811:(e,t,r)=>{e.exports=Method;var i=r(7209);((Method.prototype=Object.create(i.prototype)).constructor=Method).className="Method";var n=r(3262);function Method(e,t,r,o,s,a,l,f,u){if(n.isObject(s)?(l=s,s=a=void 0):n.isObject(a)&&(l=a,a=void 0),void 0!==t&&!n.isString(t))throw TypeError("type must be a string");if(!n.isString(r))throw TypeError("requestType must be a string");if(!n.isString(o))throw TypeError("responseType must be a string");i.call(this,e,l),this.type=t||"rpc",this.requestType=r,this.requestStream=!!s||void 0,this.responseType=o,this.responseStream=!!a||void 0,this.resolvedRequestType=null,this.resolvedResponseType=null,this.comment=f,this.parsedOptions=u}Method.fromJSON=function fromJSON(e,t){return new Method(e,t.type,t.requestType,t.responseType,t.requestStream,t.responseStream,t.options,t.comment,t.parsedOptions)},Method.prototype.toJSON=function toJSON(e){var t=!!e&&Boolean(e.keepComments);return n.toObject(["type","rpc"!==this.type&&this.type||void 0,"requestType",this.requestType,"requestStream",this.requestStream,"responseType",this.responseType,"responseStream",this.responseStream,"options",this.options,"comment",t?this.comment:void 0,"parsedOptions",this.parsedOptions])},Method.prototype.resolve=function resolve(){return this.resolved?this:(this.resolvedRequestType=this.parent.lookupType(this.requestType),this.resolvedResponseType=this.parent.lookupType(this.responseType),i.prototype.resolve.call(this))}},8923:(e,t,r)=>{e.exports=Namespace;var i=r(7209);((Namespace.prototype=Object.create(i.prototype)).constructor=Namespace).className="Namespace";var n,o,s,a=r(1344),l=r(3262),f=r(1457);function arrayToJSON(e,t){if(e&&e.length){for(var r={},i=0;i<e.length;++i)r[e[i].name]=e[i].toJSON(t);return r}}function Namespace(e,t){i.call(this,e,t),this.nested=void 0,this._nestedArray=null}function clearCache(e){return e._nestedArray=null,e}Namespace.fromJSON=function fromJSON(e,t){return new Namespace(e,t.options).addJSON(t.nested)},Namespace.arrayToJSON=arrayToJSON,Namespace.isReservedId=function isReservedId(e,t){if(e)for(var r=0;r<e.length;++r)if("string"!=typeof e[r]&&e[r][0]<=t&&e[r][1]>t)return!0;return!1},Namespace.isReservedName=function isReservedName(e,t){if(e)for(var r=0;r<e.length;++r)if(e[r]===t)return!0;return!1},Object.defineProperty(Namespace.prototype,"nestedArray",{get:function(){return this._nestedArray||(this._nestedArray=l.toArray(this.nested))}}),Namespace.prototype.toJSON=function toJSON(e){return l.toObject(["options",this.options,"nested",arrayToJSON(this.nestedArray,e)])},Namespace.prototype.addJSON=function addJSON(e){if(e)for(var t,r=Object.keys(e),i=0;i<r.length;++i)t=e[r[i]],this.add((void 0!==t.fields?n.fromJSON:void 0!==t.values?s.fromJSON:void 0!==t.methods?o.fromJSON:void 0!==t.id?a.fromJSON:Namespace.fromJSON)(r[i],t));return this},Namespace.prototype.get=function get(e){return this.nested&&this.nested[e]||null},Namespace.prototype.getEnum=function getEnum(e){if(this.nested&&this.nested[e]instanceof s)return this.nested[e].values;throw Error("no such enum: "+e)},Namespace.prototype.add=function add(e){if(!(e instanceof a&&void 0!==e.extend||e instanceof n||e instanceof f||e instanceof s||e instanceof o||e instanceof Namespace))throw TypeError("object must be a valid nested object");if(this.nested){var t=this.get(e.name);if(t){if(!(t instanceof Namespace&&e instanceof Namespace)||t instanceof n||t instanceof o)throw Error("duplicate name '"+e.name+"' in "+this);for(var r=t.nestedArray,i=0;i<r.length;++i)e.add(r[i]);this.remove(t),this.nested||(this.nested={}),e.setOptions(t.options,!0)}}else this.nested={};return this.nested[e.name]=e,e.onAdd(this),clearCache(this)},Namespace.prototype.remove=function remove(e){if(!(e instanceof i))throw TypeError("object must be a ReflectionObject");if(e.parent!==this)throw Error(e+" is not a member of "+this);return delete this.nested[e.name],Object.keys(this.nested).length||(this.nested=void 0),e.onRemove(this),clearCache(this)},Namespace.prototype.define=function define(e,t){if(l.isString(e))e=e.split(".");else if(!Array.isArray(e))throw TypeError("illegal path");if(e&&e.length&&""===e[0])throw Error("path must be relative");for(var r=this;e.length>0;){var i=e.shift();if(r.nested&&r.nested[i]){if(!((r=r.nested[i])instanceof Namespace))throw Error("path conflicts with non-namespace objects")}else r.add(r=new Namespace(i))}return t&&r.addJSON(t),r},Namespace.prototype.resolveAll=function resolveAll(){for(var e=this.nestedArray,t=0;t<e.length;)e[t]instanceof Namespace?e[t++].resolveAll():e[t++].resolve();return this.resolve()},Namespace.prototype.lookup=function lookup(e,t,r){if("boolean"==typeof t?(r=t,t=void 0):t&&!Array.isArray(t)&&(t=[t]),l.isString(e)&&e.length){if("."===e)return this.root;e=e.split(".")}else if(!e.length)return this;if(""===e[0])return this.root.lookup(e.slice(1),t);var i=this.get(e[0]);if(i){if(1===e.length){if(!t||t.indexOf(i.constructor)>-1)return i}else if(i instanceof Namespace&&(i=i.lookup(e.slice(1),t,!0)))return i}else for(var n=0;n<this.nestedArray.length;++n)if(this._nestedArray[n]instanceof Namespace&&(i=this._nestedArray[n].lookup(e,t,!0)))return i;return null===this.parent||r?null:this.parent.lookup(e,t)},Namespace.prototype.lookupType=function lookupType(e){var t=this.lookup(e,[n]);if(!t)throw Error("no such type: "+e);return t},Namespace.prototype.lookupEnum=function lookupEnum(e){var t=this.lookup(e,[s]);if(!t)throw Error("no such Enum '"+e+"' in "+this);return t},Namespace.prototype.lookupTypeOrEnum=function lookupTypeOrEnum(e){var t=this.lookup(e,[n,s]);if(!t)throw Error("no such Type or Enum '"+e+"' in "+this);return t},Namespace.prototype.lookupService=function lookupService(e){var t=this.lookup(e,[o]);if(!t)throw Error("no such Service '"+e+"' in "+this);return t},Namespace._configure=function(e,t,r){n=e,o=t,s=r}},7209:(e,t,r)=>{e.exports=ReflectionObject,ReflectionObject.className="ReflectionObject";var i,n=r(3262);function ReflectionObject(e,t){if(!n.isString(e))throw TypeError("name must be a string");if(t&&!n.isObject(t))throw TypeError("options must be an object");this.options=t,this.parsedOptions=null,this.name=e,this.parent=null,this.resolved=!1,this.comment=null,this.filename=null}Object.defineProperties(ReflectionObject.prototype,{root:{get:function(){for(var e=this;null!==e.parent;)e=e.parent;return e}},fullName:{get:function(){for(var e=[this.name],t=this.parent;t;)e.unshift(t.name),t=t.parent;return e.join(".")}}}),ReflectionObject.prototype.toJSON=function toJSON(){throw Error()},ReflectionObject.prototype.onAdd=function onAdd(e){this.parent&&this.parent!==e&&this.parent.remove(this),this.parent=e,this.resolved=!1;var t=e.root;t instanceof i&&t._handleAdd(this)},ReflectionObject.prototype.onRemove=function onRemove(e){var t=e.root;t instanceof i&&t._handleRemove(this),this.parent=null,this.resolved=!1},ReflectionObject.prototype.resolve=function resolve(){return this.resolved||this.root instanceof i&&(this.resolved=!0),this},ReflectionObject.prototype.getOption=function getOption(e){if(this.options)return this.options[e]},ReflectionObject.prototype.setOption=function setOption(e,t,r){return r&&this.options&&void 0!==this.options[e]||((this.options||(this.options={}))[e]=t),this},ReflectionObject.prototype.setParsedOption=function setParsedOption(e,t,r){this.parsedOptions||(this.parsedOptions=[]);var i=this.parsedOptions;if(r){var o=i.find((function(t){return Object.prototype.hasOwnProperty.call(t,e)}));if(o){var s=o[e];n.setProperty(s,r,t)}else(o={})[e]=n.setProperty({},r,t),i.push(o)}else{var a={};a[e]=t,i.push(a)}return this},ReflectionObject.prototype.setOptions=function setOptions(e,t){if(e)for(var r=Object.keys(e),i=0;i<r.length;++i)this.setOption(r[i],e[r[i]],t);return this},ReflectionObject.prototype.toString=function toString(){var e=this.constructor.className,t=this.fullName;return t.length?e+" "+t:e},ReflectionObject._configure=function(e){i=e}},1457:(e,t,r)=>{e.exports=OneOf;var i=r(7209);((OneOf.prototype=Object.create(i.prototype)).constructor=OneOf).className="OneOf";var n=r(1344),o=r(3262);function OneOf(e,t,r,n){if(Array.isArray(t)||(r=t,t=void 0),i.call(this,e,r),void 0!==t&&!Array.isArray(t))throw TypeError("fieldNames must be an Array");this.oneof=t||[],this.fieldsArray=[],this.comment=n}function addFieldsToParent(e){if(e.parent)for(var t=0;t<e.fieldsArray.length;++t)e.fieldsArray[t].parent||e.parent.add(e.fieldsArray[t])}OneOf.fromJSON=function fromJSON(e,t){return new OneOf(e,t.oneof,t.options,t.comment)},OneOf.prototype.toJSON=function toJSON(e){var t=!!e&&Boolean(e.keepComments);return o.toObject(["options",this.options,"oneof",this.oneof,"comment",t?this.comment:void 0])},OneOf.prototype.add=function add(e){if(!(e instanceof n))throw TypeError("field must be a Field");return e.parent&&e.parent!==this.parent&&e.parent.remove(e),this.oneof.push(e.name),this.fieldsArray.push(e),e.partOf=this,addFieldsToParent(this),this},OneOf.prototype.remove=function remove(e){if(!(e instanceof n))throw TypeError("field must be a Field");var t=this.fieldsArray.indexOf(e);if(t<0)throw Error(e+" is not a member of "+this);return this.fieldsArray.splice(t,1),(t=this.oneof.indexOf(e.name))>-1&&this.oneof.splice(t,1),e.partOf=null,this},OneOf.prototype.onAdd=function onAdd(e){i.prototype.onAdd.call(this,e);for(var t=0;t<this.oneof.length;++t){var r=e.get(this.oneof[t]);r&&!r.partOf&&(r.partOf=this,this.fieldsArray.push(r))}addFieldsToParent(this)},OneOf.prototype.onRemove=function onRemove(e){for(var t,r=0;r<this.fieldsArray.length;++r)(t=this.fieldsArray[r]).parent&&t.parent.remove(t);i.prototype.onRemove.call(this,e)},OneOf.d=function decorateOneOf(){for(var e=new Array(arguments.length),t=0;t<arguments.length;)e[t]=arguments[t++];return function oneOfDecorator(t,r){o.decorateType(t.constructor).add(new OneOf(r,e)),Object.defineProperty(t,r,{get:o.oneOfGetter(e),set:o.oneOfSetter(e)})}}},4863:(e,t,r)=>{e.exports=parse,parse.filename=null,parse.defaults={keepCase:!1};var i=r(527),n=r(5330),o=r(7882),s=r(1344),a=r(8252),l=r(1457),f=r(5643),u=r(9687),p=r(8811),c=r(361),d=r(3262),h=/^[1-9][0-9]*$/,y=/^-?[1-9][0-9]*$/,m=/^0[x][0-9a-fA-F]+$/,v=/^-?0[x][0-9a-fA-F]+$/,g=/^0[0-7]+$/,b=/^-?0[0-7]+$/,O=/^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,w=/^[a-zA-Z_][a-zA-Z_0-9]*$/,_=/^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,k=/^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;function parse(e,t,r){t instanceof n||(r=t,t=new n),r||(r=parse.defaults);var j,S,A,x,N,E=r.preferTrailingComment||!1,T=i(e,r.alternateCommentMode||!1),B=T.next,R=T.push,F=T.peek,L=T.skip,I=T.cmnt,C=!0,D=!1,V=t,P=r.keepCase?function(e){return e}:d.camelCase;function illegal(e,t,r){var i=parse.filename;return r||(parse.filename=null),Error("illegal "+(t||"token")+" '"+e+"' ("+(i?i+", ":"")+"line "+T.line+")")}function readString(){var e,t=[];do{if('"'!==(e=B())&&"'"!==e)throw illegal(e);t.push(B()),L(e),e=F()}while('"'===e||"'"===e);return t.join("")}function readValue(e){var t=B();switch(t){case"'":case'"':return R(t),readString();case"true":case"TRUE":return!0;case"false":case"FALSE":return!1}try{return function parseNumber(e,t){var r=1;"-"===e.charAt(0)&&(r=-1,e=e.substring(1));switch(e){case"inf":case"INF":case"Inf":return r*(1/0);case"nan":case"NAN":case"Nan":case"NaN":return NaN;case"0":return 0}if(h.test(e))return r*parseInt(e,10);if(m.test(e))return r*parseInt(e,16);if(g.test(e))return r*parseInt(e,8);if(O.test(e))return r*parseFloat(e);throw illegal(e,"number",t)}(t,!0)}catch(r){if(e&&_.test(t))return t;throw illegal(t,"value")}}function readRanges(e,t){var r,i;do{!t||'"'!==(r=F())&&"'"!==r?e.push([i=parseId(B()),L("to",!0)?parseId(B()):i]):e.push(readString())}while(L(",",!0));L(";")}function parseId(e,t){switch(e){case"max":case"MAX":case"Max":return 536870911;case"0":return 0}if(!t&&"-"===e.charAt(0))throw illegal(e,"id");if(y.test(e))return parseInt(e,10);if(v.test(e))return parseInt(e,16);if(b.test(e))return parseInt(e,8);throw illegal(e,"id")}function parsePackage(){if(void 0!==j)throw illegal("package");if(j=B(),!_.test(j))throw illegal(j,"name");V=V.define(j),L(";")}function parseImport(){var e,t=F();switch(t){case"weak":e=A||(A=[]),B();break;case"public":B();default:e=S||(S=[])}t=readString(),L(";"),e.push(t)}function parseSyntax(){if(L("="),x=readString(),!(D="proto3"===x)&&"proto2"!==x)throw illegal(x,"syntax");L(";")}function parseCommon(e,t){switch(t){case"option":return parseOption(e,t),L(";"),!0;case"message":return parseType(e,t),!0;case"enum":return parseEnum(e,t),!0;case"service":return function parseService(e,t){if(!w.test(t=B()))throw illegal(t,"service name");var r=new u(t);ifBlock(r,(function parseService_block(e){if(!parseCommon(r,e)){if("rpc"!==e)throw illegal(e);!function parseMethod(e,t){var r=I(),i=t;if(!w.test(t=B()))throw illegal(t,"name");var n,o,s,a,l=t;L("("),L("stream",!0)&&(o=!0);if(!_.test(t=B()))throw illegal(t);n=t,L(")"),L("returns"),L("("),L("stream",!0)&&(a=!0);if(!_.test(t=B()))throw illegal(t);s=t,L(")");var f=new p(l,i,n,s,o,a);f.comment=r,ifBlock(f,(function parseMethod_block(e){if("option"!==e)throw illegal(e);parseOption(f,e),L(";")})),e.add(f)}(r,e)}})),e.add(r)}(e,t),!0;case"extend":return function parseExtension(e,t){if(!_.test(t=B()))throw illegal(t,"reference");var r=t;ifBlock(null,(function parseExtension_block(t){switch(t){case"required":case"repeated":parseField(e,t,r);break;case"optional":parseField(e,D?"proto3_optional":"optional",r);break;default:if(!D||!_.test(t))throw illegal(t);R(t),parseField(e,"optional",r)}}))}(e,t),!0}return!1}function ifBlock(e,t,r){var i=T.line;if(e&&("string"!=typeof e.comment&&(e.comment=I()),e.filename=parse.filename),L("{",!0)){for(var n;"}"!==(n=B());)t(n);L(";",!0)}else r&&r(),L(";"),e&&("string"!=typeof e.comment||E)&&(e.comment=I(i)||e.comment)}function parseType(e,t){if(!w.test(t=B()))throw illegal(t,"type name");var r=new o(t);ifBlock(r,(function parseType_block(e){if(!parseCommon(r,e))switch(e){case"map":!function parseMapField(e){L("<");var t=B();if(void 0===c.mapKey[t])throw illegal(t,"type");L(",");var r=B();if(!_.test(r))throw illegal(r,"type");L(">");var i=B();if(!w.test(i))throw illegal(i,"name");L("=");var n=new a(P(i),parseId(B()),t,r);ifBlock(n,(function parseMapField_block(e){if("option"!==e)throw illegal(e);parseOption(n,e),L(";")}),(function parseMapField_line(){parseInlineOptions(n)})),e.add(n)}(r);break;case"required":case"repeated":parseField(r,e);break;case"optional":parseField(r,D?"proto3_optional":"optional");break;case"oneof":!function parseOneOf(e,t){if(!w.test(t=B()))throw illegal(t,"name");var r=new l(P(t));ifBlock(r,(function parseOneOf_block(e){"option"===e?(parseOption(r,e),L(";")):(R(e),parseField(r,"optional"))})),e.add(r)}(r,e);break;case"extensions":readRanges(r.extensions||(r.extensions=[]));break;case"reserved":readRanges(r.reserved||(r.reserved=[]),!0);break;default:if(!D||!_.test(e))throw illegal(e);R(e),parseField(r,"optional")}})),e.add(r)}function parseField(e,t,r){var i=B();if("group"!==i){for(;i.endsWith(".")||F().startsWith(".");)i+=B();if(!_.test(i))throw illegal(i,"type");var n=B();if(!w.test(n))throw illegal(n,"name");n=P(n),L("=");var a=new s(n,parseId(B()),i,t,r);if(ifBlock(a,(function parseField_block(e){if("option"!==e)throw illegal(e);parseOption(a,e),L(";")}),(function parseField_line(){parseInlineOptions(a)})),"proto3_optional"===t){var f=new l("_"+n);a.setOption("proto3_optional",!0),f.add(a),e.add(f)}else e.add(a);D||!a.repeated||void 0===c.packed[i]&&void 0!==c.basic[i]||a.setOption("packed",!1,!0)}else(function parseGroup(e,t){var r=B();if(!w.test(r))throw illegal(r,"name");var i=d.lcFirst(r);r===i&&(r=d.ucFirst(r));L("=");var n=parseId(B()),a=new o(r);a.group=!0;var l=new s(i,n,r,t);l.filename=parse.filename,ifBlock(a,(function parseGroup_block(e){switch(e){case"option":parseOption(a,e),L(";");break;case"required":case"repeated":parseField(a,e);break;case"optional":parseField(a,D?"proto3_optional":"optional");break;case"message":parseType(a,e);break;case"enum":parseEnum(a,e);break;default:throw illegal(e)}})),e.add(a).add(l)})(e,t)}function parseEnum(e,t){if(!w.test(t=B()))throw illegal(t,"name");var r=new f(t);ifBlock(r,(function parseEnum_block(e){switch(e){case"option":parseOption(r,e),L(";");break;case"reserved":readRanges(r.reserved||(r.reserved=[]),!0);break;default:!function parseEnumValue(e,t){if(!w.test(t))throw illegal(t,"name");L("=");var r=parseId(B(),!0),i={options:void 0,setOption:function(e,t){void 0===this.options&&(this.options={}),this.options[e]=t}};ifBlock(i,(function parseEnumValue_block(e){if("option"!==e)throw illegal(e);parseOption(i,e),L(";")}),(function parseEnumValue_line(){parseInlineOptions(i)})),e.add(t,r,i.comment,i.options)}(r,e)}})),e.add(r)}function parseOption(e,t){var r=L("(",!0);if(!_.test(t=B()))throw illegal(t,"name");var i,n=t,o=n;r&&(L(")"),o=n="("+n+")",t=F(),k.test(t)&&(i=t.slice(1),n+=t,B())),L("="),function setParsedOption(e,t,r,i){e.setParsedOption&&e.setParsedOption(t,r,i)}(e,o,parseOptionValue(e,n),i)}function parseOptionValue(e,t){if(L("{",!0)){for(var r={};!L("}",!0);){if(!w.test(N=B()))throw illegal(N,"name");if(null===N)throw illegal(N,"end of input");var i,n=N;if(L(":",!0),"{"===F())i=parseOptionValue(e,t+"."+N);else if("["===F()){var o;if(i=[],L("[",!0)){do{o=readValue(!0),i.push(o)}while(L(",",!0));L("]"),void 0!==o&&setOption(e,t+"."+N,o)}}else i=readValue(!0),setOption(e,t+"."+N,i);var s=r[n];s&&(i=[].concat(s).concat(i)),r[n]=i,L(",",!0),L(";",!0)}return r}var a=readValue(!0);return setOption(e,t,a),a}function setOption(e,t,r){e.setOption&&e.setOption(t,r)}function parseInlineOptions(e){if(L("[",!0)){do{parseOption(e,"option")}while(L(",",!0));L("]")}return e}for(;null!==(N=B());)switch(N){case"package":if(!C)throw illegal(N);parsePackage();break;case"import":if(!C)throw illegal(N);parseImport();break;case"syntax":if(!C)throw illegal(N);parseSyntax();break;case"option":parseOption(V,N),L(";");break;default:if(parseCommon(V,N)){C=!1;continue}throw illegal(N)}return parse.filename=null,{package:j,imports:S,weakImports:A,syntax:x,root:t}}},6237:(e,t,r)=>{e.exports=Reader;var i,n=r(3610),o=n.LongBits,s=n.utf8;function indexOutOfRange(e,t){return RangeError("index out of range: "+e.pos+" + "+(t||1)+" > "+e.len)}function Reader(e){this.buf=e,this.pos=0,this.len=e.length}var a="undefined"!=typeof Uint8Array?function create_typed_array(e){if(e instanceof Uint8Array||Array.isArray(e))return new Reader(e);throw Error("illegal buffer")}:function create_array(e){if(Array.isArray(e))return new Reader(e);throw Error("illegal buffer")},l=function create(){return n.Buffer?function create_buffer_setup(e){return(Reader.create=function create_buffer(e){return n.Buffer.isBuffer(e)?new i(e):a(e)})(e)}:a};function readLongVarint(){var e=new o(0,0),t=0;if(!(this.len-this.pos>4)){for(;t<3;++t){if(this.pos>=this.len)throw indexOutOfRange(this);if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e}return e.lo=(e.lo|(127&this.buf[this.pos++])<<7*t)>>>0,e}for(;t<4;++t)if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e;if(e.lo=(e.lo|(127&this.buf[this.pos])<<28)>>>0,e.hi=(e.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return e;if(t=0,this.len-this.pos>4){for(;t<5;++t)if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}else for(;t<5;++t){if(this.pos>=this.len)throw indexOutOfRange(this);if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}throw Error("invalid varint encoding")}function readFixed32_end(e,t){return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0}function readFixed64(){if(this.pos+8>this.len)throw indexOutOfRange(this,8);return new o(readFixed32_end(this.buf,this.pos+=4),readFixed32_end(this.buf,this.pos+=4))}Reader.create=l(),Reader.prototype._slice=n.Array.prototype.subarray||n.Array.prototype.slice,Reader.prototype.uint32=function read_uint32_setup(){var e=4294967295;return function read_uint32(){if(e=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return e;if(e=(e|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return e;if((this.pos+=5)>this.len)throw this.pos=this.len,indexOutOfRange(this,10);return e}}(),Reader.prototype.int32=function read_int32(){return 0|this.uint32()},Reader.prototype.sint32=function read_sint32(){var e=this.uint32();return e>>>1^-(1&e)},Reader.prototype.bool=function read_bool(){return 0!==this.uint32()},Reader.prototype.fixed32=function read_fixed32(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)},Reader.prototype.sfixed32=function read_sfixed32(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return 0|readFixed32_end(this.buf,this.pos+=4)},Reader.prototype.float=function read_float(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);var e=n.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e},Reader.prototype.double=function read_double(){if(this.pos+8>this.len)throw indexOutOfRange(this,4);var e=n.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e},Reader.prototype.bytes=function read_bytes(){var e=this.uint32(),t=this.pos,r=this.pos+e;if(r>this.len)throw indexOutOfRange(this,e);if(this.pos+=e,Array.isArray(this.buf))return this.buf.slice(t,r);if(t===r){var i=n.Buffer;return i?i.alloc(0):new this.buf.constructor(0)}return this._slice.call(this.buf,t,r)},Reader.prototype.string=function read_string(){var e=this.bytes();return s.read(e,0,e.length)},Reader.prototype.skip=function skip(e){if("number"==typeof e){if(this.pos+e>this.len)throw indexOutOfRange(this,e);this.pos+=e}else do{if(this.pos>=this.len)throw indexOutOfRange(this)}while(128&this.buf[this.pos++]);return this},Reader.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(e=7&this.uint32());)this.skipType(e);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+e+" at offset "+this.pos)}return this},Reader._configure=function(e){i=e,Reader.create=l(),i._configure();var t=n.Long?"toLong":"toNumber";n.merge(Reader.prototype,{int64:function read_int64(){return readLongVarint.call(this)[t](!1)},uint64:function read_uint64(){return readLongVarint.call(this)[t](!0)},sint64:function read_sint64(){return readLongVarint.call(this).zzDecode()[t](!1)},fixed64:function read_fixed64(){return readFixed64.call(this)[t](!0)},sfixed64:function read_sfixed64(){return readFixed64.call(this)[t](!1)}})}},3158:(e,t,r)=>{e.exports=BufferReader;var i=r(6237);(BufferReader.prototype=Object.create(i.prototype)).constructor=BufferReader;var n=r(3610);function BufferReader(e){i.call(this,e)}BufferReader._configure=function(){n.Buffer&&(BufferReader.prototype._slice=n.Buffer.prototype.slice)},BufferReader.prototype.string=function read_string_buffer(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+e,this.len))},BufferReader._configure()},5330:(e,t,r)=>{e.exports=Root;var i=r(8923);((Root.prototype=Object.create(i.prototype)).constructor=Root).className="Root";var n,o,s,a=r(1344),l=r(5643),f=r(1457),u=r(3262);function Root(e){i.call(this,"",e),this.deferred=[],this.files=[]}function SYNC(){}Root.fromJSON=function fromJSON(e,t){return t||(t=new Root),e.options&&t.setOptions(e.options),t.addJSON(e.nested)},Root.prototype.resolvePath=u.path.resolve,Root.prototype.fetch=u.fetch,Root.prototype.load=function load(e,t,r){"function"==typeof t&&(r=t,t=void 0);var i=this;if(!r)return u.asPromise(load,i,e,t);var n=r===SYNC;function finish(e,t){if(r){var i=r;if(r=null,n)throw e;i(e,t)}}function getBundledFileName(e){var t=e.lastIndexOf("google/protobuf/");if(t>-1){var r=e.substring(t);if(r in s)return r}return null}function process(e,r){try{if(u.isString(r)&&"{"===r.charAt(0)&&(r=JSON.parse(r)),u.isString(r)){o.filename=e;var s,l=o(r,i,t),f=0;if(l.imports)for(;f<l.imports.length;++f)(s=getBundledFileName(l.imports[f])||i.resolvePath(e,l.imports[f]))&&fetch(s);if(l.weakImports)for(f=0;f<l.weakImports.length;++f)(s=getBundledFileName(l.weakImports[f])||i.resolvePath(e,l.weakImports[f]))&&fetch(s,!0)}else i.setOptions(r.options).addJSON(r.nested)}catch(e){finish(e)}n||a||finish(null,i)}function fetch(e,t){if(e=getBundledFileName(e)||e,!(i.files.indexOf(e)>-1))if(i.files.push(e),e in s)n?process(e,s[e]):(++a,setTimeout((function(){--a,process(e,s[e])})));else if(n){var o;try{o=u.fs.readFileSync(e).toString("utf8")}catch(e){return void(t||finish(e))}process(e,o)}else++a,i.fetch(e,(function(n,o){--a,r&&(n?t?a||finish(null,i):finish(n):process(e,o))}))}var a=0;u.isString(e)&&(e=[e]);for(var l,f=0;f<e.length;++f)(l=i.resolvePath("",e[f]))&&fetch(l);if(n)return i;a||finish(null,i)},Root.prototype.loadSync=function loadSync(e,t){if(!u.isNode)throw Error("not supported");return this.load(e,t,SYNC)},Root.prototype.resolveAll=function resolveAll(){if(this.deferred.length)throw Error("unresolvable extensions: "+this.deferred.map((function(e){return"'extend "+e.extend+"' in "+e.parent.fullName})).join(", "));return i.prototype.resolveAll.call(this)};var p=/^[A-Z]/;function tryHandleExtension(e,t){var r=t.parent.lookup(t.extend);if(r){var i=new a(t.fullName,t.id,t.type,t.rule,void 0,t.options);return r.get(i.name)||(i.declaringField=t,t.extensionField=i,r.add(i)),!0}return!1}Root.prototype._handleAdd=function _handleAdd(e){if(e instanceof a)void 0===e.extend||e.extensionField||tryHandleExtension(0,e)||this.deferred.push(e);else if(e instanceof l)p.test(e.name)&&(e.parent[e.name]=e.values);else if(!(e instanceof f)){if(e instanceof n)for(var t=0;t<this.deferred.length;)tryHandleExtension(0,this.deferred[t])?this.deferred.splice(t,1):++t;for(var r=0;r<e.nestedArray.length;++r)this._handleAdd(e._nestedArray[r]);p.test(e.name)&&(e.parent[e.name]=e)}},Root.prototype._handleRemove=function _handleRemove(e){if(e instanceof a){if(void 0!==e.extend)if(e.extensionField)e.extensionField.parent.remove(e.extensionField),e.extensionField=null;else{var t=this.deferred.indexOf(e);t>-1&&this.deferred.splice(t,1)}}else if(e instanceof l)p.test(e.name)&&delete e.parent[e.name];else if(e instanceof i){for(var r=0;r<e.nestedArray.length;++r)this._handleRemove(e._nestedArray[r]);p.test(e.name)&&delete e.parent[e.name]}},Root._configure=function(e,t,r){n=e,o=t,s=r}},4529:e=>{e.exports={}},5047:(e,t,r)=>{t.Service=r(7595)},7595:(e,t,r)=>{e.exports=Service;var i=r(3610);function Service(e,t,r){if("function"!=typeof e)throw TypeError("rpcImpl must be a function");i.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=Boolean(t),this.responseDelimited=Boolean(r)}(Service.prototype=Object.create(i.EventEmitter.prototype)).constructor=Service,Service.prototype.rpcCall=function rpcCall(e,t,r,n,o){if(!n)throw TypeError("request must be specified");var s=this;if(!o)return i.asPromise(rpcCall,s,e,t,r,n);if(s.rpcImpl)try{return s.rpcImpl(e,t[s.requestDelimited?"encodeDelimited":"encode"](n).finish(),(function rpcCallback(t,i){if(t)return s.emit("error",t,e),o(t);if(null!==i){if(!(i instanceof r))try{i=r[s.responseDelimited?"decodeDelimited":"decode"](i)}catch(t){return s.emit("error",t,e),o(t)}return s.emit("data",i,e),o(null,i)}s.end(!0)}))}catch(t){return s.emit("error",t,e),void setTimeout((function(){o(t)}),0)}else setTimeout((function(){o(Error("already ended"))}),0)},Service.prototype.end=function end(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},9687:(e,t,r)=>{e.exports=Service;var i=r(8923);((Service.prototype=Object.create(i.prototype)).constructor=Service).className="Service";var n=r(8811),o=r(3262),s=r(5047);function Service(e,t){i.call(this,e,t),this.methods={},this._methodsArray=null}function clearCache(e){return e._methodsArray=null,e}Service.fromJSON=function fromJSON(e,t){var r=new Service(e,t.options);if(t.methods)for(var i=Object.keys(t.methods),o=0;o<i.length;++o)r.add(n.fromJSON(i[o],t.methods[i[o]]));return t.nested&&r.addJSON(t.nested),r.comment=t.comment,r},Service.prototype.toJSON=function toJSON(e){var t=i.prototype.toJSON.call(this,e),r=!!e&&Boolean(e.keepComments);return o.toObject(["options",t&&t.options||void 0,"methods",i.arrayToJSON(this.methodsArray,e)||{},"nested",t&&t.nested||void 0,"comment",r?this.comment:void 0])},Object.defineProperty(Service.prototype,"methodsArray",{get:function(){return this._methodsArray||(this._methodsArray=o.toArray(this.methods))}}),Service.prototype.get=function get(e){return this.methods[e]||i.prototype.get.call(this,e)},Service.prototype.resolveAll=function resolveAll(){for(var e=this.methodsArray,t=0;t<e.length;++t)e[t].resolve();return i.prototype.resolve.call(this)},Service.prototype.add=function add(e){if(this.get(e.name))throw Error("duplicate name '"+e.name+"' in "+this);return e instanceof n?(this.methods[e.name]=e,e.parent=this,clearCache(this)):i.prototype.add.call(this,e)},Service.prototype.remove=function remove(e){if(e instanceof n){if(this.methods[e.name]!==e)throw Error(e+" is not a member of "+this);return delete this.methods[e.name],e.parent=null,clearCache(this)}return i.prototype.remove.call(this,e)},Service.prototype.create=function create(e,t,r){for(var i,n=new s.Service(e,t,r),a=0;a<this.methodsArray.length;++a){var l=o.lcFirst((i=this._methodsArray[a]).resolve().name).replace(/[^$\w_]/g,"");n[l]=o.codegen(["r","c"],o.isReserved(l)?l+"_":l)("return this.rpcCall(m,q,s,r,c)")({m:i,q:i.resolvedRequestType.ctor,s:i.resolvedResponseType.ctor})}return n}},527:e=>{e.exports=tokenize;var t=/[\s{}=;:[\],'"()<>]/g,r=/(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,i=/(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g,n=/^ *[*/]+ */,o=/^\s*\*?\/*/,s=/\n/g,a=/\s/,l=/\\(.?)/g,f={0:"\0",r:"\r",n:"\n",t:"\t"};function unescape(e){return e.replace(l,(function(e,t){switch(t){case"\\":case"":return t;default:return f[t]||""}}))}function tokenize(e,l){e=e.toString();var f=0,u=e.length,p=1,c=0,d={},h=[],y=null;function illegal(e){return Error("illegal "+e+" (line "+p+")")}function charAt(t){return e.charAt(t)}function setComment(t,r,i){var a,f={type:e.charAt(t++),lineEmpty:!1,leading:i},u=t-(l?2:3);do{if(--u<0||"\n"===(a=e.charAt(u))){f.lineEmpty=!0;break}}while(" "===a||"\t"===a);for(var h=e.substring(t,r).split(s),y=0;y<h.length;++y)h[y]=h[y].replace(l?o:n,"").trim();f.text=h.join("\n").trim(),d[p]=f,c=p}function isDoubleSlashCommentLine(t){var r=findEndOfLine(t),i=e.substring(t,r);return/^\s*\/\//.test(i)}function findEndOfLine(e){for(var t=e;t<u&&"\n"!==charAt(t);)t++;return t}function next(){if(h.length>0)return h.shift();if(y)return function readString(){var t="'"===y?i:r;t.lastIndex=f-1;var n=t.exec(e);if(!n)throw illegal("string");return f=t.lastIndex,push(y),y=null,unescape(n[1])}();var n,o,s,c,d,m=0===f;do{if(f===u)return null;for(n=!1;a.test(s=charAt(f));)if("\n"===s&&(m=!0,++p),++f===u)return null;if("/"===charAt(f)){if(++f===u)throw illegal("comment");if("/"===charAt(f))if(l){if(c=f,d=!1,isDoubleSlashCommentLine(f-1)){d=!0;do{if((f=findEndOfLine(f))===u)break;if(f++,!m)break}while(isDoubleSlashCommentLine(f))}else f=Math.min(u,findEndOfLine(f)+1);d&&(setComment(c,f,m),m=!0),p++,n=!0}else{for(d="/"===charAt(c=f+1);"\n"!==charAt(++f);)if(f===u)return null;++f,d&&(setComment(c,f-1,m),m=!0),++p,n=!0}else{if("*"!==(s=charAt(f)))return"/";c=f+1,d=l||"*"===charAt(c);do{if("\n"===s&&++p,++f===u)throw illegal("comment");o=s,s=charAt(f)}while("*"!==o||"/"!==s);++f,d&&(setComment(c,f-2,m),m=!0),n=!0}}}while(n);var v=f;if(t.lastIndex=0,!t.test(charAt(v++)))for(;v<u&&!t.test(charAt(v));)++v;var g=e.substring(f,f=v);return'"'!==g&&"'"!==g||(y=g),g}function push(e){h.push(e)}function peek(){if(!h.length){var e=next();if(null===e)return null;push(e)}return h[0]}return Object.defineProperty({next,peek,push,skip:function skip(e,t){var r=peek();if(r===e)return next(),!0;if(!t)throw illegal("token '"+r+"', '"+e+"' expected");return!1},cmnt:function cmnt(e){var t,r=null;return void 0===e?(t=d[p-1],delete d[p-1],t&&(l||"*"===t.type||t.lineEmpty)&&(r=t.leading?t.text:null)):(c<e&&peek(),t=d[e],delete d[e],!t||t.lineEmpty||!l&&"/"!==t.type||(r=t.leading?null:t.text)),r}},"line",{get:function(){return p}})}tokenize.unescape=unescape},7882:(e,t,r)=>{e.exports=Type;var i=r(8923);((Type.prototype=Object.create(i.prototype)).constructor=Type).className="Type";var n=r(5643),o=r(1457),s=r(1344),a=r(8252),l=r(9687),f=r(2551),u=r(6237),p=r(3449),c=r(3262),d=r(1080),h=r(7728),y=r(420),m=r(744),v=r(6434);function Type(e,t){i.call(this,e,t),this.fields={},this.oneofs=void 0,this.extensions=void 0,this.reserved=void 0,this.group=void 0,this._fieldsById=null,this._fieldsArray=null,this._oneofsArray=null,this._ctor=null}function clearCache(e){return e._fieldsById=e._fieldsArray=e._oneofsArray=null,delete e.encode,delete e.decode,delete e.verify,e}Object.defineProperties(Type.prototype,{fieldsById:{get:function(){if(this._fieldsById)return this._fieldsById;this._fieldsById={};for(var e=Object.keys(this.fields),t=0;t<e.length;++t){var r=this.fields[e[t]],i=r.id;if(this._fieldsById[i])throw Error("duplicate id "+i+" in "+this);this._fieldsById[i]=r}return this._fieldsById}},fieldsArray:{get:function(){return this._fieldsArray||(this._fieldsArray=c.toArray(this.fields))}},oneofsArray:{get:function(){return this._oneofsArray||(this._oneofsArray=c.toArray(this.oneofs))}},ctor:{get:function(){return this._ctor||(this.ctor=Type.generateConstructor(this)())},set:function(e){var t=e.prototype;t instanceof f||((e.prototype=new f).constructor=e,c.merge(e.prototype,t)),e.$type=e.prototype.$type=this,c.merge(e,f,!0),this._ctor=e;for(var r=0;r<this.fieldsArray.length;++r)this._fieldsArray[r].resolve();var i={};for(r=0;r<this.oneofsArray.length;++r)i[this._oneofsArray[r].resolve().name]={get:c.oneOfGetter(this._oneofsArray[r].oneof),set:c.oneOfSetter(this._oneofsArray[r].oneof)};r&&Object.defineProperties(e.prototype,i)}}}),Type.generateConstructor=function generateConstructor(e){for(var t,r=c.codegen(["p"],e.name),i=0;i<e.fieldsArray.length;++i)(t=e._fieldsArray[i]).map?r("this%s={}",c.safeProp(t.name)):t.repeated&&r("this%s=[]",c.safeProp(t.name));return r("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]")},Type.fromJSON=function fromJSON(e,t){var r=new Type(e,t.options);r.extensions=t.extensions,r.reserved=t.reserved;for(var f=Object.keys(t.fields),u=0;u<f.length;++u)r.add((void 0!==t.fields[f[u]].keyType?a.fromJSON:s.fromJSON)(f[u],t.fields[f[u]]));if(t.oneofs)for(f=Object.keys(t.oneofs),u=0;u<f.length;++u)r.add(o.fromJSON(f[u],t.oneofs[f[u]]));if(t.nested)for(f=Object.keys(t.nested),u=0;u<f.length;++u){var p=t.nested[f[u]];r.add((void 0!==p.id?s.fromJSON:void 0!==p.fields?Type.fromJSON:void 0!==p.values?n.fromJSON:void 0!==p.methods?l.fromJSON:i.fromJSON)(f[u],p))}return t.extensions&&t.extensions.length&&(r.extensions=t.extensions),t.reserved&&t.reserved.length&&(r.reserved=t.reserved),t.group&&(r.group=!0),t.comment&&(r.comment=t.comment),r},Type.prototype.toJSON=function toJSON(e){var t=i.prototype.toJSON.call(this,e),r=!!e&&Boolean(e.keepComments);return c.toObject(["options",t&&t.options||void 0,"oneofs",i.arrayToJSON(this.oneofsArray,e),"fields",i.arrayToJSON(this.fieldsArray.filter((function(e){return!e.declaringField})),e)||{},"extensions",this.extensions&&this.extensions.length?this.extensions:void 0,"reserved",this.reserved&&this.reserved.length?this.reserved:void 0,"group",this.group||void 0,"nested",t&&t.nested||void 0,"comment",r?this.comment:void 0])},Type.prototype.resolveAll=function resolveAll(){for(var e=this.fieldsArray,t=0;t<e.length;)e[t++].resolve();var r=this.oneofsArray;for(t=0;t<r.length;)r[t++].resolve();return i.prototype.resolveAll.call(this)},Type.prototype.get=function get(e){return this.fields[e]||this.oneofs&&this.oneofs[e]||this.nested&&this.nested[e]||null},Type.prototype.add=function add(e){if(this.get(e.name))throw Error("duplicate name '"+e.name+"' in "+this);if(e instanceof s&&void 0===e.extend){if(this._fieldsById?this._fieldsById[e.id]:this.fieldsById[e.id])throw Error("duplicate id "+e.id+" in "+this);if(this.isReservedId(e.id))throw Error("id "+e.id+" is reserved in "+this);if(this.isReservedName(e.name))throw Error("name '"+e.name+"' is reserved in "+this);return e.parent&&e.parent.remove(e),this.fields[e.name]=e,e.message=this,e.onAdd(this),clearCache(this)}return e instanceof o?(this.oneofs||(this.oneofs={}),this.oneofs[e.name]=e,e.onAdd(this),clearCache(this)):i.prototype.add.call(this,e)},Type.prototype.remove=function remove(e){if(e instanceof s&&void 0===e.extend){if(!this.fields||this.fields[e.name]!==e)throw Error(e+" is not a member of "+this);return delete this.fields[e.name],e.parent=null,e.onRemove(this),clearCache(this)}if(e instanceof o){if(!this.oneofs||this.oneofs[e.name]!==e)throw Error(e+" is not a member of "+this);return delete this.oneofs[e.name],e.parent=null,e.onRemove(this),clearCache(this)}return i.prototype.remove.call(this,e)},Type.prototype.isReservedId=function isReservedId(e){return i.isReservedId(this.reserved,e)},Type.prototype.isReservedName=function isReservedName(e){return i.isReservedName(this.reserved,e)},Type.prototype.create=function create(e){return new this.ctor(e)},Type.prototype.setup=function setup(){for(var e=this.fullName,t=[],r=0;r<this.fieldsArray.length;++r)t.push(this._fieldsArray[r].resolve().resolvedType);this.encode=d(this)({Writer:p,types:t,util:c}),this.decode=h(this)({Reader:u,types:t,util:c}),this.verify=y(this)({types:t,util:c}),this.fromObject=m.fromObject(this)({types:t,util:c}),this.toObject=m.toObject(this)({types:t,util:c});var i=v[e];if(i){var n=Object.create(this);n.fromObject=this.fromObject,this.fromObject=i.fromObject.bind(n),n.toObject=this.toObject,this.toObject=i.toObject.bind(n)}return this},Type.prototype.encode=function encode_setup(e,t){return this.setup().encode(e,t)},Type.prototype.encodeDelimited=function encodeDelimited(e,t){return this.encode(e,t&&t.len?t.fork():t).ldelim()},Type.prototype.decode=function decode_setup(e,t){return this.setup().decode(e,t)},Type.prototype.decodeDelimited=function decodeDelimited(e){return e instanceof u||(e=u.create(e)),this.decode(e,e.uint32())},Type.prototype.verify=function verify_setup(e){return this.setup().verify(e)},Type.prototype.fromObject=function fromObject(e){return this.setup().fromObject(e)},Type.prototype.toObject=function toObject(e,t){return this.setup().toObject(e,t)},Type.d=function decorateType(e){return function typeDecorator(t){c.decorateType(t,e)}}},361:(e,t,r)=>{var i=t,n=r(3262),o=["double","float","int32","uint32","sint32","fixed32","sfixed32","int64","uint64","sint64","fixed64","sfixed64","bool","string","bytes"];function bake(e,t){var r=0,i={};for(t|=0;r<e.length;)i[o[r+t]]=e[r++];return i}i.basic=bake([1,5,0,0,0,5,5,0,0,0,1,1,0,2,2]),i.defaults=bake([0,0,0,0,0,0,0,0,0,0,0,0,!1,"",n.emptyArray,null]),i.long=bake([0,0,0,1,1],7),i.mapKey=bake([0,0,0,5,5,0,0,0,1,1,0,2],2),i.packed=bake([1,5,0,0,0,5,5,0,0,0,1,1,0])},3262:(e,t,r)=>{var i,n,o=e.exports=r(3610),s=r(4529);o.codegen=r(8561),o.fetch=r(5212),o.path=r(9207),o.fs=o.inquire("fs"),o.toArray=function toArray(e){if(e){for(var t=Object.keys(e),r=new Array(t.length),i=0;i<t.length;)r[i]=e[t[i++]];return r}return[]},o.toObject=function toObject(e){for(var t={},r=0;r<e.length;){var i=e[r++],n=e[r++];void 0!==n&&(t[i]=n)}return t};var a=/\\/g,l=/"/g;o.isReserved=function isReserved(e){return/^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(e)},o.safeProp=function safeProp(e){return!/^[$\w_]+$/.test(e)||o.isReserved(e)?'["'+e.replace(a,"\\\\").replace(l,'\\"')+'"]':"."+e},o.ucFirst=function ucFirst(e){return e.charAt(0).toUpperCase()+e.substring(1)};var f=/_([a-z])/g;o.camelCase=function camelCase(e){return e.substring(0,1)+e.substring(1).replace(f,(function(e,t){return t.toUpperCase()}))},o.compareFieldsById=function compareFieldsById(e,t){return e.id-t.id},o.decorateType=function decorateType(e,t){if(e.$type)return t&&e.$type.name!==t&&(o.decorateRoot.remove(e.$type),e.$type.name=t,o.decorateRoot.add(e.$type)),e.$type;i||(i=r(7882));var n=new i(t||e.name);return o.decorateRoot.add(n),n.ctor=e,Object.defineProperty(e,"$type",{value:n,enumerable:!1}),Object.defineProperty(e.prototype,"$type",{value:n,enumerable:!1}),n};var u=0;o.decorateEnum=function decorateEnum(e){if(e.$type)return e.$type;n||(n=r(5643));var t=new n("Enum"+u++,e);return o.decorateRoot.add(t),Object.defineProperty(e,"$type",{value:t,enumerable:!1}),t},o.setProperty=function setProperty(e,t,r){if("object"!=typeof e)throw TypeError("dst must be an object");if(!t)throw TypeError("path must be specified");return function setProp(e,t,r){var i=t.shift();if("__proto__"===i||"prototype"===i)return e;if(t.length>0)e[i]=setProp(e[i]||{},t,r);else{var n=e[i];n&&(r=[].concat(n).concat(r)),e[i]=r}return e}(e,t=t.split("."),r)},Object.defineProperty(o,"decorateRoot",{get:function(){return s.decorated||(s.decorated=new(r(5330)))}})},2239:(e,t,r)=>{e.exports=LongBits;var i=r(3610);function LongBits(e,t){this.lo=e>>>0,this.hi=t>>>0}var n=LongBits.zero=new LongBits(0,0);n.toNumber=function(){return 0},n.zzEncode=n.zzDecode=function(){return this},n.length=function(){return 1};var o=LongBits.zeroHash="\0\0\0\0\0\0\0\0";LongBits.fromNumber=function fromNumber(e){if(0===e)return n;var t=e<0;t&&(e=-e);var r=e>>>0,i=(e-r)/4294967296>>>0;return t&&(i=~i>>>0,r=~r>>>0,++r>4294967295&&(r=0,++i>4294967295&&(i=0))),new LongBits(r,i)},LongBits.from=function from(e){if("number"==typeof e)return LongBits.fromNumber(e);if(i.isString(e)){if(!i.Long)return LongBits.fromNumber(parseInt(e,10));e=i.Long.fromString(e)}return e.low||e.high?new LongBits(e.low>>>0,e.high>>>0):n},LongBits.prototype.toNumber=function toNumber(e){if(!e&&this.hi>>>31){var t=1+~this.lo>>>0,r=~this.hi>>>0;return t||(r=r+1>>>0),-(t+4294967296*r)}return this.lo+4294967296*this.hi},LongBits.prototype.toLong=function toLong(e){return i.Long?new i.Long(0|this.lo,0|this.hi,Boolean(e)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(e)}};var s=String.prototype.charCodeAt;LongBits.fromHash=function fromHash(e){return e===o?n:new LongBits((s.call(e,0)|s.call(e,1)<<8|s.call(e,2)<<16|s.call(e,3)<<24)>>>0,(s.call(e,4)|s.call(e,5)<<8|s.call(e,6)<<16|s.call(e,7)<<24)>>>0)},LongBits.prototype.toHash=function toHash(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},LongBits.prototype.zzEncode=function zzEncode(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this},LongBits.prototype.zzDecode=function zzDecode(){var e=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this},LongBits.prototype.length=function length(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,r=this.hi>>>24;return 0===r?0===t?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:r<128?9:10}},3610:function(e,t,r){var i=t;function merge(e,t,r){for(var i=Object.keys(t),n=0;n<i.length;++n)void 0!==e[i[n]]&&r||(e[i[n]]=t[i[n]]);return e}function newError(e){function CustomError(e,t){if(!(this instanceof CustomError))return new CustomError(e,t);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,CustomError):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),t&&merge(this,t)}return CustomError.prototype=Object.create(Error.prototype,{constructor:{value:CustomError,writable:!0,enumerable:!1,configurable:!0},name:{get:function get(){return e},set:void 0,enumerable:!1,configurable:!0},toString:{value:function value(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),CustomError}i.asPromise=r(8045),i.base64=r(8839),i.EventEmitter=r(4358),i.float=r(9410),i.inquire=r(4153),i.utf8=r(1447),i.pool=r(9390),i.LongBits=r(2239),i.isNode=Boolean(void 0!==r.g&&r.g&&r.g.process&&r.g.process.versions&&r.g.process.versions.node),i.global=i.isNode&&r.g||"undefined"!=typeof window&&window||"undefined"!=typeof self&&self||this,i.emptyArray=Object.freeze?Object.freeze([]):[],i.emptyObject=Object.freeze?Object.freeze({}):{},i.isInteger=Number.isInteger||function isInteger(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},i.isString=function isString(e){return"string"==typeof e||e instanceof String},i.isObject=function isObject(e){return e&&"object"==typeof e},i.isset=i.isSet=function isSet(e,t){var r=e[t];return!(null==r||!e.hasOwnProperty(t))&&("object"!=typeof r||(Array.isArray(r)?r.length:Object.keys(r).length)>0)},i.Buffer=function(){try{var e=i.inquire("buffer").Buffer;return e.prototype.utf8Write?e:null}catch(e){return null}}(),i._Buffer_from=null,i._Buffer_allocUnsafe=null,i.newBuffer=function newBuffer(e){return"number"==typeof e?i.Buffer?i._Buffer_allocUnsafe(e):new i.Array(e):i.Buffer?i._Buffer_from(e):"undefined"==typeof Uint8Array?e:new Uint8Array(e)},i.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,i.Long=i.global.dcodeIO&&i.global.dcodeIO.Long||i.global.Long||i.inquire("long"),i.key2Re=/^true|false|0|1$/,i.key32Re=/^-?(?:0|[1-9][0-9]*)$/,i.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,i.longToHash=function longToHash(e){return e?i.LongBits.from(e).toHash():i.LongBits.zeroHash},i.longFromHash=function longFromHash(e,t){var r=i.LongBits.fromHash(e);return i.Long?i.Long.fromBits(r.lo,r.hi,t):r.toNumber(Boolean(t))},i.merge=merge,i.lcFirst=function lcFirst(e){return e.charAt(0).toLowerCase()+e.substring(1)},i.newError=newError,i.ProtocolError=newError("ProtocolError"),i.oneOfGetter=function getOneOf(e){for(var t={},r=0;r<e.length;++r)t[e[r]]=1;return function(){for(var e=Object.keys(this),r=e.length-1;r>-1;--r)if(1===t[e[r]]&&void 0!==this[e[r]]&&null!==this[e[r]])return e[r]}},i.oneOfSetter=function setOneOf(e){return function(t){for(var r=0;r<e.length;++r)e[r]!==t&&delete this[e[r]]}},i.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},i._configure=function(){var e=i.Buffer;e?(i._Buffer_from=e.from!==Uint8Array.from&&e.from||function Buffer_from(t,r){return new e(t,r)},i._Buffer_allocUnsafe=e.allocUnsafe||function Buffer_allocUnsafe(t){return new e(t)}):i._Buffer_from=i._Buffer_allocUnsafe=null}},420:(e,t,r)=>{e.exports=function verifier(e){var t=n.codegen(["m"],e.name+"$verify")('if(typeof m!=="object"||m===null)')("return%j","object expected"),r=e.oneofsArray,i={};r.length&&t("var p={}");for(var o=0;o<e.fieldsArray.length;++o){var s=e._fieldsArray[o].resolve(),a="m"+n.safeProp(s.name);if(s.optional&&t("if(%s!=null&&m.hasOwnProperty(%j)){",a,s.name),s.map)t("if(!util.isObject(%s))",a)("return%j",invalid(s,"object"))("var k=Object.keys(%s)",a)("for(var i=0;i<k.length;++i){"),genVerifyKey(t,s,"k[i]"),genVerifyValue(t,s,o,a+"[k[i]]")("}");else if(s.repeated)t("if(!Array.isArray(%s))",a)("return%j",invalid(s,"array"))("for(var i=0;i<%s.length;++i){",a),genVerifyValue(t,s,o,a+"[i]")("}");else{if(s.partOf){var l=n.safeProp(s.partOf.name);1===i[s.partOf.name]&&t("if(p%s===1)",l)("return%j",s.partOf.name+": multiple values"),i[s.partOf.name]=1,t("p%s=1",l)}genVerifyValue(t,s,o,a)}s.optional&&t("}")}return t("return null")};var i=r(5643),n=r(3262);function invalid(e,t){return e.name+": "+t+(e.repeated&&"array"!==t?"[]":e.map&&"object"!==t?"{k:"+e.keyType+"}":"")+" expected"}function genVerifyValue(e,t,r,n){if(t.resolvedType)if(t.resolvedType instanceof i){e("switch(%s){",n)("default:")("return%j",invalid(t,"enum value"));for(var o=Object.keys(t.resolvedType.values),s=0;s<o.length;++s)e("case %i:",t.resolvedType.values[o[s]]);e("break")("}")}else e("{")("var e=types[%i].verify(%s);",r,n)("if(e)")("return%j+e",t.name+".")("}");else switch(t.type){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":e("if(!util.isInteger(%s))",n)("return%j",invalid(t,"integer"));break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":e("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))",n,n,n,n)("return%j",invalid(t,"integer|Long"));break;case"float":case"double":e('if(typeof %s!=="number")',n)("return%j",invalid(t,"number"));break;case"bool":e('if(typeof %s!=="boolean")',n)("return%j",invalid(t,"boolean"));break;case"string":e("if(!util.isString(%s))",n)("return%j",invalid(t,"string"));break;case"bytes":e('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))',n,n,n)("return%j",invalid(t,"buffer"))}return e}function genVerifyKey(e,t,r){switch(t.keyType){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":e("if(!util.key32Re.test(%s))",r)("return%j",invalid(t,"integer key"));break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":e("if(!util.key64Re.test(%s))",r)("return%j",invalid(t,"integer|Long key"));break;case"bool":e("if(!util.key2Re.test(%s))",r)("return%j",invalid(t,"boolean key"))}return e}},6434:(e,t,r)=>{var i=t,n=r(2551);i[".google.protobuf.Any"]={fromObject:function(e){if(e&&e["@type"]){var t=e["@type"].substring(e["@type"].lastIndexOf("/")+1),r=this.lookup(t);if(r){var i="."===e["@type"].charAt(0)?e["@type"].slice(1):e["@type"];return-1===i.indexOf("/")&&(i="/"+i),this.create({type_url:i,value:r.encode(r.fromObject(e)).finish()})}}return this.fromObject(e)},toObject:function(e,t){var r="",i="";if(t&&t.json&&e.type_url&&e.value){i=e.type_url.substring(e.type_url.lastIndexOf("/")+1),r=e.type_url.substring(0,e.type_url.lastIndexOf("/")+1);var o=this.lookup(i);o&&(e=o.decode(e.value))}if(!(e instanceof this.ctor)&&e instanceof n){var s=e.$type.toObject(e,t);return""===r&&(r="type.googleapis.com/"),i=r+("."===e.$type.fullName[0]?e.$type.fullName.slice(1):e.$type.fullName),s["@type"]=i,s}return this.toObject(e,t)}}},3449:(e,t,r)=>{e.exports=Writer;var i,n=r(3610),o=n.LongBits,s=n.base64,a=n.utf8;function Op(e,t,r){this.fn=e,this.len=t,this.next=void 0,this.val=r}function noop(){}function State(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states}function Writer(){this.len=0,this.head=new Op(noop,0,0),this.tail=this.head,this.states=null}var l=function create(){return n.Buffer?function create_buffer_setup(){return(Writer.create=function create_buffer(){return new i})()}:function create_array(){return new Writer}};function writeByte(e,t,r){t[r]=255&e}function VarintOp(e,t){this.len=e,this.next=void 0,this.val=t}function writeVarint64(e,t,r){for(;e.hi;)t[r++]=127&e.lo|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;e.lo>127;)t[r++]=127&e.lo|128,e.lo=e.lo>>>7;t[r++]=e.lo}function writeFixed32(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24}Writer.create=l(),Writer.alloc=function alloc(e){return new n.Array(e)},n.Array!==Array&&(Writer.alloc=n.pool(Writer.alloc,n.Array.prototype.subarray)),Writer.prototype._push=function push(e,t,r){return this.tail=this.tail.next=new Op(e,t,r),this.len+=t,this},VarintOp.prototype=Object.create(Op.prototype),VarintOp.prototype.fn=function writeVarint32(e,t,r){for(;e>127;)t[r++]=127&e|128,e>>>=7;t[r]=e},Writer.prototype.uint32=function write_uint32(e){return this.len+=(this.tail=this.tail.next=new VarintOp((e>>>=0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this},Writer.prototype.int32=function write_int32(e){return e<0?this._push(writeVarint64,10,o.fromNumber(e)):this.uint32(e)},Writer.prototype.sint32=function write_sint32(e){return this.uint32((e<<1^e>>31)>>>0)},Writer.prototype.uint64=function write_uint64(e){var t=o.from(e);return this._push(writeVarint64,t.length(),t)},Writer.prototype.int64=Writer.prototype.uint64,Writer.prototype.sint64=function write_sint64(e){var t=o.from(e).zzEncode();return this._push(writeVarint64,t.length(),t)},Writer.prototype.bool=function write_bool(e){return this._push(writeByte,1,e?1:0)},Writer.prototype.fixed32=function write_fixed32(e){return this._push(writeFixed32,4,e>>>0)},Writer.prototype.sfixed32=Writer.prototype.fixed32,Writer.prototype.fixed64=function write_fixed64(e){var t=o.from(e);return this._push(writeFixed32,4,t.lo)._push(writeFixed32,4,t.hi)},Writer.prototype.sfixed64=Writer.prototype.fixed64,Writer.prototype.float=function write_float(e){return this._push(n.float.writeFloatLE,4,e)},Writer.prototype.double=function write_double(e){return this._push(n.float.writeDoubleLE,8,e)};var f=n.Array.prototype.set?function writeBytes_set(e,t,r){t.set(e,r)}:function writeBytes_for(e,t,r){for(var i=0;i<e.length;++i)t[r+i]=e[i]};Writer.prototype.bytes=function write_bytes(e){var t=e.length>>>0;if(!t)return this._push(writeByte,1,0);if(n.isString(e)){var r=Writer.alloc(t=s.length(e));s.decode(e,r,0),e=r}return this.uint32(t)._push(f,t,e)},Writer.prototype.string=function write_string(e){var t=a.length(e);return t?this.uint32(t)._push(a.write,t,e):this._push(writeByte,1,0)},Writer.prototype.fork=function fork(){return this.states=new State(this),this.head=this.tail=new Op(noop,0,0),this.len=0,this},Writer.prototype.reset=function reset(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Op(noop,0,0),this.len=0),this},Writer.prototype.ldelim=function ldelim(){var e=this.head,t=this.tail,r=this.len;return this.reset().uint32(r),r&&(this.tail.next=e.next,this.tail=t,this.len+=r),this},Writer.prototype.finish=function finish(){for(var e=this.head.next,t=this.constructor.alloc(this.len),r=0;e;)e.fn(e.val,t,r),r+=e.len,e=e.next;return t},Writer._configure=function(e){i=e,Writer.create=l(),i._configure()}},818:(e,t,r)=>{e.exports=BufferWriter;var i=r(3449);(BufferWriter.prototype=Object.create(i.prototype)).constructor=BufferWriter;var n=r(3610);function BufferWriter(){i.call(this)}function writeStringBuffer(e,t,r){e.length<40?n.utf8.write(e,t,r):t.utf8Write?t.utf8Write(e,r):t.write(e,r)}BufferWriter._configure=function(){BufferWriter.alloc=n._Buffer_allocUnsafe,BufferWriter.writeBytesBuffer=n.Buffer&&n.Buffer.prototype instanceof Uint8Array&&"set"===n.Buffer.prototype.set.name?function writeBytesBuffer_set(e,t,r){t.set(e,r)}:function writeBytesBuffer_copy(e,t,r){if(e.copy)e.copy(t,r,0,e.length);else for(var i=0;i<e.length;)t[r++]=e[i++]}},BufferWriter.prototype.bytes=function write_bytes_buffer(e){n.isString(e)&&(e=n._Buffer_from(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this._push(BufferWriter.writeBytesBuffer,t,e),this},BufferWriter.prototype.string=function write_string_buffer(e){var t=n.Buffer.byteLength(e);return this.uint32(t),t&&this._push(writeStringBuffer,t,e),this},BufferWriter._configure()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvbnBtLnByb3RvYnVmanMuNWQxODdiN2U5ODYyM2JhZTViMDUuanMiLCJtYXBwaW5ncyI6IjZGQUNBQSxFQUFPQyxRQW1CUCxTQUFTQyxVQUFVQyxFQUFJQyxHQUNuQixJQUFJQyxFQUFVLElBQUlDLE1BQU1DLFVBQVVDLE9BQVMsR0FDdkNDLEVBQVUsRUFDVkMsRUFBVSxFQUNWQyxHQUFVLEVBQ2QsS0FBT0QsRUFBUUgsVUFBVUMsUUFDckJILEVBQU9JLEtBQVlGLFVBQVVHLEtBQ2pDLE9BQU8sSUFBSUUsU0FBUSxTQUFTQyxTQUFTQyxFQUFTQyxHQUMxQ1YsRUFBT0ksR0FBVSxTQUFTTyxTQUFTQyxHQUMvQixHQUFJTixFQUVBLEdBREFBLEdBQVUsRUFDTk0sRUFDQUYsRUFBT0UsT0FDTixDQUdELElBRkEsSUFBSVosRUFBUyxJQUFJQyxNQUFNQyxVQUFVQyxPQUFTLEdBQ3RDQyxFQUFTLEVBQ05BLEVBQVNKLEVBQU9HLFFBQ25CSCxFQUFPSSxLQUFZRixVQUFVRSxHQUNqQ0ssRUFBUUksTUFBTSxLQUFNYixFQUN4QixDQUVSLEVBQ0EsSUFDSUYsRUFBR2UsTUFBTWQsR0FBTyxLQUFNQyxFQUMxQixDQUFFLE1BQU9ZLEdBQ0ROLElBQ0FBLEdBQVUsRUFDVkksRUFBT0UsR0FFZixDQUNKLEdBQ0osQyxlQzVDQSxJQUFJRSxFQUFTbEIsRUFPYmtCLEVBQU9YLE9BQVMsU0FBU0EsT0FBT1ksR0FDNUIsSUFBSUMsRUFBSUQsRUFBT1osT0FDZixJQUFLYSxFQUNELE9BQU8sRUFFWCxJQURBLElBQUlDLEVBQUksSUFDQ0QsRUFBSSxFQUFJLEdBQTBCLE1BQXJCRCxFQUFPRyxPQUFPRixNQUM5QkMsRUFDTixPQUFPRSxLQUFLQyxLQUFxQixFQUFoQkwsRUFBT1osUUFBYyxFQUFJYyxDQUM5QyxFQVNBLElBTkEsSUFBSUksRUFBTSxJQUFJcEIsTUFBTSxJQUdoQnFCLEVBQU0sSUFBSXJCLE1BQU0sS0FHWHNCLEVBQUksRUFBR0EsRUFBSSxJQUNoQkQsRUFBSUQsRUFB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VyxJQUFJelAsS0FDbEgsU0FBU21sQixxQkFBcUJscUIsRUFBS0MsRUFBS0MsR0FDeENELEVBQUl1VSxJQUFJeFUsRUFBS0UsRUFFZixFQUVFLFNBQVNpcUIsc0JBQXNCbnFCLEVBQUtDLEVBQUtDLEdBQ3pDLEdBQUlGLEVBQUlvcUIsS0FDTnBxQixFQUFJb3FCLEtBQUtucUIsRUFBS0MsRUFBSyxFQUFHRixFQUFJL0csYUFDdkIsSUFBSyxJQUFJb0IsRUFBSSxFQUFHQSxFQUFJMkYsRUFBSS9HLFFBQzNCZ0gsRUFBSUMsS0FBU0YsRUFBSTNGLElBQ3JCLENBQ1IsRUFNQXVWLGFBQWFqUyxVQUFVa00sTUFBUSxTQUFTd2dCLG1CQUFtQm50QixHQUNuRDRLLEVBQUtxRSxTQUFTalAsS0FDZEEsRUFBUTRLLEVBQUs2ZSxhQUFhenBCLEVBQU8sV0FDckMsSUFBSW1ILEVBQU1uSCxFQUFNakUsU0FBVyxFQUkzQixPQUhBd0UsS0FBS2dlLE9BQU9wWCxHQUNSQSxHQUNBNUcsS0FBS29yQixNQUFNalosYUFBYXFhLGlCQUFrQjVsQixFQUFLbkgsR0FDNUNPLElBQ1gsRUFjQW1TLGFBQWFqUyxVQUFVOUQsT0FBUyxTQUFTeXdCLG9CQUFvQnB0QixHQUN6RCxJQUFJbUgsRUFBTXlELEVBQUtpVCxPQUFPd1AsV0FBV3J0QixHQUlqQyxPQUhBTyxLQUFLZ2UsT0FBT3BYLEdBQ1JBLEdBQ0E1RyxLQUFLb3JCLE1BQU1tQixrQkFBbUIzbEIsRUFBS25ILEdBQ2hDTyxJQUNYLEVBVUFtUyxhQUFhaEIsWSIsInNvdXJjZXMiOlsid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2FzcHJvbWlzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9iYXNlNjQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvY29kZWdlbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9ldmVudGVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvZmV0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvZmxvYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvaW5xdWlyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9wYXRoL2luZGV4LmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL3Bvb2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvdXRmOC9pbmRleC5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL2luZGV4LmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvbGlnaHQuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9taW5pbWFsLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9jb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9lbmNvZGVyLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2VudW0uanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvZmllbGQuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbGlnaHQuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbWluaW1hbC5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9tYXBmaWVsZC5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9tZXNzYWdlLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL21ldGhvZC5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9uYW1lc3BhY2UuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvb2JqZWN0LmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL29uZW9mLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3BhcnNlLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JlYWRlci5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yZWFkZXJfYnVmZmVyLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcm9vdHMuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JwYy9zZXJ2aWNlLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3NlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdG9rZW5pemUuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdHlwZS5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy90eXBlcy5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3V0aWwvbG9uZ2JpdHMuanMiLCJ3ZWJwYWNrOi8vd2luc2NvcGUvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdXRpbC9taW5pbWFsLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3ZlcmlmaWVyLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyYXBwZXJzLmpzIiwid2VicGFjazovL3dpbnNjb3BlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyaXRlci5qcyIsIndlYnBhY2s6Ly93aW5zY29wZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy93cml0ZXJfYnVmZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzUHJvbWlzZTtcclxuXHJcbi8qKlxyXG4gKiBDYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayB1dGlsLmFzUHJvbWlzZX0uXHJcbiAqIEB0eXBlZGVmIGFzUHJvbWlzZUNhbGxiYWNrXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55XHJcbiAqIEBwYXJhbSB7Li4uKn0gcGFyYW1zIEFkZGl0aW9uYWwgYXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBwcm9taXNlIGZyb20gYSBub2RlLXN0eWxlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge2FzUHJvbWlzZUNhbGxiYWNrfSBmbiBGdW5jdGlvbiB0byBjYWxsXHJcbiAqIEBwYXJhbSB7Kn0gY3R4IEZ1bmN0aW9uIGNvbnRleHRcclxuICogQHBhcmFtIHsuLi4qfSBwYXJhbXMgRnVuY3Rpb24gYXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPCo+fSBQcm9taXNpZmllZCBmdW5jdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gYXNQcm9taXNlKGZuLCBjdHgvKiwgdmFyYXJncyAqLykge1xyXG4gICAgdmFyIHBhcmFtcyAgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgIG9mZnNldCAgPSAwLFxyXG4gICAgICAgIGluZGV4ICAgPSAyLFxyXG4gICAgICAgIHBlbmRpbmcgPSB0cnVlO1xyXG4gICAgd2hpbGUgKGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aClcclxuICAgICAgICBwYXJhbXNbb2Zmc2V0KytdID0gYXJndW1lbnRzW2luZGV4KytdO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHBhcmFtc1tvZmZzZXRdID0gZnVuY3Rpb24gY2FsbGJhY2soZXJyLyosIHZhcmFyZ3MgKi8pIHtcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAob2Zmc2V0IDwgcGFyYW1zLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW29mZnNldCsrXSA9IGFyZ3VtZW50c1tvZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUuYXBwbHkobnVsbCwgcGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm4uYXBwbHkoY3R4IHx8IG51bGwsIHBhcmFtcyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIEEgbWluaW1hbCBiYXNlNjQgaW1wbGVtZW50YXRpb24gZm9yIG51bWJlciBhcnJheXMuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcbnZhciBiYXNlNjQgPSBleHBvcnRzO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGJ5dGUgbGVuZ3RoIG9mIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIEJhc2U2NCBlbmNvZGVkIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlIGxlbmd0aFxyXG4gKi9cclxuYmFzZTY0Lmxlbmd0aCA9IGZ1bmN0aW9uIGxlbmd0aChzdHJpbmcpIHtcclxuICAgIHZhciBwID0gc3RyaW5nLmxlbmd0aDtcclxuICAgIGlmICghcClcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIHZhciBuID0gMDtcclxuICAgIHdoaWxlICgtLXAgJSA0ID4gMSAmJiBzdHJpbmcuY2hhckF0KHApID09PSBcIj1cIilcclxuICAgICAgICArK247XHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKHN0cmluZy5sZW5ndGggKiAzKSAvIDQgLSBuO1xyXG59O1xyXG5cclxuLy8gQmFzZTY0IGVuY29kaW5nIHRhYmxlXHJcbnZhciBiNjQgPSBuZXcgQXJyYXkoNjQpO1xyXG5cclxuLy8gQmFzZTY0IGRlY29kaW5nIHRhYmxlXHJcbnZhciBzNjQgPSBuZXcgQXJyYXkoMTIzKTtcclxuXHJcbi8vIDY1Li45MCwgOTcuLjEyMiwgNDguLjU3LCA0MywgNDdcclxuZm9yICh2YXIgaSA9IDA7IGkgPCA2NDspXHJcbiAgICBzNjRbYjY0W2ldID0gaSA8IDI2ID8gaSArIDY1IDogaSA8IDUyID8gaSArIDcxIDogaSA8IDYyID8gaSAtIDQgOiBpIC0gNTkgfCA0M10gPSBpKys7XHJcblxyXG4vKipcclxuICogRW5jb2RlcyBhIGJ1ZmZlciB0byBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgU291cmNlIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU291cmNlIHN0YXJ0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgU291cmNlIGVuZFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmJhc2U2NC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoYnVmZmVyLCBzdGFydCwgZW5kKSB7XHJcbiAgICB2YXIgcGFydHMgPSBudWxsLFxyXG4gICAgICAgIGNodW5rID0gW107XHJcbiAgICB2YXIgaSA9IDAsIC8vIG91dHB1dCBpbmRleFxyXG4gICAgICAgIGogPSAwLCAvLyBnb3RvIGluZGV4XHJcbiAgICAgICAgdDsgICAgIC8vIHRlbXBvcmFyeVxyXG4gICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XHJcbiAgICAgICAgdmFyIGIgPSBidWZmZXJbc3RhcnQrK107XHJcbiAgICAgICAgc3dpdGNoIChqKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbYiA+PiAyXTtcclxuICAgICAgICAgICAgICAgIHQgPSAoYiAmIDMpIDw8IDQ7XHJcbiAgICAgICAgICAgICAgICBqID0gMTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W3QgfCBiID4+IDRdO1xyXG4gICAgICAgICAgICAgICAgdCA9IChiICYgMTUpIDw8IDI7XHJcbiAgICAgICAgICAgICAgICBqID0gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W3QgfCBiID4+IDZdO1xyXG4gICAgICAgICAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFtiICYgNjNdO1xyXG4gICAgICAgICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGkgPiA4MTkxKSB7XHJcbiAgICAgICAgICAgIChwYXJ0cyB8fCAocGFydHMgPSBbXSkpLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rKSk7XHJcbiAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChqKSB7XHJcbiAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFt0XTtcclxuICAgICAgICBjaHVua1tpKytdID0gNjE7XHJcbiAgICAgICAgaWYgKGogPT09IDEpXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSA2MTtcclxuICAgIH1cclxuICAgIGlmIChwYXJ0cykge1xyXG4gICAgICAgIGlmIChpKVxyXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSkpO1xyXG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSk7XHJcbn07XHJcblxyXG52YXIgaW52YWxpZEVuY29kaW5nID0gXCJpbnZhbGlkIGVuY29kaW5nXCI7XHJcblxyXG4vKipcclxuICogRGVjb2RlcyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyB0byBhIGJ1ZmZlci5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTb3VyY2Ugc3RyaW5nXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIERlc3RpbmF0aW9uIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IERlc3RpbmF0aW9uIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgYnl0ZXMgd3JpdHRlblxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgZW5jb2RpbmcgaXMgaW52YWxpZFxyXG4gKi9cclxuYmFzZTY0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShzdHJpbmcsIGJ1ZmZlciwgb2Zmc2V0KSB7XHJcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XHJcbiAgICB2YXIgaiA9IDAsIC8vIGdvdG8gaW5kZXhcclxuICAgICAgICB0OyAgICAgLy8gdGVtcG9yYXJ5XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7KSB7XHJcbiAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKyspO1xyXG4gICAgICAgIGlmIChjID09PSA2MSAmJiBqID4gMSlcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgaWYgKChjID0gczY0W2NdKSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihpbnZhbGlkRW5jb2RpbmcpO1xyXG4gICAgICAgIHN3aXRjaCAoaikge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0ID0gYztcclxuICAgICAgICAgICAgICAgIGogPSAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSB0IDw8IDIgfCAoYyAmIDQ4KSA+PiA0O1xyXG4gICAgICAgICAgICAgICAgdCA9IGM7XHJcbiAgICAgICAgICAgICAgICBqID0gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gKHQgJiAxNSkgPDwgNCB8IChjICYgNjApID4+IDI7XHJcbiAgICAgICAgICAgICAgICB0ID0gYztcclxuICAgICAgICAgICAgICAgIGogPSAzO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAodCAmIDMpIDw8IDYgfCBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaiA9PT0gMSlcclxuICAgICAgICB0aHJvdyBFcnJvcihpbnZhbGlkRW5jb2RpbmcpO1xyXG4gICAgcmV0dXJuIG9mZnNldCAtIHN0YXJ0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgc3RyaW5nIGFwcGVhcnMgdG8gYmUgYmFzZTY0IGVuY29kZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIHRlc3RcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBwcm9iYWJseSBiYXNlNjQgZW5jb2RlZCwgb3RoZXJ3aXNlIGZhbHNlXHJcbiAqL1xyXG5iYXNlNjQudGVzdCA9IGZ1bmN0aW9uIHRlc3Qoc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gL14oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQvLnRlc3Qoc3RyaW5nKTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gY29kZWdlbjtcclxuXHJcbi8qKlxyXG4gKiBCZWdpbnMgZ2VuZXJhdGluZyBhIGZ1bmN0aW9uLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBmdW5jdGlvblBhcmFtcyBGdW5jdGlvbiBwYXJhbWV0ZXIgbmFtZXNcclxuICogQHBhcmFtIHtzdHJpbmd9IFtmdW5jdGlvbk5hbWVdIEZ1bmN0aW9uIG5hbWUgaWYgbm90IGFub255bW91c1xyXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQXBwZW5kZXIgdGhhdCBhcHBlbmRzIGNvZGUgdG8gdGhlIGZ1bmN0aW9uJ3MgYm9keVxyXG4gKi9cclxuZnVuY3Rpb24gY29kZWdlbihmdW5jdGlvblBhcmFtcywgZnVuY3Rpb25OYW1lKSB7XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAodHlwZW9mIGZ1bmN0aW9uUGFyYW1zID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgZnVuY3Rpb25OYW1lID0gZnVuY3Rpb25QYXJhbXM7XHJcbiAgICAgICAgZnVuY3Rpb25QYXJhbXMgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGJvZHkgPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGVuZHMgY29kZSB0byB0aGUgZnVuY3Rpb24ncyBib2R5IG9yIGZpbmlzaGVzIGdlbmVyYXRpb24uXHJcbiAgICAgKiBAdHlwZWRlZiBDb2RlZ2VuXHJcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3QuPHN0cmluZywqPn0gW2Zvcm1hdFN0cmluZ09yU2NvcGVdIEZvcm1hdCBzdHJpbmcgb3IsIHRvIGZpbmlzaCB0aGUgZnVuY3Rpb24sIGFuIG9iamVjdCBvZiBhZGRpdGlvbmFsIHNjb3BlIHZhcmlhYmxlcywgaWYgYW55XHJcbiAgICAgKiBAcGFyYW0gey4uLip9IFtmb3JtYXRQYXJhbXNdIEZvcm1hdCBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7Q29kZWdlbnxGdW5jdGlvbn0gSXRzZWxmIG9yIHRoZSBnZW5lcmF0ZWQgZnVuY3Rpb24gaWYgZmluaXNoZWRcclxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBmb3JtYXQgcGFyYW1ldGVyIGNvdW50cyBkbyBub3QgbWF0Y2hcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIENvZGVnZW4oZm9ybWF0U3RyaW5nT3JTY29wZSkge1xyXG4gICAgICAgIC8vIG5vdGUgdGhhdCBleHBsaWNpdCBhcnJheSBoYW5kbGluZyBiZWxvdyBtYWtlcyB0aGlzIH41MCUgZmFzdGVyXHJcblxyXG4gICAgICAgIC8vIGZpbmlzaCB0aGUgZnVuY3Rpb25cclxuICAgICAgICBpZiAodHlwZW9mIGZvcm1hdFN0cmluZ09yU2NvcGUgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGlmIChjb2RlZ2VuLnZlcmJvc2UpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvZGVnZW46IFwiICsgc291cmNlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXHJcbiAgICAgICAgICAgIHNvdXJjZSA9IFwicmV0dXJuIFwiICsgc291cmNlO1xyXG4gICAgICAgICAgICBpZiAoZm9ybWF0U3RyaW5nT3JTY29wZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjb3BlS2V5cyAgID0gT2JqZWN0LmtleXMoZm9ybWF0U3RyaW5nT3JTY29wZSksXHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVQYXJhbXMgPSBuZXcgQXJyYXkoc2NvcGVLZXlzLmxlbmd0aCArIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlVmFsdWVzID0gbmV3IEFycmF5KHNjb3BlS2V5cy5sZW5ndGgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChzY29wZU9mZnNldCA8IHNjb3BlS2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZVBhcmFtc1tzY29wZU9mZnNldF0gPSBzY29wZUtleXNbc2NvcGVPZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlVmFsdWVzW3Njb3BlT2Zmc2V0XSA9IGZvcm1hdFN0cmluZ09yU2NvcGVbc2NvcGVLZXlzW3Njb3BlT2Zmc2V0KytdXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNjb3BlUGFyYW1zW3Njb3BlT2Zmc2V0XSA9IHNvdXJjZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5hcHBseShudWxsLCBzY29wZVBhcmFtcykuYXBwbHkobnVsbCwgc2NvcGVWYWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy1mdW5jXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKHNvdXJjZSkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctZnVuY1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gb3RoZXJ3aXNlIGFwcGVuZCB0byBib2R5XHJcbiAgICAgICAgdmFyIGZvcm1hdFBhcmFtcyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSksXHJcbiAgICAgICAgICAgIGZvcm1hdE9mZnNldCA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGZvcm1hdE9mZnNldCA8IGZvcm1hdFBhcmFtcy5sZW5ndGgpXHJcbiAgICAgICAgICAgIGZvcm1hdFBhcmFtc1tmb3JtYXRPZmZzZXRdID0gYXJndW1lbnRzWysrZm9ybWF0T2Zmc2V0XTtcclxuICAgICAgICBmb3JtYXRPZmZzZXQgPSAwO1xyXG4gICAgICAgIGZvcm1hdFN0cmluZ09yU2NvcGUgPSBmb3JtYXRTdHJpbmdPclNjb3BlLnJlcGxhY2UoLyUoWyVkZmlqc10pL2csIGZ1bmN0aW9uIHJlcGxhY2UoJDAsICQxKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGZvcm1hdFBhcmFtc1tmb3JtYXRPZmZzZXQrK107XHJcbiAgICAgICAgICAgIHN3aXRjaCAoJDEpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJkXCI6IGNhc2UgXCJmXCI6IHJldHVybiBTdHJpbmcoTnVtYmVyKHZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiaVwiOiByZXR1cm4gU3RyaW5nKE1hdGguZmxvb3IodmFsdWUpKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJqXCI6IHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwic1wiOiByZXR1cm4gU3RyaW5nKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gXCIlXCI7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGZvcm1hdE9mZnNldCAhPT0gZm9ybWF0UGFyYW1zLmxlbmd0aClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJwYXJhbWV0ZXIgY291bnQgbWlzbWF0Y2hcIik7XHJcbiAgICAgICAgYm9keS5wdXNoKGZvcm1hdFN0cmluZ09yU2NvcGUpO1xyXG4gICAgICAgIHJldHVybiBDb2RlZ2VuO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKGZ1bmN0aW9uTmFtZU92ZXJyaWRlKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb24gXCIgKyAoZnVuY3Rpb25OYW1lT3ZlcnJpZGUgfHwgZnVuY3Rpb25OYW1lIHx8IFwiXCIpICsgXCIoXCIgKyAoZnVuY3Rpb25QYXJhbXMgJiYgZnVuY3Rpb25QYXJhbXMuam9pbihcIixcIikgfHwgXCJcIikgKyBcIil7XFxuICBcIiArIGJvZHkuam9pbihcIlxcbiAgXCIpICsgXCJcXG59XCI7XHJcbiAgICB9XHJcblxyXG4gICAgQ29kZWdlbi50b1N0cmluZyA9IHRvU3RyaW5nO1xyXG4gICAgcmV0dXJuIENvZGVnZW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCZWdpbnMgZ2VuZXJhdGluZyBhIGZ1bmN0aW9uLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAZnVuY3Rpb24gY29kZWdlblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW2Z1bmN0aW9uTmFtZV0gRnVuY3Rpb24gbmFtZSBpZiBub3QgYW5vbnltb3VzXHJcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBBcHBlbmRlciB0aGF0IGFwcGVuZHMgY29kZSB0byB0aGUgZnVuY3Rpb24ncyBib2R5XHJcbiAqIEB2YXJpYXRpb24gMlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXaGVuIHNldCB0byBgdHJ1ZWAsIGNvZGVnZW4gd2lsbCBsb2cgZ2VuZXJhdGVkIGNvZGUgdG8gY29uc29sZS4gVXNlZnVsIGZvciBkZWJ1Z2dpbmcuXHJcbiAqIEBuYW1lIHV0aWwuY29kZWdlbi52ZXJib3NlXHJcbiAqIEB0eXBlIHtib29sZWFufVxyXG4gKi9cclxuY29kZWdlbi52ZXJib3NlID0gZmFsc2U7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGV2ZW50IGVtaXR0ZXIgaW5zdGFuY2UuXHJcbiAqIEBjbGFzc2Rlc2MgQSBtaW5pbWFsIGV2ZW50IGVtaXR0ZXIuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyBhbiBldmVudCBsaXN0ZW5lci5cclxuICogQHBhcmFtIHtzdHJpbmd9IGV2dCBFdmVudCBuYW1lXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIExpc3RlbmVyXHJcbiAqIEBwYXJhbSB7Kn0gW2N0eF0gTGlzdGVuZXIgY29udGV4dFxyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2dCwgZm4sIGN0eCkge1xyXG4gICAgKHRoaXMuX2xpc3RlbmVyc1tldnRdIHx8ICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSA9IFtdKSkucHVzaCh7XHJcbiAgICAgICAgZm4gIDogZm4sXHJcbiAgICAgICAgY3R4IDogY3R4IHx8IHRoaXNcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciBvciBhbnkgbWF0Y2hpbmcgbGlzdGVuZXJzIGlmIGFyZ3VtZW50cyBhcmUgb21pdHRlZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IFtldnRdIEV2ZW50IG5hbWUuIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBpZiBvbWl0dGVkLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZm5dIExpc3RlbmVyIHRvIHJlbW92ZS4gUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIG9mIGBldnRgIGlmIG9taXR0ZWQuXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIG9mZihldnQsIGZuKSB7XHJcbiAgICBpZiAoZXZ0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoZm4gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBbXTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5mbiA9PT0gZm4pXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdHMgYW4gZXZlbnQgYnkgY2FsbGluZyBpdHMgbGlzdGVuZXJzIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldnQgRXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2dCkge1xyXG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgIHZhciBhcmdzID0gW10sXHJcbiAgICAgICAgICAgIGkgPSAxO1xyXG4gICAgICAgIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDspXHJcbiAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2krK10uY3R4LCBhcmdzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBmZXRjaDtcclxuXHJcbnZhciBhc1Byb21pc2UgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvYXNwcm9taXNlXCIpLFxyXG4gICAgaW5xdWlyZSAgID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2lucXVpcmVcIik7XHJcblxyXG52YXIgZnMgPSBpbnF1aXJlKFwiZnNcIik7XHJcblxyXG4vKipcclxuICogTm9kZS1zdHlsZSBjYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayB1dGlsLmZldGNofS5cclxuICogQHR5cGVkZWYgRmV0Y2hDYWxsYmFja1xyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XHJcbiAqIEBwYXJhbSB7P0Vycm9yfSBlcnJvciBFcnJvciwgaWYgYW55LCBvdGhlcndpc2UgYG51bGxgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29udGVudHNdIEZpbGUgY29udGVudHMsIGlmIHRoZXJlIGhhc24ndCBiZWVuIGFuIGVycm9yXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgYXMgdXNlZCBieSB7QGxpbmsgdXRpbC5mZXRjaH0uXHJcbiAqIEB0eXBlZGVmIEZldGNoT3B0aW9uc1xyXG4gKiBAdHlwZSB7T2JqZWN0fVxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtiaW5hcnk9ZmFsc2VdIFdoZXRoZXIgZXhwZWN0aW5nIGEgYmluYXJ5IHJlc3BvbnNlXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3hocj1mYWxzZV0gSWYgYHRydWVgLCBmb3JjZXMgdGhlIHVzZSBvZiBYTUxIdHRwUmVxdWVzdFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBGZXRjaGVzIHRoZSBjb250ZW50cyBvZiBhIGZpbGUuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZSBGaWxlIHBhdGggb3IgdXJsXHJcbiAqIEBwYXJhbSB7RmV0Y2hPcHRpb25zfSBvcHRpb25zIEZldGNoIG9wdGlvbnNcclxuICogQHBhcmFtIHtGZXRjaENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuZnVuY3Rpb24gZmV0Y2goZmlsZW5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcclxuICAgICAgICBvcHRpb25zID0ge307XHJcbiAgICB9IGVsc2UgaWYgKCFvcHRpb25zKVxyXG4gICAgICAgIG9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICBpZiAoIWNhbGxiYWNrKVxyXG4gICAgICAgIHJldHVybiBhc1Byb21pc2UoZmV0Y2gsIHRoaXMsIGZpbGVuYW1lLCBvcHRpb25zKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcclxuXHJcbiAgICAvLyBpZiBhIG5vZGUtbGlrZSBmaWxlc3lzdGVtIGlzIHByZXNlbnQsIHRyeSBpdCBmaXJzdCBidXQgZmFsbCBiYWNrIHRvIFhIUiBpZiBub3RoaW5nIGlzIGZvdW5kLlxyXG4gICAgaWYgKCFvcHRpb25zLnhociAmJiBmcyAmJiBmcy5yZWFkRmlsZSlcclxuICAgICAgICByZXR1cm4gZnMucmVhZEZpbGUoZmlsZW5hbWUsIGZ1bmN0aW9uIGZldGNoUmVhZEZpbGVDYWxsYmFjayhlcnIsIGNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnIgJiYgdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IGZldGNoLnhocihmaWxlbmFtZSwgb3B0aW9ucywgY2FsbGJhY2spXHJcbiAgICAgICAgICAgICAgICA6IGVyclxyXG4gICAgICAgICAgICAgICAgPyBjYWxsYmFjayhlcnIpXHJcbiAgICAgICAgICAgICAgICA6IGNhbGxiYWNrKG51bGwsIG9wdGlvbnMuYmluYXJ5ID8gY29udGVudHMgOiBjb250ZW50cy50b1N0cmluZyhcInV0ZjhcIikpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIHVzZSB0aGUgWEhSIHZlcnNpb24gb3RoZXJ3aXNlLlxyXG4gICAgcmV0dXJuIGZldGNoLnhocihmaWxlbmFtZSwgb3B0aW9ucywgY2FsbGJhY2spO1xyXG59XHJcblxyXG4vKipcclxuICogRmV0Y2hlcyB0aGUgY29udGVudHMgb2YgYSBmaWxlLlxyXG4gKiBAbmFtZSB1dGlsLmZldGNoXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBGaWxlIHBhdGggb3IgdXJsXHJcbiAqIEBwYXJhbSB7RmV0Y2hDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICogQHZhcmlhdGlvbiAyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEZldGNoZXMgdGhlIGNvbnRlbnRzIG9mIGEgZmlsZS5cclxuICogQG5hbWUgdXRpbC5mZXRjaFxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggRmlsZSBwYXRoIG9yIHVybFxyXG4gKiBAcGFyYW0ge0ZldGNoT3B0aW9uc30gW29wdGlvbnNdIEZldGNoIG9wdGlvbnNcclxuICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nfFVpbnQ4QXJyYXk+fSBQcm9taXNlXHJcbiAqIEB2YXJpYXRpb24gM1xyXG4gKi9cclxuXHJcbi8qKi9cclxuZmV0Y2gueGhyID0gZnVuY3Rpb24gZmV0Y2hfeGhyKGZpbGVuYW1lLCBvcHRpb25zLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSAvKiB3b3JrcyBldmVyeXdoZXJlICovID0gZnVuY3Rpb24gZmV0Y2hPblJlYWR5U3RhdGVDaGFuZ2UoKSB7XHJcblxyXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gNClcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgLy8gbG9jYWwgY29ycyBzZWN1cml0eSBlcnJvcnMgcmV0dXJuIHN0YXR1cyAwIC8gZW1wdHkgc3RyaW5nLCB0b28uIGFmYWlrIHRoaXMgY2Fubm90IGJlXHJcbiAgICAgICAgLy8gcmVsaWFibHkgZGlzdGluZ3Vpc2hlZCBmcm9tIGFuIGFjdHVhbGx5IGVtcHR5IGZpbGUgZm9yIHNlY3VyaXR5IHJlYXNvbnMuIGZlZWwgZnJlZVxyXG4gICAgICAgIC8vIHRvIHNlbmQgYSBwdWxsIHJlcXVlc3QgaWYgeW91IGFyZSBhd2FyZSBvZiBhIHNvbHV0aW9uLlxyXG4gICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAwICYmIHhoci5zdGF0dXMgIT09IDIwMClcclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKEVycm9yKFwic3RhdHVzIFwiICsgeGhyLnN0YXR1cykpO1xyXG5cclxuICAgICAgICAvLyBpZiBiaW5hcnkgZGF0YSBpcyBleHBlY3RlZCwgbWFrZSBzdXJlIHRoYXQgc29tZSBzb3J0IG9mIGFycmF5IGlzIHJldHVybmVkLCBldmVuIGlmXHJcbiAgICAgICAgLy8gQXJyYXlCdWZmZXJzIGFyZSBub3Qgc3VwcG9ydGVkLiB0aGUgYmluYXJ5IHN0cmluZyBmYWxsYmFjaywgaG93ZXZlciwgaXMgdW5zYWZlLlxyXG4gICAgICAgIGlmIChvcHRpb25zLmJpbmFyeSkge1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0geGhyLnJlc3BvbnNlO1xyXG4gICAgICAgICAgICBpZiAoIWJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhoci5yZXNwb25zZVRleHQubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goeGhyLnJlc3BvbnNlVGV4dC5jaGFyQ29kZUF0KGkpICYgMjU1KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgdHlwZW9mIFVpbnQ4QXJyYXkgIT09IFwidW5kZWZpbmVkXCIgPyBuZXcgVWludDhBcnJheShidWZmZXIpIDogYnVmZmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHhoci5yZXNwb25zZVRleHQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5iaW5hcnkpIHtcclxuICAgICAgICAvLyByZWY6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9YTUxIdHRwUmVxdWVzdC9TZW5kaW5nX2FuZF9SZWNlaXZpbmdfQmluYXJ5X0RhdGEjUmVjZWl2aW5nX2JpbmFyeV9kYXRhX2luX29sZGVyX2Jyb3dzZXJzXHJcbiAgICAgICAgaWYgKFwib3ZlcnJpZGVNaW1lVHlwZVwiIGluIHhocilcclxuICAgICAgICAgICAgeGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpO1xyXG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcbiAgICB9XHJcblxyXG4gICAgeGhyLm9wZW4oXCJHRVRcIiwgZmlsZW5hbWUpO1xyXG4gICAgeGhyLnNlbmQoKTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZmFjdG9yeSk7XHJcblxyXG4vKipcclxuICogUmVhZHMgLyB3cml0ZXMgZmxvYXRzIC8gZG91YmxlcyBmcm9tIC8gdG8gYnVmZmVycy5cclxuICogQG5hbWUgdXRpbC5mbG9hdFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhIDMyIGJpdCBmbG9hdCB0byBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQud3JpdGVGbG9hdExFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSAzMiBiaXQgZmxvYXQgdG8gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LndyaXRlRmxvYXRCRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBUYXJnZXQgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGFyZ2V0IGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSAzMiBiaXQgZmxvYXQgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZEZsb2F0TEVcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBTb3VyY2UgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgMzIgYml0IGZsb2F0IGZyb20gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LnJlYWRGbG9hdEJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGxpdHRsZSBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8vIEZhY3RvcnkgZnVuY3Rpb24gZm9yIHRoZSBwdXJwb3NlIG9mIG5vZGUtYmFzZWQgdGVzdGluZyBpbiBtb2RpZmllZCBnbG9iYWwgZW52aXJvbm1lbnRzXHJcbmZ1bmN0aW9uIGZhY3RvcnkoZXhwb3J0cykge1xyXG5cclxuICAgIC8vIGZsb2F0OiB0eXBlZCBhcnJheVxyXG4gICAgaWYgKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGYzMiA9IG5ldyBGbG9hdDMyQXJyYXkoWyAtMCBdKSxcclxuICAgICAgICAgICAgZjhiID0gbmV3IFVpbnQ4QXJyYXkoZjMyLmJ1ZmZlciksXHJcbiAgICAgICAgICAgIGxlICA9IGY4YlszXSA9PT0gMTI4O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZUZsb2F0X2YzMl9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmMzJbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfZjMyX3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGYzMlswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzNdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4YlsxXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRmxvYXRMRSA9IGxlID8gd3JpdGVGbG9hdF9mMzJfY3B5IDogd3JpdGVGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSBsZSA/IHdyaXRlRmxvYXRfZjMyX3JldiA6IHdyaXRlRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsxXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gbGUgPyByZWFkRmxvYXRfZjMyX2NweSA6IHJlYWRGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRCRSA9IGxlID8gcmVhZEZsb2F0X2YzMl9yZXYgOiByZWFkRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAvLyBmbG9hdDogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfaWVlZTc1NCh3cml0ZVVpbnQsIHZhbCwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSB2YWwgPCAwID8gMSA6IDA7XHJcbiAgICAgICAgICAgIGlmIChzaWduKVxyXG4gICAgICAgICAgICAgICAgdmFsID0gLXZhbDtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgxIC8gdmFsID4gMCA/IC8qIHBvc2l0aXZlICovIDAgOiAvKiBuZWdhdGl2ZSAwICovIDIxNDc0ODM2NDgsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOYU4odmFsKSlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQzMjg5MzQ0LCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA+IDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpIC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IDIxMzkwOTUwNDApID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA8IDEuMTc1NDk0MzUwODIyMjg3NWUtMzgpIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoKHNpZ24gPDwgMzEgfCBNYXRoLnJvdW5kKHZhbCAvIDEuNDAxMjk4NDY0MzI0ODE3ZS00NSkpID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gTWF0aC5yb3VuZCh2YWwgKiBNYXRoLnBvdygyLCAtZXhwb25lbnQpICogODM4ODYwOCkgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgZXhwb25lbnQgKyAxMjcgPDwgMjMgfCBtYW50aXNzYSkgPj4+IDAsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0TEUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRMRSk7XHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRGbG9hdF9pZWVlNzU0KHJlYWRVaW50LCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICB2YXIgdWludCA9IHJlYWRVaW50KGJ1ZiwgcG9zKSxcclxuICAgICAgICAgICAgICAgIHNpZ24gPSAodWludCA+PiAzMSkgKiAyICsgMSxcclxuICAgICAgICAgICAgICAgIGV4cG9uZW50ID0gdWludCA+Pj4gMjMgJiAyNTUsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHVpbnQgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDI1NVxyXG4gICAgICAgICAgICAgICAgPyBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgPyBOYU5cclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIEluZmluaXR5XHJcbiAgICAgICAgICAgICAgICA6IGV4cG9uZW50ID09PSAwIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICA/IHNpZ24gKiAxLjQwMTI5ODQ2NDMyNDgxN2UtNDUgKiBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgOiBzaWduICogTWF0aC5wb3coMiwgZXhwb25lbnQgLSAxNTApICogKG1hbnRpc3NhICsgODM4ODYwOCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludExFKTtcclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdEJFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIC8vIGRvdWJsZTogdHlwZWQgYXJyYXlcclxuICAgIGlmICh0eXBlb2YgRmxvYXQ2NEFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBmNjQgPSBuZXcgRmxvYXQ2NEFycmF5KFstMF0pLFxyXG4gICAgICAgICAgICBmOGIgPSBuZXcgVWludDhBcnJheShmNjQuYnVmZmVyKSxcclxuICAgICAgICAgICAgbGUgID0gZjhiWzddID09PSAxMjg7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2Y2NF9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmNjRbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDRdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNV0gPSBmOGJbNV07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA2XSA9IGY4Yls2XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDddID0gZjhiWzddO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd3JpdGVEb3VibGVfZjY0X3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGY2NFswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzddO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbNl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4Yls1XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNF0gPSBmOGJbM107XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA1XSA9IGY4YlsyXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDZdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgN10gPSBmOGJbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVMRSA9IGxlID8gd3JpdGVEb3VibGVfZjY0X2NweSA6IHdyaXRlRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlQkUgPSBsZSA/IHdyaXRlRG91YmxlX2Y2NF9yZXYgOiB3cml0ZURvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbNF0gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzZdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbN10gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzddID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbNl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzRdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbM10gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzFdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbMF0gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gbGUgPyByZWFkRG91YmxlX2Y2NF9jcHkgOiByZWFkRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWREb3VibGVCRSA9IGxlID8gcmVhZERvdWJsZV9mNjRfcmV2IDogcmVhZERvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgIC8vIGRvdWJsZTogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2llZWU3NTQod3JpdGVVaW50LCBvZmYwLCBvZmYxLCB2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIHZhciBzaWduID0gdmFsIDwgMCA/IDEgOiAwO1xyXG4gICAgICAgICAgICBpZiAoc2lnbilcclxuICAgICAgICAgICAgICAgIHZhbCA9IC12YWw7XHJcbiAgICAgICAgICAgIGlmICh2YWwgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KDEgLyB2YWwgPiAwID8gLyogcG9zaXRpdmUgKi8gMCA6IC8qIG5lZ2F0aXZlIDAgKi8gMjE0NzQ4MzY0OCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMCwgYnVmLCBwb3MgKyBvZmYwKTtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQ2OTU5MzYwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbCA+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KSB7IC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgMjE0NjQzNTA3MikgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFudGlzc2E7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgMi4yMjUwNzM4NTg1MDcyMDE0ZS0zMDgpIHsgLy8gZGVub3JtYWxcclxuICAgICAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHZhbCAvIDVlLTMyNDtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgbWFudGlzc2EgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBvbmVudCA9PT0gMTAyNClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb25lbnQgPSAxMDIzO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gdmFsICogTWF0aC5wb3coMiwgLWV4cG9uZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgKiA0NTAzNTk5NjI3MzcwNDk2ID4+PiAwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IGV4cG9uZW50ICsgMTAyMyA8PCAyMCB8IG1hbnRpc3NhICogMTA0ODU3NiAmIDEwNDg1NzUpID4+PiAwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlTEUgPSB3cml0ZURvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgd3JpdGVVaW50TEUsIDAsIDQpO1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVCRSA9IHdyaXRlRG91YmxlX2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSwgNCwgMCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWREb3VibGVfaWVlZTc1NChyZWFkVWludCwgb2ZmMCwgb2ZmMSwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIGxvID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYwKSxcclxuICAgICAgICAgICAgICAgIGhpID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSAoaGkgPj4gMzEpICogMiArIDEsXHJcbiAgICAgICAgICAgICAgICBleHBvbmVudCA9IGhpID4+PiAyMCAmIDIwNDcsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IDQyOTQ5NjcyOTYgKiAoaGkgJiAxMDQ4NTc1KSArIGxvO1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDIwNDdcclxuICAgICAgICAgICAgICAgID8gbWFudGlzc2FcclxuICAgICAgICAgICAgICAgID8gTmFOXHJcbiAgICAgICAgICAgICAgICA6IHNpZ24gKiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgOiBleHBvbmVudCA9PT0gMCAvLyBkZW5vcm1hbFxyXG4gICAgICAgICAgICAgICAgPyBzaWduICogNWUtMzI0ICogbWFudGlzc2FcclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIE1hdGgucG93KDIsIGV4cG9uZW50IC0gMTA3NSkgKiAobWFudGlzc2EgKyA0NTAzNTk5NjI3MzcwNDk2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gcmVhZERvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgcmVhZFVpbnRMRSwgMCwgNCk7XHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlQkUgPSByZWFkRG91YmxlX2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFLCA0LCAwKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIHJldHVybiBleHBvcnRzO1xyXG59XHJcblxyXG4vLyB1aW50IGhlbHBlcnNcclxuXHJcbmZ1bmN0aW9uIHdyaXRlVWludExFKHZhbCwgYnVmLCBwb3MpIHtcclxuICAgIGJ1Zltwb3MgICAgXSA9ICB2YWwgICAgICAgICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDFdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgMl0gPSAgdmFsID4+PiAxNiAmIDI1NTtcclxuICAgIGJ1Zltwb3MgKyAzXSA9ICB2YWwgPj4+IDI0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cml0ZVVpbnRCRSh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICBidWZbcG9zICAgIF0gPSAgdmFsID4+PiAyNDtcclxuICAgIGJ1Zltwb3MgKyAxXSA9ICB2YWwgPj4+IDE2ICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgM10gPSAgdmFsICAgICAgICAmIDI1NTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZFVpbnRMRShidWYsIHBvcykge1xyXG4gICAgcmV0dXJuIChidWZbcG9zICAgIF1cclxuICAgICAgICAgIHwgYnVmW3BvcyArIDFdIDw8IDhcclxuICAgICAgICAgIHwgYnVmW3BvcyArIDJdIDw8IDE2XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAzXSA8PCAyNCkgPj4+IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRVaW50QkUoYnVmLCBwb3MpIHtcclxuICAgIHJldHVybiAoYnVmW3BvcyAgICBdIDw8IDI0XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAxXSA8PCAxNlxyXG4gICAgICAgICAgfCBidWZbcG9zICsgMl0gPDwgOFxyXG4gICAgICAgICAgfCBidWZbcG9zICsgM10pID4+PiAwO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGlucXVpcmU7XHJcblxyXG4vKipcclxuICogUmVxdWlyZXMgYSBtb2R1bGUgb25seSBpZiBhdmFpbGFibGUuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lIE1vZHVsZSB0byByZXF1aXJlXHJcbiAqIEByZXR1cm5zIHs/T2JqZWN0fSBSZXF1aXJlZCBtb2R1bGUgaWYgYXZhaWxhYmxlIGFuZCBub3QgZW1wdHksIG90aGVyd2lzZSBgbnVsbGBcclxuICovXHJcbmZ1bmN0aW9uIGlucXVpcmUobW9kdWxlTmFtZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgbW9kID0gZXZhbChcInF1aXJlXCIucmVwbGFjZSgvXi8sXCJyZVwiKSkobW9kdWxlTmFtZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxyXG4gICAgICAgIGlmIChtb2QgJiYgKG1vZC5sZW5ndGggfHwgT2JqZWN0LmtleXMobW9kKS5sZW5ndGgpKVxyXG4gICAgICAgICAgICByZXR1cm4gbW9kO1xyXG4gICAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKipcclxuICogQSBtaW5pbWFsIHBhdGggbW9kdWxlIHRvIHJlc29sdmUgVW5peCwgV2luZG93cyBhbmQgVVJMIHBhdGhzIGFsaWtlLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG52YXIgcGF0aCA9IGV4cG9ydHM7XHJcblxyXG52YXIgaXNBYnNvbHV0ZSA9XHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIHBhdGggaXMgYWJzb2x1dGUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gdGVzdFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHBhdGggaXMgYWJzb2x1dGVcclxuICovXHJcbnBhdGguaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aCkge1xyXG4gICAgcmV0dXJuIC9eKD86XFwvfFxcdys6KS8udGVzdChwYXRoKTtcclxufTtcclxuXHJcbnZhciBub3JtYWxpemUgPVxyXG4vKipcclxuICogTm9ybWFsaXplcyB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gbm9ybWFsaXplXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IE5vcm1hbGl6ZWQgcGF0aFxyXG4gKi9cclxucGF0aC5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUocGF0aCkge1xyXG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFxcXC9nLCBcIi9cIilcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcL3syLH0vZywgXCIvXCIpO1xyXG4gICAgdmFyIHBhcnRzICAgID0gcGF0aC5zcGxpdChcIi9cIiksXHJcbiAgICAgICAgYWJzb2x1dGUgPSBpc0Fic29sdXRlKHBhdGgpLFxyXG4gICAgICAgIHByZWZpeCAgID0gXCJcIjtcclxuICAgIGlmIChhYnNvbHV0ZSlcclxuICAgICAgICBwcmVmaXggPSBwYXJ0cy5zaGlmdCgpICsgXCIvXCI7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDspIHtcclxuICAgICAgICBpZiAocGFydHNbaV0gPT09IFwiLi5cIikge1xyXG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgcGFydHNbaSAtIDFdICE9PSBcIi4uXCIpXHJcbiAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoLS1pLCAyKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoYWJzb2x1dGUpXHJcbiAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09PSBcIi5cIilcclxuICAgICAgICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByZWZpeCArIHBhcnRzLmpvaW4oXCIvXCIpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlc29sdmVzIHRoZSBzcGVjaWZpZWQgaW5jbHVkZSBwYXRoIGFnYWluc3QgdGhlIHNwZWNpZmllZCBvcmlnaW4gcGF0aC5cclxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpblBhdGggUGF0aCB0byB0aGUgb3JpZ2luIGZpbGVcclxuICogQHBhcmFtIHtzdHJpbmd9IGluY2x1ZGVQYXRoIEluY2x1ZGUgcGF0aCByZWxhdGl2ZSB0byBvcmlnaW4gcGF0aFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthbHJlYWR5Tm9ybWFsaXplZD1mYWxzZV0gYHRydWVgIGlmIGJvdGggcGF0aHMgYXJlIGFscmVhZHkga25vd24gdG8gYmUgbm9ybWFsaXplZFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBQYXRoIHRvIHRoZSBpbmNsdWRlIGZpbGVcclxuICovXHJcbnBhdGgucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUob3JpZ2luUGF0aCwgaW5jbHVkZVBhdGgsIGFscmVhZHlOb3JtYWxpemVkKSB7XHJcbiAgICBpZiAoIWFscmVhZHlOb3JtYWxpemVkKVxyXG4gICAgICAgIGluY2x1ZGVQYXRoID0gbm9ybWFsaXplKGluY2x1ZGVQYXRoKTtcclxuICAgIGlmIChpc0Fic29sdXRlKGluY2x1ZGVQYXRoKSlcclxuICAgICAgICByZXR1cm4gaW5jbHVkZVBhdGg7XHJcbiAgICBpZiAoIWFscmVhZHlOb3JtYWxpemVkKVxyXG4gICAgICAgIG9yaWdpblBhdGggPSBub3JtYWxpemUob3JpZ2luUGF0aCk7XHJcbiAgICByZXR1cm4gKG9yaWdpblBhdGggPSBvcmlnaW5QYXRoLnJlcGxhY2UoLyg/OlxcL3xeKVteL10rJC8sIFwiXCIpKS5sZW5ndGggPyBub3JtYWxpemUob3JpZ2luUGF0aCArIFwiL1wiICsgaW5jbHVkZVBhdGgpIDogaW5jbHVkZVBhdGg7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHBvb2w7XHJcblxyXG4vKipcclxuICogQW4gYWxsb2NhdG9yIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xBbGxvY2F0b3JcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgc2xpY2VyIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xTbGljZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU3RhcnQgb2Zmc2V0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgRW5kIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyIHNsaWNlXHJcbiAqIEB0aGlzIHtVaW50OEFycmF5fVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBIGdlbmVyYWwgcHVycG9zZSBidWZmZXIgcG9vbC5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7UG9vbEFsbG9jYXRvcn0gYWxsb2MgQWxsb2NhdG9yXHJcbiAqIEBwYXJhbSB7UG9vbFNsaWNlcn0gc2xpY2UgU2xpY2VyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT04MTkyXSBTbGFiIHNpemVcclxuICogQHJldHVybnMge1Bvb2xBbGxvY2F0b3J9IFBvb2xlZCBhbGxvY2F0b3JcclxuICovXHJcbmZ1bmN0aW9uIHBvb2woYWxsb2MsIHNsaWNlLCBzaXplKSB7XHJcbiAgICB2YXIgU0laRSAgID0gc2l6ZSB8fCA4MTkyO1xyXG4gICAgdmFyIE1BWCAgICA9IFNJWkUgPj4+IDE7XHJcbiAgICB2YXIgc2xhYiAgID0gbnVsbDtcclxuICAgIHZhciBvZmZzZXQgPSBTSVpFO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBvb2xfYWxsb2Moc2l6ZSkge1xyXG4gICAgICAgIGlmIChzaXplIDwgMSB8fCBzaXplID4gTUFYKVxyXG4gICAgICAgICAgICByZXR1cm4gYWxsb2Moc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCArIHNpemUgPiBTSVpFKSB7XHJcbiAgICAgICAgICAgIHNsYWIgPSBhbGxvYyhTSVpFKTtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ1ZiA9IHNsaWNlLmNhbGwoc2xhYiwgb2Zmc2V0LCBvZmZzZXQgKz0gc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAmIDcpIC8vIGFsaWduIHRvIDMyIGJpdFxyXG4gICAgICAgICAgICBvZmZzZXQgPSAob2Zmc2V0IHwgNykgKyAxO1xyXG4gICAgICAgIHJldHVybiBidWY7XHJcbiAgICB9O1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIEEgbWluaW1hbCBVVEY4IGltcGxlbWVudGF0aW9uIGZvciBudW1iZXIgYXJyYXlzLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG52YXIgdXRmOCA9IGV4cG9ydHM7XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgVVRGOCBieXRlIGxlbmd0aCBvZiBhIHN0cmluZy5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmdcclxuICogQHJldHVybnMge251bWJlcn0gQnl0ZSBsZW5ndGhcclxuICovXHJcbnV0ZjgubGVuZ3RoID0gZnVuY3Rpb24gdXRmOF9sZW5ndGgoc3RyaW5nKSB7XHJcbiAgICB2YXIgbGVuID0gMCxcclxuICAgICAgICBjID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KVxyXG4gICAgICAgICAgICBsZW4gKz0gMTtcclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OClcclxuICAgICAgICAgICAgbGVuICs9IDI7XHJcbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweEZDMDApID09PSAweEQ4MDAgJiYgKHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4RkMwMCkgPT09IDB4REMwMCkge1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGxlbiArPSA0O1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICBsZW4gKz0gMztcclxuICAgIH1cclxuICAgIHJldHVybiBsZW47XHJcbn07XHJcblxyXG4vKipcclxuICogUmVhZHMgVVRGOCBieXRlcyBhcyBhIHN0cmluZy5cclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgU291cmNlIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU291cmNlIHN0YXJ0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgU291cmNlIGVuZFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBTdHJpbmcgcmVhZFxyXG4gKi9cclxudXRmOC5yZWFkID0gZnVuY3Rpb24gdXRmOF9yZWFkKGJ1ZmZlciwgc3RhcnQsIGVuZCkge1xyXG4gICAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xyXG4gICAgaWYgKGxlbiA8IDEpXHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB2YXIgcGFydHMgPSBudWxsLFxyXG4gICAgICAgIGNodW5rID0gW10sXHJcbiAgICAgICAgaSA9IDAsIC8vIGNoYXIgb2Zmc2V0XHJcbiAgICAgICAgdDsgICAgIC8vIHRlbXBvcmFyeVxyXG4gICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XHJcbiAgICAgICAgdCA9IGJ1ZmZlcltzdGFydCsrXTtcclxuICAgICAgICBpZiAodCA8IDEyOClcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9IHQ7XHJcbiAgICAgICAgZWxzZSBpZiAodCA+IDE5MSAmJiB0IDwgMjI0KVxyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gKHQgJiAzMSkgPDwgNiB8IGJ1ZmZlcltzdGFydCsrXSAmIDYzO1xyXG4gICAgICAgIGVsc2UgaWYgKHQgPiAyMzkgJiYgdCA8IDM2NSkge1xyXG4gICAgICAgICAgICB0ID0gKCh0ICYgNykgPDwgMTggfCAoYnVmZmVyW3N0YXJ0KytdICYgNjMpIDw8IDEyIHwgKGJ1ZmZlcltzdGFydCsrXSAmIDYzKSA8PCA2IHwgYnVmZmVyW3N0YXJ0KytdICYgNjMpIC0gMHgxMDAwMDtcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9IDB4RDgwMCArICh0ID4+IDEwKTtcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9IDB4REMwMCArICh0ICYgMTAyMyk7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAodCAmIDE1KSA8PCAxMiB8IChidWZmZXJbc3RhcnQrK10gJiA2MykgPDwgNiB8IGJ1ZmZlcltzdGFydCsrXSAmIDYzO1xyXG4gICAgICAgIGlmIChpID4gODE5MSkge1xyXG4gICAgICAgICAgICAocGFydHMgfHwgKHBhcnRzID0gW10pKS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuaykpO1xyXG4gICAgICAgICAgICBpID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocGFydHMpIHtcclxuICAgICAgICBpZiAoaSlcclxuICAgICAgICAgICAgcGFydHMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmsuc2xpY2UoMCwgaSkpKTtcclxuICAgICAgICByZXR1cm4gcGFydHMuam9pbihcIlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmsuc2xpY2UoMCwgaSkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhIHN0cmluZyBhcyBVVEY4IGJ5dGVzLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFNvdXJjZSBzdHJpbmdcclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgRGVzdGluYXRpb24gYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgRGVzdGluYXRpb24gb2Zmc2V0XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEJ5dGVzIHdyaXR0ZW5cclxuICovXHJcbnV0Zjgud3JpdGUgPSBmdW5jdGlvbiB1dGY4X3dyaXRlKHN0cmluZywgYnVmZmVyLCBvZmZzZXQpIHtcclxuICAgIHZhciBzdGFydCA9IG9mZnNldCxcclxuICAgICAgICBjMSwgLy8gY2hhcmFjdGVyIDFcclxuICAgICAgICBjMjsgLy8gY2hhcmFjdGVyIDJcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgYzEgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYzEgPCAxMjgpIHtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYzEgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiA2ICAgICAgIHwgMTkyO1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgICAgICAgJiA2MyB8IDEyODtcclxuICAgICAgICB9IGVsc2UgaWYgKChjMSAmIDB4RkMwMCkgPT09IDB4RDgwMCAmJiAoKGMyID0gc3RyaW5nLmNoYXJDb2RlQXQoaSArIDEpKSAmIDB4RkMwMCkgPT09IDB4REMwMCkge1xyXG4gICAgICAgICAgICBjMSA9IDB4MTAwMDAgKyAoKGMxICYgMHgwM0ZGKSA8PCAxMCkgKyAoYzIgJiAweDAzRkYpO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiAxOCAgICAgIHwgMjQwO1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTIgJiA2MyB8IDEyODtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAgICAgICAmIDYzIHwgMTI4O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiAxMiAgICAgIHwgMjI0O1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gNiAgJiA2MyB8IDEyODtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxICAgICAgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9mZnNldCAtIHN0YXJ0O1xyXG59O1xyXG4iLCIvLyBmdWxsIGxpYnJhcnkgZW50cnkgcG9pbnQuXG5cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9zcmMvaW5kZXhcIik7XG4iLCIvLyBsaWdodCBsaWJyYXJ5IGVudHJ5IHBvaW50LlxuXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vc3JjL2luZGV4LWxpZ2h0XCIpOyIsIi8vIG1pbmltYWwgbGlicmFyeSBlbnRyeSBwb2ludC5cblxuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3NyYy9pbmRleC1taW5pbWFsXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGNvbW1vbjtcblxudmFyIGNvbW1vblJlID0gL1xcL3xcXC4vO1xuXG4vKipcbiAqIFByb3ZpZGVzIGNvbW1vbiB0eXBlIGRlZmluaXRpb25zLlxuICogQ2FuIGFsc28gYmUgdXNlZCB0byBwcm92aWRlIGFkZGl0aW9uYWwgZ29vZ2xlIHR5cGVzIG9yIHlvdXIgb3duIGN1c3RvbSB0eXBlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFNob3J0IG5hbWUgYXMgaW4gYGdvb2dsZS9wcm90b2J1Zi9bbmFtZV0ucHJvdG9gIG9yIGZ1bGwgZmlsZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBqc29uIEpTT04gZGVmaW5pdGlvbiB3aXRoaW4gYGdvb2dsZS5wcm90b2J1ZmAgaWYgYSBzaG9ydCBuYW1lLCBvdGhlcndpc2UgdGhlIGZpbGUncyByb290IGRlZmluaXRpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAcHJvcGVydHkge0lOYW1lc3BhY2V9IGdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG8gQW55XG4gKiBAcHJvcGVydHkge0lOYW1lc3BhY2V9IGdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5wcm90byBEdXJhdGlvblxuICogQHByb3BlcnR5IHtJTmFtZXNwYWNlfSBnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8gRW1wdHlcbiAqIEBwcm9wZXJ0eSB7SU5hbWVzcGFjZX0gZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21hc2sucHJvdG8gRmllbGRNYXNrXG4gKiBAcHJvcGVydHkge0lOYW1lc3BhY2V9IGdvb2dsZS9wcm90b2J1Zi9zdHJ1Y3QucHJvdG8gU3RydWN0LCBWYWx1ZSwgTnVsbFZhbHVlIGFuZCBMaXN0VmFsdWVcbiAqIEBwcm9wZXJ0eSB7SU5hbWVzcGFjZX0gZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byBUaW1lc3RhbXBcbiAqIEBwcm9wZXJ0eSB7SU5hbWVzcGFjZX0gZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIFdyYXBwZXJzXG4gKiBAZXhhbXBsZVxuICogLy8gbWFudWFsbHkgcHJvdmlkZXMgZGVzY3JpcHRvci5wcm90byAoYXNzdW1lcyBnb29nbGUvcHJvdG9idWYvIG5hbWVzcGFjZSBhbmQgLnByb3RvIGV4dGVuc2lvbilcbiAqIHByb3RvYnVmLmNvbW1vbihcImRlc2NyaXB0b3JcIiwgZGVzY3JpcHRvckpzb24pO1xuICpcbiAqIC8vIG1hbnVhbGx5IHByb3ZpZGVzIGEgY3VzdG9tIGRlZmluaXRpb24gKHVzZXMgbXkuZm9vIG5hbWVzcGFjZSlcbiAqIHByb3RvYnVmLmNvbW1vbihcIm15L2Zvby9iYXIucHJvdG9cIiwgbXlGb29CYXJKc29uKTtcbiAqL1xuZnVuY3Rpb24gY29tbW9uKG5hbWUsIGpzb24pIHtcbiAgICBpZiAoIWNvbW1vblJlLnRlc3QobmFtZSkpIHtcbiAgICAgICAgbmFtZSA9IFwiZ29vZ2xlL3Byb3RvYnVmL1wiICsgbmFtZSArIFwiLnByb3RvXCI7XG4gICAgICAgIGpzb24gPSB7IG5lc3RlZDogeyBnb29nbGU6IHsgbmVzdGVkOiB7IHByb3RvYnVmOiB7IG5lc3RlZDoganNvbiB9IH0gfSB9IH07XG4gICAgfVxuICAgIGNvbW1vbltuYW1lXSA9IGpzb247XG59XG5cbi8vIE5vdCBwcm92aWRlZCBiZWNhdXNlIG9mIGxpbWl0ZWQgdXNlIChmZWVsIGZyZWUgdG8gZGlzY3VzcyBvciB0byBwcm92aWRlIHlvdXJzZWxmKTpcbi8vXG4vLyBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90b1xuLy8gZ29vZ2xlL3Byb3RvYnVmL3NvdXJjZV9jb250ZXh0LnByb3RvXG4vLyBnb29nbGUvcHJvdG9idWYvdHlwZS5wcm90b1xuLy9cbi8vIFN0cmlwcGVkIGFuZCBwcmUtcGFyc2VkIHZlcnNpb25zIG9mIHRoZXNlIG5vbi1idW5kbGVkIGZpbGVzIGFyZSBpbnN0ZWFkIGF2YWlsYWJsZSBhcyBwYXJ0IG9mXG4vLyB0aGUgcmVwb3NpdG9yeSBvciBwYWNrYWdlIHdpdGhpbiB0aGUgZ29vZ2xlL3Byb3RvYnVmIGRpcmVjdG9yeS5cblxuY29tbW9uKFwiYW55XCIsIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuQW55IG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJQW55XG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3R5cGVVcmxdXG4gICAgICogQHByb3BlcnR5IHtVaW50OEFycmF5fSBbYnl0ZXNdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIEFueToge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIHR5cGVfdXJsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIGlkOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxudmFyIHRpbWVUeXBlO1xuXG5jb21tb24oXCJkdXJhdGlvblwiLCB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJRHVyYXRpb25cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd9IFtzZWNvbmRzXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbmFub3NdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIER1cmF0aW9uOiB0aW1lVHlwZSA9IHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBzZWNvbmRzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbnQ2NFwiLFxuICAgICAgICAgICAgICAgIGlkOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFub3M6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImludDMyXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5jb21tb24oXCJ0aW1lc3RhbXBcIiwge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElUaW1lc3RhbXBcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd9IFtzZWNvbmRzXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbmFub3NdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIFRpbWVzdGFtcDogdGltZVR5cGVcbn0pO1xuXG5jb21tb24oXCJlbXB0eVwiLCB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkVtcHR5IG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJRW1wdHlcbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXG4gICAgICovXG4gICAgRW1wdHk6IHtcbiAgICAgICAgZmllbGRzOiB7fVxuICAgIH1cbn0pO1xuXG5jb21tb24oXCJzdHJ1Y3RcIiwge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElTdHJ1Y3RcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsSVZhbHVlPn0gW2ZpZWxkc11cbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXG4gICAgICovXG4gICAgU3RydWN0OiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAga2V5VHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlZhbHVlXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLlZhbHVlIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJVmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBba2luZF1cbiAgICAgKiBAcHJvcGVydHkgezB9IFtudWxsVmFsdWVdXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtudW1iZXJWYWx1ZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3N0cmluZ1ZhbHVlXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Jvb2xWYWx1ZV1cbiAgICAgKiBAcHJvcGVydHkge0lTdHJ1Y3R9IFtzdHJ1Y3RWYWx1ZV1cbiAgICAgKiBAcHJvcGVydHkge0lMaXN0VmFsdWV9IFtsaXN0VmFsdWVdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIFZhbHVlOiB7XG4gICAgICAgIG9uZW9mczoge1xuICAgICAgICAgICAga2luZDoge1xuICAgICAgICAgICAgICAgIG9uZW9mOiBbXG4gICAgICAgICAgICAgICAgICAgIFwibnVsbFZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibnVtYmVyVmFsdWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdWYWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImJvb2xWYWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInN0cnVjdFZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibGlzdFZhbHVlXCJcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbnVsbFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJOdWxsVmFsdWVcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG51bWJlclZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJkb3VibGVcIixcbiAgICAgICAgICAgICAgICBpZDogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cmluZ1ZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBpZDogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvb2xWYWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICAgIGlkOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RydWN0VmFsdWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlN0cnVjdFwiLFxuICAgICAgICAgICAgICAgIGlkOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGlzdFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJMaXN0VmFsdWVcIixcbiAgICAgICAgICAgICAgICBpZDogNlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIE51bGxWYWx1ZToge1xuICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIE5VTExfVkFMVUU6IDBcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkxpc3RWYWx1ZSBtZXNzYWdlLlxuICAgICAqIEBpbnRlcmZhY2UgSUxpc3RWYWx1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtBcnJheS48SVZhbHVlPn0gW3ZhbHVlc11cbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXG4gICAgICovXG4gICAgTGlzdFZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgICAgcnVsZTogXCJyZXBlYXRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiVmFsdWVcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmNvbW1vbihcIndyYXBwZXJzXCIsIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElEb3VibGVWYWx1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFt2YWx1ZV1cbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXG4gICAgICovXG4gICAgRG91YmxlVmFsdWU6IHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZG91YmxlXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElGbG9hdFZhbHVlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW3ZhbHVlXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBGbG9hdFZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImZsb2F0XCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElJbnQ2NFZhbHVlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfSBbdmFsdWVdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIEludDY0VmFsdWU6IHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW50NjRcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuVUludDY0VmFsdWUgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElVSW50NjRWYWx1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ30gW3ZhbHVlXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBVSW50NjRWYWx1ZToge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50NjRcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSBtZXNzYWdlLlxuICAgICAqIEBpbnRlcmZhY2UgSUludDMyVmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdmFsdWVdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIEludDMyVmFsdWU6IHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW50MzJcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuVUludDMyVmFsdWUgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElVSW50MzJWYWx1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFt2YWx1ZV1cbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXG4gICAgICovXG4gICAgVUludDMyVmFsdWU6IHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDMyXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZSBtZXNzYWdlLlxuICAgICAqIEBpbnRlcmZhY2UgSUJvb2xWYWx1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbdmFsdWVdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIEJvb2xWYWx1ZToge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJU3RyaW5nVmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdmFsdWVdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIFN0cmluZ1ZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIGlkOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5CeXRlc1ZhbHVlIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJQnl0ZXNWYWx1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtVaW50OEFycmF5fSBbdmFsdWVdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIEJ5dGVzVmFsdWU6IHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmNvbW1vbihcImZpZWxkX21hc2tcIiwge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2sgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElEb3VibGVWYWx1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFt2YWx1ZV1cbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXG4gICAgICovXG4gICAgRmllbGRNYXNrOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgcGF0aHM6IHtcbiAgICAgICAgICAgICAgICBydWxlOiBcInJlcGVhdGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogR2V0cyB0aGUgcm9vdCBkZWZpbml0aW9uIG9mIHRoZSBzcGVjaWZpZWQgY29tbW9uIHByb3RvIGZpbGUuXG4gKlxuICogQnVuZGxlZCBkZWZpbml0aW9ucyBhcmU6XG4gKiAtIGdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG9cbiAqIC0gZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvXG4gKiAtIGdvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90b1xuICogLSBnb29nbGUvcHJvdG9idWYvZmllbGRfbWFzay5wcm90b1xuICogLSBnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvXG4gKiAtIGdvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG9cbiAqIC0gZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGUgUHJvdG8gZmlsZSBuYW1lXG4gKiBAcmV0dXJucyB7SU5hbWVzcGFjZXxudWxsfSBSb290IGRlZmluaXRpb24gb3IgYG51bGxgIGlmIG5vdCBkZWZpbmVkXG4gKi9cbmNvbW1vbi5nZXQgPSBmdW5jdGlvbiBnZXQoZmlsZSkge1xuICAgIHJldHVybiBjb21tb25bZmlsZV0gfHwgbnVsbDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogUnVudGltZSBtZXNzYWdlIGZyb20vdG8gcGxhaW4gb2JqZWN0IGNvbnZlcnRlcnMuXG4gKiBAbmFtZXNwYWNlXG4gKi9cbnZhciBjb252ZXJ0ZXIgPSBleHBvcnRzO1xuXG52YXIgRW51bSA9IHJlcXVpcmUoXCIuL2VudW1cIiksXG4gICAgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGFydGlhbCB2YWx1ZSBmcm9tT2JqZWN0IGNvbnZldGVyLlxuICogQHBhcmFtIHtDb2RlZ2VufSBnZW4gQ29kZWdlbiBpbnN0YW5jZVxuICogQHBhcmFtIHtGaWVsZH0gZmllbGQgUmVmbGVjdGVkIGZpZWxkXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJbmRleCBGaWVsZCBpbmRleFxuICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgcmVmZXJlbmNlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiBnZW5WYWx1ZVBhcnRpYWxfZnJvbU9iamVjdChnZW4sIGZpZWxkLCBmaWVsZEluZGV4LCBwcm9wKSB7XG4gICAgdmFyIGRlZmF1bHRBbHJlYWR5RW1pdHRlZCA9IGZhbHNlO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbiAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlKSB7XG4gICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSB7IGdlblxuICAgICAgICAgICAgKFwic3dpdGNoKGQlcyl7XCIsIHByb3ApO1xuICAgICAgICAgICAgZm9yICh2YXIgdmFsdWVzID0gZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlcywga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIC8vIGVudW0gdW5rbm93biB2YWx1ZXMgcGFzc3Rocm91Z2hcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2tleXNbaV1dID09PSBmaWVsZC50eXBlRGVmYXVsdCAmJiAhZGVmYXVsdEFscmVhZHlFbWl0dGVkKSB7IGdlblxuICAgICAgICAgICAgICAgICAgICAoXCJkZWZhdWx0OlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKFwiaWYodHlwZW9mKGQlcyk9PT1cXFwibnVtYmVyXFxcIil7bSVzPWQlczticmVha31cIiwgcHJvcCwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmllbGQucmVwZWF0ZWQpIGdlbiAvLyBmYWxsYmFjayB0byBkZWZhdWx0IHZhbHVlIG9ubHkgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcnJheXMsIHRvIGF2b2lkIGxlYXZpbmcgaG9sZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAoXCJicmVha1wiKTsgICAgICAgICAgIC8vIGZvciBub24tcmVwZWF0ZWQgZmllbGRzLCBqdXN0IGlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0QWxyZWFkeUVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAoXCJjYXNlJWo6XCIsIGtleXNbaV0pXG4gICAgICAgICAgICAgICAgKFwiY2FzZSAlaTpcIiwgdmFsdWVzW2tleXNbaV1dKVxuICAgICAgICAgICAgICAgICAgICAoXCJtJXM9JWpcIiwgcHJvcCwgdmFsdWVzW2tleXNbaV1dKVxuICAgICAgICAgICAgICAgICAgICAoXCJicmVha1wiKTtcbiAgICAgICAgICAgIH0gZ2VuXG4gICAgICAgICAgICAoXCJ9XCIpO1xuICAgICAgICB9IGVsc2UgZ2VuXG4gICAgICAgICAgICAoXCJpZih0eXBlb2YgZCVzIT09XFxcIm9iamVjdFxcXCIpXCIsIHByb3ApXG4gICAgICAgICAgICAgICAgKFwidGhyb3cgVHlwZUVycm9yKCVqKVwiLCBmaWVsZC5mdWxsTmFtZSArIFwiOiBvYmplY3QgZXhwZWN0ZWRcIilcbiAgICAgICAgICAgIChcIm0lcz10eXBlc1slaV0uZnJvbU9iamVjdChkJXMpXCIsIHByb3AsIGZpZWxkSW5kZXgsIHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpc1Vuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImRvdWJsZVwiOlxuICAgICAgICAgICAgY2FzZSBcImZsb2F0XCI6IGdlblxuICAgICAgICAgICAgICAgIChcIm0lcz1OdW1iZXIoZCVzKVwiLCBwcm9wLCBwcm9wKTsgLy8gYWxzbyBjYXRjaGVzIFwiTmFOXCIsIFwiSW5maW5pdHlcIlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInVpbnQzMlwiOlxuICAgICAgICAgICAgY2FzZSBcImZpeGVkMzJcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwibSVzPWQlcz4+PjBcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaW50MzJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzaW50MzJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzZml4ZWQzMlwiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJtJXM9ZCVzfDBcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgICAgICAgICAgaXNVbnNpZ25lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgICAgICAgICBjYXNlIFwiaW50NjRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzaW50NjRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJmaXhlZDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2ZpeGVkNjRcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwiaWYodXRpbC5Mb25nKVwiKVxuICAgICAgICAgICAgICAgICAgICAoXCIobSVzPXV0aWwuTG9uZy5mcm9tVmFsdWUoZCVzKSkudW5zaWduZWQ9JWpcIiwgcHJvcCwgcHJvcCwgaXNVbnNpZ25lZClcbiAgICAgICAgICAgICAgICAoXCJlbHNlIGlmKHR5cGVvZiBkJXM9PT1cXFwic3RyaW5nXFxcIilcIiwgcHJvcClcbiAgICAgICAgICAgICAgICAgICAgKFwibSVzPXBhcnNlSW50KGQlcywxMClcIiwgcHJvcCwgcHJvcClcbiAgICAgICAgICAgICAgICAoXCJlbHNlIGlmKHR5cGVvZiBkJXM9PT1cXFwibnVtYmVyXFxcIilcIiwgcHJvcClcbiAgICAgICAgICAgICAgICAgICAgKFwibSVzPWQlc1wiLCBwcm9wLCBwcm9wKVxuICAgICAgICAgICAgICAgIChcImVsc2UgaWYodHlwZW9mIGQlcz09PVxcXCJvYmplY3RcXFwiKVwiLCBwcm9wKVxuICAgICAgICAgICAgICAgICAgICAoXCJtJXM9bmV3IHV0aWwuTG9uZ0JpdHMoZCVzLmxvdz4+PjAsZCVzLmhpZ2g+Pj4wKS50b051bWJlciglcylcIiwgcHJvcCwgcHJvcCwgcHJvcCwgaXNVbnNpZ25lZCA/IFwidHJ1ZVwiIDogXCJcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYnl0ZXNcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwiaWYodHlwZW9mIGQlcz09PVxcXCJzdHJpbmdcXFwiKVwiLCBwcm9wKVxuICAgICAgICAgICAgICAgICAgICAoXCJ1dGlsLmJhc2U2NC5kZWNvZGUoZCVzLG0lcz11dGlsLm5ld0J1ZmZlcih1dGlsLmJhc2U2NC5sZW5ndGgoZCVzKSksMClcIiwgcHJvcCwgcHJvcCwgcHJvcClcbiAgICAgICAgICAgICAgICAoXCJlbHNlIGlmKGQlcy5sZW5ndGggPj0gMClcIiwgcHJvcClcbiAgICAgICAgICAgICAgICAgICAgKFwibSVzPWQlc1wiLCBwcm9wLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwibSVzPVN0cmluZyhkJXMpXCIsIHByb3AsIHByb3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJvb2xcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwibSVzPUJvb2xlYW4oZCVzKVwiLCBwcm9wLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8qIGRlZmF1bHQ6IGdlblxuICAgICAgICAgICAgICAgIChcIm0lcz1kJXNcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7ICovXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGdlbjtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBwbGFpbiBvYmplY3QgdG8gcnVudGltZSBtZXNzYWdlIGNvbnZlcnRlciBzcGVjaWZpYyB0byB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UgdHlwZS5cbiAqIEBwYXJhbSB7VHlwZX0gbXR5cGUgTWVzc2FnZSB0eXBlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICovXG5jb252ZXJ0ZXIuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QobXR5cGUpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSwgYmxvY2stc2NvcGVkLXZhciwgbm8tcmVkZWNsYXJlICovXG4gICAgdmFyIGZpZWxkcyA9IG10eXBlLmZpZWxkc0FycmF5O1xuICAgIHZhciBnZW4gPSB1dGlsLmNvZGVnZW4oW1wiZFwiXSwgbXR5cGUubmFtZSArIFwiJGZyb21PYmplY3RcIilcbiAgICAoXCJpZihkIGluc3RhbmNlb2YgdGhpcy5jdG9yKVwiKVxuICAgICAgICAoXCJyZXR1cm4gZFwiKTtcbiAgICBpZiAoIWZpZWxkcy5sZW5ndGgpIHJldHVybiBnZW5cbiAgICAoXCJyZXR1cm4gbmV3IHRoaXMuY3RvclwiKTtcbiAgICBnZW5cbiAgICAoXCJ2YXIgbT1uZXcgdGhpcy5jdG9yXCIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBmaWVsZCAgPSBmaWVsZHNbaV0ucmVzb2x2ZSgpLFxuICAgICAgICAgICAgcHJvcCAgID0gdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKTtcblxuICAgICAgICAvLyBNYXAgZmllbGRzXG4gICAgICAgIGlmIChmaWVsZC5tYXApIHsgZ2VuXG4gICAgKFwiaWYoZCVzKXtcIiwgcHJvcClcbiAgICAgICAgKFwiaWYodHlwZW9mIGQlcyE9PVxcXCJvYmplY3RcXFwiKVwiLCBwcm9wKVxuICAgICAgICAgICAgKFwidGhyb3cgVHlwZUVycm9yKCVqKVwiLCBmaWVsZC5mdWxsTmFtZSArIFwiOiBvYmplY3QgZXhwZWN0ZWRcIilcbiAgICAgICAgKFwibSVzPXt9XCIsIHByb3ApXG4gICAgICAgIChcImZvcih2YXIga3M9T2JqZWN0LmtleXMoZCVzKSxpPTA7aTxrcy5sZW5ndGg7KytpKXtcIiwgcHJvcCk7XG4gICAgICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfZnJvbU9iamVjdChnZW4sIGZpZWxkLCAvKiBub3Qgc29ydGVkICovIGksIHByb3AgKyBcIltrc1tpXV1cIilcbiAgICAgICAgKFwifVwiKVxuICAgIChcIn1cIik7XG5cbiAgICAgICAgLy8gUmVwZWF0ZWQgZmllbGRzXG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIHsgZ2VuXG4gICAgKFwiaWYoZCVzKXtcIiwgcHJvcClcbiAgICAgICAgKFwiaWYoIUFycmF5LmlzQXJyYXkoZCVzKSlcIiwgcHJvcClcbiAgICAgICAgICAgIChcInRocm93IFR5cGVFcnJvciglailcIiwgZmllbGQuZnVsbE5hbWUgKyBcIjogYXJyYXkgZXhwZWN0ZWRcIilcbiAgICAgICAgKFwibSVzPVtdXCIsIHByb3ApXG4gICAgICAgIChcImZvcih2YXIgaT0wO2k8ZCVzLmxlbmd0aDsrK2kpe1wiLCBwcm9wKTtcbiAgICAgICAgICAgIGdlblZhbHVlUGFydGlhbF9mcm9tT2JqZWN0KGdlbiwgZmllbGQsIC8qIG5vdCBzb3J0ZWQgKi8gaSwgcHJvcCArIFwiW2ldXCIpXG4gICAgICAgIChcIn1cIilcbiAgICAoXCJ9XCIpO1xuXG4gICAgICAgIC8vIE5vbi1yZXBlYXRlZCBmaWVsZHNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghKGZpZWxkLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0pKSBnZW4gLy8gbm8gbmVlZCB0byB0ZXN0IGZvciBudWxsL3VuZGVmaW5lZCBpZiBhbiBlbnVtICh1c2VzIHN3aXRjaClcbiAgICAoXCJpZihkJXMhPW51bGwpe1wiLCBwcm9wKTsgLy8gIT09IHVuZGVmaW5lZCAmJiAhPT0gbnVsbFxuICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfZnJvbU9iamVjdChnZW4sIGZpZWxkLCAvKiBub3Qgc29ydGVkICovIGksIHByb3ApO1xuICAgICAgICAgICAgaWYgKCEoZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSkpIGdlblxuICAgIChcIn1cIik7XG4gICAgICAgIH1cbiAgICB9IHJldHVybiBnZW5cbiAgICAoXCJyZXR1cm4gbVwiKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGFydGlhbCB2YWx1ZSB0b09iamVjdCBjb252ZXJ0ZXIuXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBSZWZsZWN0ZWQgZmllbGRcbiAqIEBwYXJhbSB7bnVtYmVyfSBmaWVsZEluZGV4IEZpZWxkIGluZGV4XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSByZWZlcmVuY2VcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIGdlblZhbHVlUGFydGlhbF90b09iamVjdChnZW4sIGZpZWxkLCBmaWVsZEluZGV4LCBwcm9wKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xuICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUpIHtcbiAgICAgICAgaWYgKGZpZWxkLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0pIGdlblxuICAgICAgICAgICAgKFwiZCVzPW8uZW51bXM9PT1TdHJpbmc/KHR5cGVzWyVpXS52YWx1ZXNbbSVzXT09PXVuZGVmaW5lZD9tJXM6dHlwZXNbJWldLnZhbHVlc1ttJXNdKTptJXNcIiwgcHJvcCwgZmllbGRJbmRleCwgcHJvcCwgcHJvcCwgZmllbGRJbmRleCwgcHJvcCwgcHJvcCk7XG4gICAgICAgIGVsc2UgZ2VuXG4gICAgICAgICAgICAoXCJkJXM9dHlwZXNbJWldLnRvT2JqZWN0KG0lcyxvKVwiLCBwcm9wLCBmaWVsZEluZGV4LCBwcm9wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaXNVbnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJkb3VibGVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJmbG9hdFwiOiBnZW5cbiAgICAgICAgICAgIChcImQlcz1vLmpzb24mJiFpc0Zpbml0ZShtJXMpP1N0cmluZyhtJXMpOm0lc1wiLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ1aW50NjRcIjpcbiAgICAgICAgICAgICAgICBpc1Vuc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgXCJpbnQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInNpbnQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcImZpeGVkNjRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzZml4ZWQ2NFwiOiBnZW5cbiAgICAgICAgICAgIChcImlmKHR5cGVvZiBtJXM9PT1cXFwibnVtYmVyXFxcIilcIiwgcHJvcClcbiAgICAgICAgICAgICAgICAoXCJkJXM9by5sb25ncz09PVN0cmluZz9TdHJpbmcobSVzKTptJXNcIiwgcHJvcCwgcHJvcCwgcHJvcClcbiAgICAgICAgICAgIChcImVsc2VcIikgLy8gTG9uZy1saWtlXG4gICAgICAgICAgICAgICAgKFwiZCVzPW8ubG9uZ3M9PT1TdHJpbmc/dXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0lcyk6by5sb25ncz09PU51bWJlcj9uZXcgdXRpbC5Mb25nQml0cyhtJXMubG93Pj4+MCxtJXMuaGlnaD4+PjApLnRvTnVtYmVyKCVzKTptJXNcIiwgcHJvcCwgcHJvcCwgcHJvcCwgcHJvcCwgaXNVbnNpZ25lZCA/IFwidHJ1ZVwiOiBcIlwiLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJieXRlc1wiOiBnZW5cbiAgICAgICAgICAgIChcImQlcz1vLmJ5dGVzPT09U3RyaW5nP3V0aWwuYmFzZTY0LmVuY29kZShtJXMsMCxtJXMubGVuZ3RoKTpvLmJ5dGVzPT09QXJyYXk/QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobSVzKTptJXNcIiwgcHJvcCwgcHJvcCwgcHJvcCwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiBnZW5cbiAgICAgICAgICAgIChcImQlcz1tJXNcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGdlbjtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBydW50aW1lIG1lc3NhZ2UgdG8gcGxhaW4gb2JqZWN0IGNvbnZlcnRlciBzcGVjaWZpYyB0byB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UgdHlwZS5cbiAqIEBwYXJhbSB7VHlwZX0gbXR5cGUgTWVzc2FnZSB0eXBlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICovXG5jb252ZXJ0ZXIudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtdHlwZSkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbiAgICB2YXIgZmllbGRzID0gbXR5cGUuZmllbGRzQXJyYXkuc2xpY2UoKS5zb3J0KHV0aWwuY29tcGFyZUZpZWxkc0J5SWQpO1xuICAgIGlmICghZmllbGRzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIHV0aWwuY29kZWdlbigpKFwicmV0dXJuIHt9XCIpO1xuICAgIHZhciBnZW4gPSB1dGlsLmNvZGVnZW4oW1wibVwiLCBcIm9cIl0sIG10eXBlLm5hbWUgKyBcIiR0b09iamVjdFwiKVxuICAgIChcImlmKCFvKVwiKVxuICAgICAgICAoXCJvPXt9XCIpXG4gICAgKFwidmFyIGQ9e31cIik7XG5cbiAgICB2YXIgcmVwZWF0ZWRGaWVsZHMgPSBbXSxcbiAgICAgICAgbWFwRmllbGRzID0gW10sXG4gICAgICAgIG5vcm1hbEZpZWxkcyA9IFtdLFxuICAgICAgICBpID0gMDtcbiAgICBmb3IgKDsgaSA8IGZpZWxkcy5sZW5ndGg7ICsraSlcbiAgICAgICAgaWYgKCFmaWVsZHNbaV0ucGFydE9mKVxuICAgICAgICAgICAgKCBmaWVsZHNbaV0ucmVzb2x2ZSgpLnJlcGVhdGVkID8gcmVwZWF0ZWRGaWVsZHNcbiAgICAgICAgICAgIDogZmllbGRzW2ldLm1hcCA/IG1hcEZpZWxkc1xuICAgICAgICAgICAgOiBub3JtYWxGaWVsZHMpLnB1c2goZmllbGRzW2ldKTtcblxuICAgIGlmIChyZXBlYXRlZEZpZWxkcy5sZW5ndGgpIHsgZ2VuXG4gICAgKFwiaWYoby5hcnJheXN8fG8uZGVmYXVsdHMpe1wiKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlcGVhdGVkRmllbGRzLmxlbmd0aDsgKytpKSBnZW5cbiAgICAgICAgKFwiZCVzPVtdXCIsIHV0aWwuc2FmZVByb3AocmVwZWF0ZWRGaWVsZHNbaV0ubmFtZSkpO1xuICAgICAgICBnZW5cbiAgICAoXCJ9XCIpO1xuICAgIH1cblxuICAgIGlmIChtYXBGaWVsZHMubGVuZ3RoKSB7IGdlblxuICAgIChcImlmKG8ub2JqZWN0c3x8by5kZWZhdWx0cyl7XCIpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWFwRmllbGRzLmxlbmd0aDsgKytpKSBnZW5cbiAgICAgICAgKFwiZCVzPXt9XCIsIHV0aWwuc2FmZVByb3AobWFwRmllbGRzW2ldLm5hbWUpKTtcbiAgICAgICAgZ2VuXG4gICAgKFwifVwiKTtcbiAgICB9XG5cbiAgICBpZiAobm9ybWFsRmllbGRzLmxlbmd0aCkgeyBnZW5cbiAgICAoXCJpZihvLmRlZmF1bHRzKXtcIik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBub3JtYWxGaWVsZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBmaWVsZCA9IG5vcm1hbEZpZWxkc1tpXSxcbiAgICAgICAgICAgICAgICBwcm9wICA9IHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSk7XG4gICAgICAgICAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSkgZ2VuXG4gICAgICAgIChcImQlcz1vLmVudW1zPT09U3RyaW5nPyVqOiVqXCIsIHByb3AsIGZpZWxkLnJlc29sdmVkVHlwZS52YWx1ZXNCeUlkW2ZpZWxkLnR5cGVEZWZhdWx0XSwgZmllbGQudHlwZURlZmF1bHQpO1xuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQubG9uZykgZ2VuXG4gICAgICAgIChcImlmKHV0aWwuTG9uZyl7XCIpXG4gICAgICAgICAgICAoXCJ2YXIgbj1uZXcgdXRpbC5Mb25nKCVpLCVpLCVqKVwiLCBmaWVsZC50eXBlRGVmYXVsdC5sb3csIGZpZWxkLnR5cGVEZWZhdWx0LmhpZ2gsIGZpZWxkLnR5cGVEZWZhdWx0LnVuc2lnbmVkKVxuICAgICAgICAgICAgKFwiZCVzPW8ubG9uZ3M9PT1TdHJpbmc/bi50b1N0cmluZygpOm8ubG9uZ3M9PT1OdW1iZXI/bi50b051bWJlcigpOm5cIiwgcHJvcClcbiAgICAgICAgKFwifWVsc2VcIilcbiAgICAgICAgICAgIChcImQlcz1vLmxvbmdzPT09U3RyaW5nPyVqOiVpXCIsIHByb3AsIGZpZWxkLnR5cGVEZWZhdWx0LnRvU3RyaW5nKCksIGZpZWxkLnR5cGVEZWZhdWx0LnRvTnVtYmVyKCkpO1xuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQuYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXlEZWZhdWx0ID0gXCJbXCIgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmaWVsZC50eXBlRGVmYXVsdCkuam9pbihcIixcIikgKyBcIl1cIjtcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgKFwiaWYoby5ieXRlcz09PVN0cmluZylkJXM9JWpcIiwgcHJvcCwgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGZpZWxkLnR5cGVEZWZhdWx0KSlcbiAgICAgICAgKFwiZWxzZXtcIilcbiAgICAgICAgICAgIChcImQlcz0lc1wiLCBwcm9wLCBhcnJheURlZmF1bHQpXG4gICAgICAgICAgICAoXCJpZihvLmJ5dGVzIT09QXJyYXkpZCVzPXV0aWwubmV3QnVmZmVyKGQlcylcIiwgcHJvcCwgcHJvcClcbiAgICAgICAgKFwifVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSBnZW5cbiAgICAgICAgKFwiZCVzPSVqXCIsIHByb3AsIGZpZWxkLnR5cGVEZWZhdWx0KTsgLy8gYWxzbyBtZXNzYWdlcyAoPW51bGwpXG4gICAgICAgIH0gZ2VuXG4gICAgKFwifVwiKTtcbiAgICB9XG4gICAgdmFyIGhhc0tzMiA9IGZhbHNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGZpZWxkID0gZmllbGRzW2ldLFxuICAgICAgICAgICAgaW5kZXggPSBtdHlwZS5fZmllbGRzQXJyYXkuaW5kZXhPZihmaWVsZCksXG4gICAgICAgICAgICBwcm9wICA9IHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSk7XG4gICAgICAgIGlmIChmaWVsZC5tYXApIHtcbiAgICAgICAgICAgIGlmICghaGFzS3MyKSB7IGhhc0tzMiA9IHRydWU7IGdlblxuICAgIChcInZhciBrczJcIik7XG4gICAgICAgICAgICB9IGdlblxuICAgIChcImlmKG0lcyYmKGtzMj1PYmplY3Qua2V5cyhtJXMpKS5sZW5ndGgpe1wiLCBwcm9wLCBwcm9wKVxuICAgICAgICAoXCJkJXM9e31cIiwgcHJvcClcbiAgICAgICAgKFwiZm9yKHZhciBqPTA7ajxrczIubGVuZ3RoOysrail7XCIpO1xuICAgICAgICAgICAgZ2VuVmFsdWVQYXJ0aWFsX3RvT2JqZWN0KGdlbiwgZmllbGQsIC8qIHNvcnRlZCAqLyBpbmRleCwgcHJvcCArIFwiW2tzMltqXV1cIilcbiAgICAgICAgKFwifVwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5yZXBlYXRlZCkgeyBnZW5cbiAgICAoXCJpZihtJXMmJm0lcy5sZW5ndGgpe1wiLCBwcm9wLCBwcm9wKVxuICAgICAgICAoXCJkJXM9W11cIiwgcHJvcClcbiAgICAgICAgKFwiZm9yKHZhciBqPTA7ajxtJXMubGVuZ3RoOysrail7XCIsIHByb3ApO1xuICAgICAgICAgICAgZ2VuVmFsdWVQYXJ0aWFsX3RvT2JqZWN0KGdlbiwgZmllbGQsIC8qIHNvcnRlZCAqLyBpbmRleCwgcHJvcCArIFwiW2pdXCIpXG4gICAgICAgIChcIn1cIik7XG4gICAgICAgIH0gZWxzZSB7IGdlblxuICAgIChcImlmKG0lcyE9bnVsbCYmbS5oYXNPd25Qcm9wZXJ0eSglaikpe1wiLCBwcm9wLCBmaWVsZC5uYW1lKTsgLy8gIT09IHVuZGVmaW5lZCAmJiAhPT0gbnVsbFxuICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfdG9PYmplY3QoZ2VuLCBmaWVsZCwgLyogc29ydGVkICovIGluZGV4LCBwcm9wKTtcbiAgICAgICAgaWYgKGZpZWxkLnBhcnRPZikgZ2VuXG4gICAgICAgIChcImlmKG8ub25lb2ZzKVwiKVxuICAgICAgICAgICAgKFwiZCVzPSVqXCIsIHV0aWwuc2FmZVByb3AoZmllbGQucGFydE9mLm5hbWUpLCBmaWVsZC5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBnZW5cbiAgICAoXCJ9XCIpO1xuICAgIH1cbiAgICByZXR1cm4gZ2VuXG4gICAgKFwicmV0dXJuIGRcIik7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSwgYmxvY2stc2NvcGVkLXZhciwgbm8tcmVkZWNsYXJlICovXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZXI7XG5cbnZhciBFbnVtICAgID0gcmVxdWlyZShcIi4vZW51bVwiKSxcbiAgICB0eXBlcyAgID0gcmVxdWlyZShcIi4vdHlwZXNcIiksXG4gICAgdXRpbCAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbmZ1bmN0aW9uIG1pc3NpbmcoZmllbGQpIHtcbiAgICByZXR1cm4gXCJtaXNzaW5nIHJlcXVpcmVkICdcIiArIGZpZWxkLm5hbWUgKyBcIidcIjtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBkZWNvZGVyIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSB0eXBlLlxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZXIobXR5cGUpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xuICAgIHZhciBnZW4gPSB1dGlsLmNvZGVnZW4oW1wiclwiLCBcImxcIl0sIG10eXBlLm5hbWUgKyBcIiRkZWNvZGVcIilcbiAgICAoXCJpZighKHIgaW5zdGFuY2VvZiBSZWFkZXIpKVwiKVxuICAgICAgICAoXCJyPVJlYWRlci5jcmVhdGUocilcIilcbiAgICAoXCJ2YXIgYz1sPT09dW5kZWZpbmVkP3IubGVuOnIucG9zK2wsbT1uZXcgdGhpcy5jdG9yXCIgKyAobXR5cGUuZmllbGRzQXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGZpZWxkKSB7IHJldHVybiBmaWVsZC5tYXA7IH0pLmxlbmd0aCA/IFwiLGssdmFsdWVcIiA6IFwiXCIpKVxuICAgIChcIndoaWxlKHIucG9zPGMpe1wiKVxuICAgICAgICAoXCJ2YXIgdD1yLnVpbnQzMigpXCIpO1xuICAgIGlmIChtdHlwZS5ncm91cCkgZ2VuXG4gICAgICAgIChcImlmKCh0JjcpPT09NClcIilcbiAgICAgICAgICAgIChcImJyZWFrXCIpO1xuICAgIGdlblxuICAgICAgICAoXCJzd2l0Y2godD4+PjMpe1wiKTtcblxuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IC8qIGluaXRpYWxpemVzICovIG10eXBlLmZpZWxkc0FycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBmaWVsZCA9IG10eXBlLl9maWVsZHNBcnJheVtpXS5yZXNvbHZlKCksXG4gICAgICAgICAgICB0eXBlICA9IGZpZWxkLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0gPyBcImludDMyXCIgOiBmaWVsZC50eXBlLFxuICAgICAgICAgICAgcmVmICAgPSBcIm1cIiArIHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSk7IGdlblxuICAgICAgICAgICAgKFwiY2FzZSAlaToge1wiLCBmaWVsZC5pZCk7XG5cbiAgICAgICAgLy8gTWFwIGZpZWxkc1xuICAgICAgICBpZiAoZmllbGQubWFwKSB7IGdlblxuICAgICAgICAgICAgICAgIChcImlmKCVzPT09dXRpbC5lbXB0eU9iamVjdClcIiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCIlcz17fVwiLCByZWYpXG4gICAgICAgICAgICAgICAgKFwidmFyIGMyID0gci51aW50MzIoKStyLnBvc1wiKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVzLmRlZmF1bHRzW2ZpZWxkLmtleVR5cGVdICE9PSB1bmRlZmluZWQpIGdlblxuICAgICAgICAgICAgICAgIChcIms9JWpcIiwgdHlwZXMuZGVmYXVsdHNbZmllbGQua2V5VHlwZV0pO1xuICAgICAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgICAgICAoXCJrPW51bGxcIik7XG5cbiAgICAgICAgICAgIGlmICh0eXBlcy5kZWZhdWx0c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSBnZW5cbiAgICAgICAgICAgICAgICAoXCJ2YWx1ZT0lalwiLCB0eXBlcy5kZWZhdWx0c1t0eXBlXSk7XG4gICAgICAgICAgICBlbHNlIGdlblxuICAgICAgICAgICAgICAgIChcInZhbHVlPW51bGxcIik7XG5cbiAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgIChcIndoaWxlKHIucG9zPGMyKXtcIilcbiAgICAgICAgICAgICAgICAgICAgKFwidmFyIHRhZzI9ci51aW50MzIoKVwiKVxuICAgICAgICAgICAgICAgICAgICAoXCJzd2l0Y2godGFnMj4+PjMpe1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKFwiY2FzZSAxOiBrPXIuJXMoKTsgYnJlYWtcIiwgZmllbGQua2V5VHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIChcImNhc2UgMjpcIik7XG5cbiAgICAgICAgICAgIGlmICh0eXBlcy5iYXNpY1t0eXBlXSA9PT0gdW5kZWZpbmVkKSBnZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJ2YWx1ZT10eXBlc1slaV0uZGVjb2RlKHIsci51aW50MzIoKSlcIiwgaSk7IC8vIGNhbid0IGJlIGdyb3Vwc1xuICAgICAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJ2YWx1ZT1yLiVzKClcIiwgdHlwZSk7XG5cbiAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcImJyZWFrXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAoXCJkZWZhdWx0OlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcInIuc2tpcFR5cGUodGFnMiY3KVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcImJyZWFrXCIpXG4gICAgICAgICAgICAgICAgICAgIChcIn1cIilcbiAgICAgICAgICAgICAgICAoXCJ9XCIpO1xuXG4gICAgICAgICAgICBpZiAodHlwZXMubG9uZ1tmaWVsZC5rZXlUeXBlXSAhPT0gdW5kZWZpbmVkKSBnZW5cbiAgICAgICAgICAgICAgICAoXCIlc1t0eXBlb2Ygaz09PVxcXCJvYmplY3RcXFwiP3V0aWwubG9uZ1RvSGFzaChrKTprXT12YWx1ZVwiLCByZWYpO1xuICAgICAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgICAgICAoXCIlc1trXT12YWx1ZVwiLCByZWYpO1xuXG4gICAgICAgIC8vIFJlcGVhdGVkIGZpZWxkc1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLnJlcGVhdGVkKSB7IGdlblxuXG4gICAgICAgICAgICAgICAgKFwiaWYoISglcyYmJXMubGVuZ3RoKSlcIiwgcmVmLCByZWYpXG4gICAgICAgICAgICAgICAgICAgIChcIiVzPVtdXCIsIHJlZik7XG5cbiAgICAgICAgICAgIC8vIFBhY2thYmxlIChhbHdheXMgY2hlY2sgZm9yIGZvcndhcmQgYW5kIGJhY2t3YXJkIGNvbXBhdGlibGl0eSlcbiAgICAgICAgICAgIGlmICh0eXBlcy5wYWNrZWRbdHlwZV0gIT09IHVuZGVmaW5lZCkgZ2VuXG4gICAgICAgICAgICAgICAgKFwiaWYoKHQmNyk9PT0yKXtcIilcbiAgICAgICAgICAgICAgICAgICAgKFwidmFyIGMyPXIudWludDMyKCkrci5wb3NcIilcbiAgICAgICAgICAgICAgICAgICAgKFwid2hpbGUoci5wb3M8YzIpXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAoXCIlcy5wdXNoKHIuJXMoKSlcIiwgcmVmLCB0eXBlKVxuICAgICAgICAgICAgICAgIChcIn1lbHNlXCIpO1xuXG4gICAgICAgICAgICAvLyBOb24tcGFja2VkXG4gICAgICAgICAgICBpZiAodHlwZXMuYmFzaWNbdHlwZV0gPT09IHVuZGVmaW5lZCkgZ2VuKGZpZWxkLnJlc29sdmVkVHlwZS5ncm91cFxuICAgICAgICAgICAgICAgICAgICA/IFwiJXMucHVzaCh0eXBlc1slaV0uZGVjb2RlKHIpKVwiXG4gICAgICAgICAgICAgICAgICAgIDogXCIlcy5wdXNoKHR5cGVzWyVpXS5kZWNvZGUocixyLnVpbnQzMigpKSlcIiwgcmVmLCBpKTtcbiAgICAgICAgICAgIGVsc2UgZ2VuXG4gICAgICAgICAgICAgICAgICAgIChcIiVzLnB1c2goci4lcygpKVwiLCByZWYsIHR5cGUpO1xuXG4gICAgICAgIC8vIE5vbi1yZXBlYXRlZFxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVzLmJhc2ljW3R5cGVdID09PSB1bmRlZmluZWQpIGdlbihmaWVsZC5yZXNvbHZlZFR5cGUuZ3JvdXBcbiAgICAgICAgICAgICAgICA/IFwiJXM9dHlwZXNbJWldLmRlY29kZShyKVwiXG4gICAgICAgICAgICAgICAgOiBcIiVzPXR5cGVzWyVpXS5kZWNvZGUocixyLnVpbnQzMigpKVwiLCByZWYsIGkpO1xuICAgICAgICBlbHNlIGdlblxuICAgICAgICAgICAgICAgIChcIiVzPXIuJXMoKVwiLCByZWYsIHR5cGUpO1xuICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAoXCJicmVha1wiKVxuICAgICAgICAgICAgKFwifVwiKTtcbiAgICAgICAgLy8gVW5rbm93biBmaWVsZHNcbiAgICB9IGdlblxuICAgICAgICAgICAgKFwiZGVmYXVsdDpcIilcbiAgICAgICAgICAgICAgICAoXCJyLnNraXBUeXBlKHQmNylcIilcbiAgICAgICAgICAgICAgICAoXCJicmVha1wiKVxuXG4gICAgICAgIChcIn1cIilcbiAgICAoXCJ9XCIpO1xuXG4gICAgLy8gRmllbGQgcHJlc2VuY2VcbiAgICBmb3IgKGkgPSAwOyBpIDwgbXR5cGUuX2ZpZWxkc0FycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciByZmllbGQgPSBtdHlwZS5fZmllbGRzQXJyYXlbaV07XG4gICAgICAgIGlmIChyZmllbGQucmVxdWlyZWQpIGdlblxuICAgIChcImlmKCFtLmhhc093blByb3BlcnR5KCVqKSlcIiwgcmZpZWxkLm5hbWUpXG4gICAgICAgIChcInRocm93IHV0aWwuUHJvdG9jb2xFcnJvciglaix7aW5zdGFuY2U6bX0pXCIsIG1pc3NpbmcocmZpZWxkKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdlblxuICAgIChcInJldHVybiBtXCIpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBlbmNvZGVyO1xuXG52YXIgRW51bSAgICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIHR5cGVzICAgID0gcmVxdWlyZShcIi4vdHlwZXNcIiksXG4gICAgdXRpbCAgICAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBhcnRpYWwgbWVzc2FnZSB0eXBlIGVuY29kZXIuXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBSZWZsZWN0ZWQgZmllbGRcbiAqIEBwYXJhbSB7bnVtYmVyfSBmaWVsZEluZGV4IEZpZWxkIGluZGV4XG4gKiBAcGFyYW0ge3N0cmluZ30gcmVmIFZhcmlhYmxlIHJlZmVyZW5jZVxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gZ2VuVHlwZVBhcnRpYWwoZ2VuLCBmaWVsZCwgZmllbGRJbmRleCwgcmVmKSB7XG4gICAgcmV0dXJuIGZpZWxkLnJlc29sdmVkVHlwZS5ncm91cFxuICAgICAgICA/IGdlbihcInR5cGVzWyVpXS5lbmNvZGUoJXMsdy51aW50MzIoJWkpKS51aW50MzIoJWkpXCIsIGZpZWxkSW5kZXgsIHJlZiwgKGZpZWxkLmlkIDw8IDMgfCAzKSA+Pj4gMCwgKGZpZWxkLmlkIDw8IDMgfCA0KSA+Pj4gMClcbiAgICAgICAgOiBnZW4oXCJ0eXBlc1slaV0uZW5jb2RlKCVzLHcudWludDMyKCVpKS5mb3JrKCkpLmxkZWxpbSgpXCIsIGZpZWxkSW5kZXgsIHJlZiwgKGZpZWxkLmlkIDw8IDMgfCAyKSA+Pj4gMCk7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGFuIGVuY29kZXIgc3BlY2lmaWMgdG8gdGhlIHNwZWNpZmllZCBtZXNzYWdlIHR5cGUuXG4gKiBAcGFyYW0ge1R5cGV9IG10eXBlIE1lc3NhZ2UgdHlwZVxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gZW5jb2RlcihtdHlwZSkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbiAgICB2YXIgZ2VuID0gdXRpbC5jb2RlZ2VuKFtcIm1cIiwgXCJ3XCJdLCBtdHlwZS5uYW1lICsgXCIkZW5jb2RlXCIpXG4gICAgKFwiaWYoIXcpXCIpXG4gICAgICAgIChcInc9V3JpdGVyLmNyZWF0ZSgpXCIpO1xuXG4gICAgdmFyIGksIHJlZjtcblxuICAgIC8vIFwid2hlbiBhIG1lc3NhZ2UgaXMgc2VyaWFsaXplZCBpdHMga25vd24gZmllbGRzIHNob3VsZCBiZSB3cml0dGVuIHNlcXVlbnRpYWxseSBieSBmaWVsZCBudW1iZXJcIlxuICAgIHZhciBmaWVsZHMgPSAvKiBpbml0aWFsaXplcyAqLyBtdHlwZS5maWVsZHNBcnJheS5zbGljZSgpLnNvcnQodXRpbC5jb21wYXJlRmllbGRzQnlJZCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgZmllbGQgICAgPSBmaWVsZHNbaV0ucmVzb2x2ZSgpLFxuICAgICAgICAgICAgaW5kZXggICAgPSBtdHlwZS5fZmllbGRzQXJyYXkuaW5kZXhPZihmaWVsZCksXG4gICAgICAgICAgICB0eXBlICAgICA9IGZpZWxkLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0gPyBcImludDMyXCIgOiBmaWVsZC50eXBlLFxuICAgICAgICAgICAgd2lyZVR5cGUgPSB0eXBlcy5iYXNpY1t0eXBlXTtcbiAgICAgICAgICAgIHJlZiAgICAgID0gXCJtXCIgKyB1dGlsLnNhZmVQcm9wKGZpZWxkLm5hbWUpO1xuXG4gICAgICAgIC8vIE1hcCBmaWVsZHNcbiAgICAgICAgaWYgKGZpZWxkLm1hcCkge1xuICAgICAgICAgICAgZ2VuXG4gICAgKFwiaWYoJXMhPW51bGwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sJWopKXtcIiwgcmVmLCBmaWVsZC5uYW1lKSAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXG4gICAgICAgIChcImZvcih2YXIga3M9T2JqZWN0LmtleXMoJXMpLGk9MDtpPGtzLmxlbmd0aDsrK2kpe1wiLCByZWYpXG4gICAgICAgICAgICAoXCJ3LnVpbnQzMiglaSkuZm9yaygpLnVpbnQzMiglaSkuJXMoa3NbaV0pXCIsIChmaWVsZC5pZCA8PCAzIHwgMikgPj4+IDAsIDggfCB0eXBlcy5tYXBLZXlbZmllbGQua2V5VHlwZV0sIGZpZWxkLmtleVR5cGUpO1xuICAgICAgICAgICAgaWYgKHdpcmVUeXBlID09PSB1bmRlZmluZWQpIGdlblxuICAgICAgICAgICAgKFwidHlwZXNbJWldLmVuY29kZSglc1trc1tpXV0sdy51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCkubGRlbGltKClcIiwgaW5kZXgsIHJlZik7IC8vIGNhbid0IGJlIGdyb3Vwc1xuICAgICAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgIChcIi51aW50MzIoJWkpLiVzKCVzW2tzW2ldXSkubGRlbGltKClcIiwgMTYgfCB3aXJlVHlwZSwgdHlwZSwgcmVmKTtcbiAgICAgICAgICAgIGdlblxuICAgICAgICAoXCJ9XCIpXG4gICAgKFwifVwiKTtcblxuICAgICAgICAgICAgLy8gUmVwZWF0ZWQgZmllbGRzXG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIHsgZ2VuXG4gICAgKFwiaWYoJXMhPW51bGwmJiVzLmxlbmd0aCl7XCIsIHJlZiwgcmVmKTsgLy8gIT09IHVuZGVmaW5lZCAmJiAhPT0gbnVsbFxuXG4gICAgICAgICAgICAvLyBQYWNrZWQgcmVwZWF0ZWRcbiAgICAgICAgICAgIGlmIChmaWVsZC5wYWNrZWQgJiYgdHlwZXMucGFja2VkW3R5cGVdICE9PSB1bmRlZmluZWQpIHsgZ2VuXG5cbiAgICAgICAgKFwidy51aW50MzIoJWkpLmZvcmsoKVwiLCAoZmllbGQuaWQgPDwgMyB8IDIpID4+PiAwKVxuICAgICAgICAoXCJmb3IodmFyIGk9MDtpPCVzLmxlbmd0aDsrK2kpXCIsIHJlZilcbiAgICAgICAgICAgIChcIncuJXMoJXNbaV0pXCIsIHR5cGUsIHJlZilcbiAgICAgICAgKFwidy5sZGVsaW0oKVwiKTtcblxuICAgICAgICAgICAgLy8gTm9uLXBhY2tlZFxuICAgICAgICAgICAgfSBlbHNlIHsgZ2VuXG5cbiAgICAgICAgKFwiZm9yKHZhciBpPTA7aTwlcy5sZW5ndGg7KytpKVwiLCByZWYpO1xuICAgICAgICAgICAgICAgIGlmICh3aXJlVHlwZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgZ2VuVHlwZVBhcnRpYWwoZ2VuLCBmaWVsZCwgaW5kZXgsIHJlZiArIFwiW2ldXCIpO1xuICAgICAgICAgICAgICAgIGVsc2UgZ2VuXG4gICAgICAgICAgICAoXCJ3LnVpbnQzMiglaSkuJXMoJXNbaV0pXCIsIChmaWVsZC5pZCA8PCAzIHwgd2lyZVR5cGUpID4+PiAwLCB0eXBlLCByZWYpO1xuXG4gICAgICAgICAgICB9IGdlblxuICAgIChcIn1cIik7XG5cbiAgICAgICAgLy8gTm9uLXJlcGVhdGVkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZmllbGQub3B0aW9uYWwpIGdlblxuICAgIChcImlmKCVzIT1udWxsJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCVqKSlcIiwgcmVmLCBmaWVsZC5uYW1lKTsgLy8gIT09IHVuZGVmaW5lZCAmJiAhPT0gbnVsbFxuXG4gICAgICAgICAgICBpZiAod2lyZVR5cGUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgZ2VuVHlwZVBhcnRpYWwoZ2VuLCBmaWVsZCwgaW5kZXgsIHJlZik7XG4gICAgICAgICAgICBlbHNlIGdlblxuICAgICAgICAoXCJ3LnVpbnQzMiglaSkuJXMoJXMpXCIsIChmaWVsZC5pZCA8PCAzIHwgd2lyZVR5cGUpID4+PiAwLCB0eXBlLCByZWYpO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ2VuXG4gICAgKFwicmV0dXJuIHdcIik7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSwgYmxvY2stc2NvcGVkLXZhciwgbm8tcmVkZWNsYXJlICovXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gRW51bTtcblxuLy8gZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XG52YXIgUmVmbGVjdGlvbk9iamVjdCA9IHJlcXVpcmUoXCIuL29iamVjdFwiKTtcbigoRW51bS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBFbnVtKS5jbGFzc05hbWUgPSBcIkVudW1cIjtcblxudmFyIE5hbWVzcGFjZSA9IHJlcXVpcmUoXCIuL25hbWVzcGFjZVwiKSxcbiAgICB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGVudW0gaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFJlZmxlY3RlZCBlbnVtLlxuICogQGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBVbmlxdWUgbmFtZSB3aXRoaW4gaXRzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fSBbdmFsdWVzXSBFbnVtIHZhbHVlcyBhcyBhbiBvYmplY3QsIGJ5IG5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbW1lbnRdIFRoZSBjb21tZW50IGZvciB0aGlzIGVudW1cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPn0gW2NvbW1lbnRzXSBUaGUgdmFsdWUgY29tbWVudHMgZm9yIHRoaXMgZW51bVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZyxPYmplY3Q8c3RyaW5nLCo+Pnx1bmRlZmluZWR9IFt2YWx1ZXNPcHRpb25zXSBUaGUgdmFsdWUgb3B0aW9ucyBmb3IgdGhpcyBlbnVtXG4gKi9cbmZ1bmN0aW9uIEVudW0obmFtZSwgdmFsdWVzLCBvcHRpb25zLCBjb21tZW50LCBjb21tZW50cywgdmFsdWVzT3B0aW9ucykge1xuICAgIFJlZmxlY3Rpb25PYmplY3QuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZXMgJiYgdHlwZW9mIHZhbHVlcyAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwidmFsdWVzIG11c3QgYmUgYW4gb2JqZWN0XCIpO1xuXG4gICAgLyoqXG4gICAgICogRW51bSB2YWx1ZXMgYnkgaWQuXG4gICAgICogQHR5cGUge09iamVjdC48bnVtYmVyLHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy52YWx1ZXNCeUlkID0ge307XG5cbiAgICAvKipcbiAgICAgKiBFbnVtIHZhbHVlcyBieSBuYW1lLlxuICAgICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fVxuICAgICAqL1xuICAgIHRoaXMudmFsdWVzID0gT2JqZWN0LmNyZWF0ZSh0aGlzLnZhbHVlc0J5SWQpOyAvLyB0b0pTT04sIG1hcmtlclxuXG4gICAgLyoqXG4gICAgICogRW51bSBjb21tZW50IHRleHQuXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZSBjb21tZW50IHRleHRzLCBpZiBhbnkuXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5jb21tZW50cyA9IGNvbW1lbnRzIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVmFsdWVzIG9wdGlvbnMsIGlmIGFueVxuICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBPYmplY3Q8c3RyaW5nLCAqPj58dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMudmFsdWVzT3B0aW9ucyA9IHZhbHVlc09wdGlvbnM7XG5cbiAgICAvKipcbiAgICAgKiBSZXNlcnZlZCByYW5nZXMsIGlmIGFueS5cbiAgICAgKiBAdHlwZSB7QXJyYXkuPG51bWJlcltdfHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5yZXNlcnZlZCA9IHVuZGVmaW5lZDsgLy8gdG9KU09OXG5cbiAgICAvLyBOb3RlIHRoYXQgdmFsdWVzIGluaGVyaXQgdmFsdWVzQnlJZCBvbiB0aGVpciBwcm90b3R5cGUgd2hpY2ggbWFrZXMgdGhlbSBhIFR5cGVTY3JpcHQtXG4gICAgLy8gY29tcGF0aWJsZSBlbnVtLiBUaGlzIGlzIHVzZWQgYnkgcGJ0cyB0byB3cml0ZSBhY3R1YWwgZW51bSBkZWZpbml0aW9ucyB0aGF0IHdvcmsgZm9yXG4gICAgLy8gc3RhdGljIGFuZCByZWZsZWN0aW9uIGNvZGUgYWxpa2UgaW5zdGVhZCBvZiBlbWl0dGluZyBnZW5lcmljIG9iamVjdCBkZWZpbml0aW9ucy5cblxuICAgIGlmICh2YWx1ZXMpXG4gICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlc1trZXlzW2ldXSA9PT0gXCJudW1iZXJcIikgLy8gdXNlIGZvcndhcmQgZW50cmllcyBvbmx5XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNCeUlkWyB0aGlzLnZhbHVlc1trZXlzW2ldXSA9IHZhbHVlc1trZXlzW2ldXSBdID0ga2V5c1tpXTtcbn1cblxuLyoqXG4gKiBFbnVtIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElFbnVtXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLG51bWJlcj59IHZhbHVlcyBFbnVtIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIEVudW0gb3B0aW9uc1xuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhbiBlbnVtIGZyb20gYW4gZW51bSBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRW51bSBuYW1lXG4gKiBAcGFyYW0ge0lFbnVtfSBqc29uIEVudW0gZGVzY3JpcHRvclxuICogQHJldHVybnMge0VudW19IENyZWF0ZWQgZW51bVxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqL1xuRW51bS5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKG5hbWUsIGpzb24pIHtcbiAgICB2YXIgZW5tID0gbmV3IEVudW0obmFtZSwganNvbi52YWx1ZXMsIGpzb24ub3B0aW9ucywganNvbi5jb21tZW50LCBqc29uLmNvbW1lbnRzKTtcbiAgICBlbm0ucmVzZXJ2ZWQgPSBqc29uLnJlc2VydmVkO1xuICAgIHJldHVybiBlbm07XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgZW51bSB0byBhbiBlbnVtIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtJRW51bX0gRW51bSBkZXNjcmlwdG9yXG4gKi9cbkVudW0ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XG4gICAgdmFyIGtlZXBDb21tZW50cyA9IHRvSlNPTk9wdGlvbnMgPyBCb29sZWFuKHRvSlNPTk9wdGlvbnMua2VlcENvbW1lbnRzKSA6IGZhbHNlO1xuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcbiAgICAgICAgXCJvcHRpb25zXCIgICAgICAgLCB0aGlzLm9wdGlvbnMsXG4gICAgICAgIFwidmFsdWVzT3B0aW9uc1wiICwgdGhpcy52YWx1ZXNPcHRpb25zLFxuICAgICAgICBcInZhbHVlc1wiICAgICAgICAsIHRoaXMudmFsdWVzLFxuICAgICAgICBcInJlc2VydmVkXCIgICAgICAsIHRoaXMucmVzZXJ2ZWQgJiYgdGhpcy5yZXNlcnZlZC5sZW5ndGggPyB0aGlzLnJlc2VydmVkIDogdW5kZWZpbmVkLFxuICAgICAgICBcImNvbW1lbnRcIiAgICAgICAsIGtlZXBDb21tZW50cyA/IHRoaXMuY29tbWVudCA6IHVuZGVmaW5lZCxcbiAgICAgICAgXCJjb21tZW50c1wiICAgICAgLCBrZWVwQ29tbWVudHMgPyB0aGlzLmNvbW1lbnRzIDogdW5kZWZpbmVkXG4gICAgXSk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSB2YWx1ZSB0byB0aGlzIGVudW0uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBWYWx1ZSBuYW1lXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgVmFsdWUgaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29tbWVudF0gQ29tbWVudCwgaWYgYW55XG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPnx1bmRlZmluZWR9IFtvcHRpb25zXSBPcHRpb25zLCBpZiBhbnlcbiAqIEByZXR1cm5zIHtFbnVtfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgaXMgYWxyZWFkeSBhIHZhbHVlIHdpdGggdGhpcyBuYW1lIG9yIGlkXG4gKi9cbkVudW0ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBpZCwgY29tbWVudCwgb3B0aW9ucykge1xuICAgIC8vIHV0aWxpemVkIGJ5IHRoZSBwYXJzZXIgYnV0IG5vdCBieSAuZnJvbUpTT05cblxuICAgIGlmICghdXRpbC5pc1N0cmluZyhuYW1lKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwibmFtZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgaWYgKCF1dGlsLmlzSW50ZWdlcihpZCkpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImlkIG11c3QgYmUgYW4gaW50ZWdlclwiKTtcblxuICAgIGlmICh0aGlzLnZhbHVlc1tuYW1lXSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBuYW1lICdcIiArIG5hbWUgKyBcIicgaW4gXCIgKyB0aGlzKTtcblxuICAgIGlmICh0aGlzLmlzUmVzZXJ2ZWRJZChpZCkpXG4gICAgICAgIHRocm93IEVycm9yKFwiaWQgXCIgKyBpZCArIFwiIGlzIHJlc2VydmVkIGluIFwiICsgdGhpcyk7XG5cbiAgICBpZiAodGhpcy5pc1Jlc2VydmVkTmFtZShuYW1lKSlcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJuYW1lICdcIiArIG5hbWUgKyBcIicgaXMgcmVzZXJ2ZWQgaW4gXCIgKyB0aGlzKTtcblxuICAgIGlmICh0aGlzLnZhbHVlc0J5SWRbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCEodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5hbGxvd19hbGlhcykpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBpZCBcIiArIGlkICsgXCIgaW4gXCIgKyB0aGlzKTtcbiAgICAgICAgdGhpcy52YWx1ZXNbbmFtZV0gPSBpZDtcbiAgICB9IGVsc2VcbiAgICAgICAgdGhpcy52YWx1ZXNCeUlkW3RoaXMudmFsdWVzW25hbWVdID0gaWRdID0gbmFtZTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlc09wdGlvbnMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRoaXMudmFsdWVzT3B0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLnZhbHVlc09wdGlvbnNbbmFtZV0gPSBvcHRpb25zIHx8IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5jb21tZW50c1tuYW1lXSA9IGNvbW1lbnQgfHwgbnVsbDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhpcyBlbnVtXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBWYWx1ZSBuYW1lXG4gKiBAcmV0dXJucyB7RW51bX0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICogQHRocm93cyB7RXJyb3J9IElmIGBuYW1lYCBpcyBub3QgYSBuYW1lIG9mIHRoaXMgZW51bVxuICovXG5FbnVtLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuXG4gICAgaWYgKCF1dGlsLmlzU3RyaW5nKG5hbWUpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJuYW1lIG11c3QgYmUgYSBzdHJpbmdcIik7XG5cbiAgICB2YXIgdmFsID0gdGhpcy52YWx1ZXNbbmFtZV07XG4gICAgaWYgKHZhbCA9PSBudWxsKVxuICAgICAgICB0aHJvdyBFcnJvcihcIm5hbWUgJ1wiICsgbmFtZSArIFwiJyBkb2VzIG5vdCBleGlzdCBpbiBcIiArIHRoaXMpO1xuXG4gICAgZGVsZXRlIHRoaXMudmFsdWVzQnlJZFt2YWxdO1xuICAgIGRlbGV0ZSB0aGlzLnZhbHVlc1tuYW1lXTtcbiAgICBkZWxldGUgdGhpcy5jb21tZW50c1tuYW1lXTtcbiAgICBpZiAodGhpcy52YWx1ZXNPcHRpb25zKVxuICAgICAgICBkZWxldGUgdGhpcy52YWx1ZXNPcHRpb25zW25hbWVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgaWQgaXMgcmVzZXJ2ZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgSWQgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xuRW51bS5wcm90b3R5cGUuaXNSZXNlcnZlZElkID0gZnVuY3Rpb24gaXNSZXNlcnZlZElkKGlkKSB7XG4gICAgcmV0dXJuIE5hbWVzcGFjZS5pc1Jlc2VydmVkSWQodGhpcy5yZXNlcnZlZCwgaWQpO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIG5hbWUgaXMgcmVzZXJ2ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgcmVzZXJ2ZWQsIG90aGVyd2lzZSBgZmFsc2VgXG4gKi9cbkVudW0ucHJvdG90eXBlLmlzUmVzZXJ2ZWROYW1lID0gZnVuY3Rpb24gaXNSZXNlcnZlZE5hbWUobmFtZSkge1xuICAgIHJldHVybiBOYW1lc3BhY2UuaXNSZXNlcnZlZE5hbWUodGhpcy5yZXNlcnZlZCwgbmFtZSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEZpZWxkO1xuXG4vLyBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcbnZhciBSZWZsZWN0aW9uT2JqZWN0ID0gcmVxdWlyZShcIi4vb2JqZWN0XCIpO1xuKChGaWVsZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBGaWVsZCkuY2xhc3NOYW1lID0gXCJGaWVsZFwiO1xuXG52YXIgRW51bSAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIHR5cGVzID0gcmVxdWlyZShcIi4vdHlwZXNcIiksXG4gICAgdXRpbCAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG52YXIgVHlwZTsgLy8gY3ljbGljXG5cbnZhciBydWxlUmUgPSAvXnJlcXVpcmVkfG9wdGlvbmFsfHJlcGVhdGVkJC87XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBtZXNzYWdlIGZpZWxkIGluc3RhbmNlLiBOb3RlIHRoYXQge0BsaW5rIE1hcEZpZWxkfG1hcCBmaWVsZHN9IGhhdmUgdGhlaXIgb3duIGNsYXNzLlxuICogQG5hbWUgRmllbGRcbiAqIEBjbGFzc2Rlc2MgUmVmbGVjdGVkIG1lc3NhZ2UgZmllbGQuXG4gKiBAZXh0ZW5kcyBGaWVsZEJhc2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVW5pcXVlIG5hbWUgd2l0aGluIGl0cyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZCBVbmlxdWUgaWQgd2l0aGluIGl0cyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFZhbHVlIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nLCo+fSBbcnVsZT1cIm9wdGlvbmFsXCJdIEZpZWxkIHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nLCo+fSBbZXh0ZW5kXSBFeHRlbmRlZCB0eXBlIGlmIGRpZmZlcmVudCBmcm9tIHBhcmVudFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBmaWVsZCBmcm9tIGEgZmllbGQgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEZpZWxkIG5hbWVcbiAqIEBwYXJhbSB7SUZpZWxkfSBqc29uIEZpZWxkIGRlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtGaWVsZH0gQ3JlYXRlZCBmaWVsZFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqL1xuRmllbGQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XG4gICAgcmV0dXJuIG5ldyBGaWVsZChuYW1lLCBqc29uLmlkLCBqc29uLnR5cGUsIGpzb24ucnVsZSwganNvbi5leHRlbmQsIGpzb24ub3B0aW9ucywganNvbi5jb21tZW50KTtcbn07XG5cbi8qKlxuICogTm90IGFuIGFjdHVhbCBjb25zdHJ1Y3Rvci4gVXNlIHtAbGluayBGaWVsZH0gaW5zdGVhZC5cbiAqIEBjbGFzc2Rlc2MgQmFzZSBjbGFzcyBvZiBhbGwgcmVmbGVjdGVkIG1lc3NhZ2UgZmllbGRzLiBUaGlzIGlzIG5vdCBhbiBhY3R1YWwgY2xhc3MgYnV0IGhlcmUgZm9yIHRoZSBzYWtlIG9mIGhhdmluZyBjb25zaXN0ZW50IHR5cGUgZGVmaW5pdGlvbnMuXG4gKiBAZXhwb3J0cyBGaWVsZEJhc2VcbiAqIEBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVW5pcXVlIG5hbWUgd2l0aGluIGl0cyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZCBVbmlxdWUgaWQgd2l0aGluIGl0cyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFZhbHVlIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nLCo+fSBbcnVsZT1cIm9wdGlvbmFsXCJdIEZpZWxkIHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nLCo+fSBbZXh0ZW5kXSBFeHRlbmRlZCB0eXBlIGlmIGRpZmZlcmVudCBmcm9tIHBhcmVudFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29tbWVudF0gQ29tbWVudCBhc3NvY2lhdGVkIHdpdGggdGhpcyBmaWVsZFxuICovXG5mdW5jdGlvbiBGaWVsZChuYW1lLCBpZCwgdHlwZSwgcnVsZSwgZXh0ZW5kLCBvcHRpb25zLCBjb21tZW50KSB7XG5cbiAgICBpZiAodXRpbC5pc09iamVjdChydWxlKSkge1xuICAgICAgICBjb21tZW50ID0gZXh0ZW5kO1xuICAgICAgICBvcHRpb25zID0gcnVsZTtcbiAgICAgICAgcnVsZSA9IGV4dGVuZCA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKHV0aWwuaXNPYmplY3QoZXh0ZW5kKSkge1xuICAgICAgICBjb21tZW50ID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IGV4dGVuZDtcbiAgICAgICAgZXh0ZW5kID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIFJlZmxlY3Rpb25PYmplY3QuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICAgIGlmICghdXRpbC5pc0ludGVnZXIoaWQpIHx8IGlkIDwgMClcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiaWQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyXCIpO1xuXG4gICAgaWYgKCF1dGlsLmlzU3RyaW5nKHR5cGUpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJ0eXBlIG11c3QgYmUgYSBzdHJpbmdcIik7XG5cbiAgICBpZiAocnVsZSAhPT0gdW5kZWZpbmVkICYmICFydWxlUmUudGVzdChydWxlID0gcnVsZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJydWxlIG11c3QgYmUgYSBzdHJpbmcgcnVsZVwiKTtcblxuICAgIGlmIChleHRlbmQgIT09IHVuZGVmaW5lZCAmJiAhdXRpbC5pc1N0cmluZyhleHRlbmQpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJleHRlbmQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcblxuICAgIC8qKlxuICAgICAqIEZpZWxkIHJ1bGUsIGlmIGFueS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBpZiAocnVsZSA9PT0gXCJwcm90bzNfb3B0aW9uYWxcIikge1xuICAgICAgICBydWxlID0gXCJvcHRpb25hbFwiO1xuICAgIH1cbiAgICB0aGlzLnJ1bGUgPSBydWxlICYmIHJ1bGUgIT09IFwib3B0aW9uYWxcIiA/IHJ1bGUgOiB1bmRlZmluZWQ7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogRmllbGQgdHlwZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IHR5cGU7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogVW5pcXVlIGZpZWxkIGlkLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5pZCA9IGlkOyAvLyB0b0pTT04sIG1hcmtlclxuXG4gICAgLyoqXG4gICAgICogRXh0ZW5kZWQgdHlwZSBpZiBkaWZmZXJlbnQgZnJvbSBwYXJlbnQuXG4gICAgICogQHR5cGUge3N0cmluZ3x1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5leHRlbmQgPSBleHRlbmQgfHwgdW5kZWZpbmVkOyAvLyB0b0pTT05cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCBpcyByZXF1aXJlZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlcXVpcmVkID0gcnVsZSA9PT0gXCJyZXF1aXJlZFwiO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGZpZWxkIGlzIG9wdGlvbmFsLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMub3B0aW9uYWwgPSAhdGhpcy5yZXF1aXJlZDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCBpcyByZXBlYXRlZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlcGVhdGVkID0gcnVsZSA9PT0gXCJyZXBlYXRlZFwiO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGZpZWxkIGlzIGEgbWFwIG9yIG5vdC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLm1hcCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogTWVzc2FnZSB0aGlzIGZpZWxkIGJlbG9uZ3MgdG8uXG4gICAgICogQHR5cGUge1R5cGV8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLm1lc3NhZ2UgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogT25lT2YgdGhpcyBmaWVsZCBiZWxvbmdzIHRvLCBpZiBhbnksXG4gICAgICogQHR5cGUge09uZU9mfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5wYXJ0T2YgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpZWxkIHR5cGUncyBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEB0eXBlIHsqfVxuICAgICAqL1xuICAgIHRoaXMudHlwZURlZmF1bHQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpZWxkJ3MgZGVmYXVsdCB2YWx1ZSBvbiBwcm90b3R5cGVzLlxuICAgICAqIEB0eXBlIHsqfVxuICAgICAqL1xuICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCdzIHZhbHVlIHNob3VsZCBiZSB0cmVhdGVkIGFzIGEgbG9uZy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmxvbmcgPSB1dGlsLkxvbmcgPyB0eXBlcy5sb25nW3R5cGVdICE9PSB1bmRlZmluZWQgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCdzIHZhbHVlIGlzIGEgYnVmZmVyLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuYnl0ZXMgPSB0eXBlID09PSBcImJ5dGVzXCI7XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlZCB0eXBlIGlmIG5vdCBhIGJhc2ljIHR5cGUuXG4gICAgICogQHR5cGUge1R5cGV8RW51bXxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFNpc3Rlci1maWVsZCB3aXRoaW4gdGhlIGV4dGVuZGVkIHR5cGUgaWYgYSBkZWNsYXJpbmcgZXh0ZW5zaW9uIGZpZWxkLlxuICAgICAqIEB0eXBlIHtGaWVsZHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuZXh0ZW5zaW9uRmllbGQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogU2lzdGVyLWZpZWxkIHdpdGhpbiB0aGUgZGVjbGFyaW5nIG5hbWVzcGFjZSBpZiBhbiBleHRlbmRlZCBmaWVsZC5cbiAgICAgKiBAdHlwZSB7RmllbGR8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmRlY2xhcmluZ0ZpZWxkID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsbHkgcmVtZW1iZXJzIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBwYWNrZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW58bnVsbH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3BhY2tlZCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDb21tZW50IGZvciB0aGlzIGZpZWxkLlxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmNvbW1lbnQgPSBjb21tZW50O1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHBhY2tlZC4gT25seSByZWxldmFudCB3aGVuIHJlcGVhdGVkIGFuZCB3b3JraW5nIHdpdGggcHJvdG8yLlxuICogQG5hbWUgRmllbGQjcGFja2VkXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEByZWFkb25seVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRmllbGQucHJvdG90eXBlLCBcInBhY2tlZFwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gZGVmYXVsdHMgdG8gcGFja2VkPXRydWUgaWYgbm90IGV4cGxpY2l0eSBzZXQgdG8gZmFsc2VcbiAgICAgICAgaWYgKHRoaXMuX3BhY2tlZCA9PT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMuX3BhY2tlZCA9IHRoaXMuZ2V0T3B0aW9uKFwicGFja2VkXCIpICE9PSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhY2tlZDtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuRmllbGQucHJvdG90eXBlLnNldE9wdGlvbiA9IGZ1bmN0aW9uIHNldE9wdGlvbihuYW1lLCB2YWx1ZSwgaWZOb3RTZXQpIHtcbiAgICBpZiAobmFtZSA9PT0gXCJwYWNrZWRcIikgLy8gY2xlYXIgY2FjaGVkIGJlZm9yZSBzZXR0aW5nXG4gICAgICAgIHRoaXMuX3BhY2tlZCA9IG51bGw7XG4gICAgcmV0dXJuIFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLnNldE9wdGlvbi5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlLCBpZk5vdFNldCk7XG59O1xuXG4vKipcbiAqIEZpZWxkIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElGaWVsZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtydWxlPVwib3B0aW9uYWxcIl0gRmllbGQgcnVsZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgRmllbGQgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGlkIEZpZWxkIGlkXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRmllbGQgb3B0aW9uc1xuICovXG5cbi8qKlxuICogRXh0ZW5zaW9uIGZpZWxkIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElFeHRlbnNpb25GaWVsZFxuICogQGV4dGVuZHMgSUZpZWxkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZXh0ZW5kIEV4dGVuZGVkIHR5cGVcbiAqL1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgZmllbGQgdG8gYSBmaWVsZCBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7SUZpZWxkfSBGaWVsZCBkZXNjcmlwdG9yXG4gKi9cbkZpZWxkLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xuICAgIHZhciBrZWVwQ29tbWVudHMgPSB0b0pTT05PcHRpb25zID8gQm9vbGVhbih0b0pTT05PcHRpb25zLmtlZXBDb21tZW50cykgOiBmYWxzZTtcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXG4gICAgICAgIFwicnVsZVwiICAgICwgdGhpcy5ydWxlICE9PSBcIm9wdGlvbmFsXCIgJiYgdGhpcy5ydWxlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgXCJ0eXBlXCIgICAgLCB0aGlzLnR5cGUsXG4gICAgICAgIFwiaWRcIiAgICAgICwgdGhpcy5pZCxcbiAgICAgICAgXCJleHRlbmRcIiAgLCB0aGlzLmV4dGVuZCxcbiAgICAgICAgXCJvcHRpb25zXCIgLCB0aGlzLm9wdGlvbnMsXG4gICAgICAgIFwiY29tbWVudFwiICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50IDogdW5kZWZpbmVkXG4gICAgXSk7XG59O1xuXG4vKipcbiAqIFJlc29sdmVzIHRoaXMgZmllbGQncyB0eXBlIHJlZmVyZW5jZXMuXG4gKiBAcmV0dXJucyB7RmllbGR9IGB0aGlzYFxuICogQHRocm93cyB7RXJyb3J9IElmIGFueSByZWZlcmVuY2UgY2Fubm90IGJlIHJlc29sdmVkXG4gKi9cbkZpZWxkLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSgpIHtcblxuICAgIGlmICh0aGlzLnJlc29sdmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmICgodGhpcy50eXBlRGVmYXVsdCA9IHR5cGVzLmRlZmF1bHRzW3RoaXMudHlwZV0pID09PSB1bmRlZmluZWQpIHsgLy8gaWYgbm90IGEgYmFzaWMgdHlwZSwgcmVzb2x2ZSBpdFxuICAgICAgICB0aGlzLnJlc29sdmVkVHlwZSA9ICh0aGlzLmRlY2xhcmluZ0ZpZWxkID8gdGhpcy5kZWNsYXJpbmdGaWVsZC5wYXJlbnQgOiB0aGlzLnBhcmVudCkubG9va3VwVHlwZU9yRW51bSh0aGlzLnR5cGUpO1xuICAgICAgICBpZiAodGhpcy5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBUeXBlKVxuICAgICAgICAgICAgdGhpcy50eXBlRGVmYXVsdCA9IG51bGw7XG4gICAgICAgIGVsc2UgLy8gaW5zdGFuY2VvZiBFbnVtXG4gICAgICAgICAgICB0aGlzLnR5cGVEZWZhdWx0ID0gdGhpcy5yZXNvbHZlZFR5cGUudmFsdWVzW09iamVjdC5rZXlzKHRoaXMucmVzb2x2ZWRUeXBlLnZhbHVlcylbMF1dOyAvLyBmaXJzdCBkZWZpbmVkXG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLnByb3RvM19vcHRpb25hbCkge1xuICAgICAgICAvLyBwcm90bzMgc2NhbGFyIHZhbHVlIG1hcmtlZCBvcHRpb25hbDsgc2hvdWxkIGRlZmF1bHQgdG8gbnVsbFxuICAgICAgICB0aGlzLnR5cGVEZWZhdWx0ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyB1c2UgZXhwbGljaXRseSBzZXQgZGVmYXVsdCB2YWx1ZSBpZiBwcmVzZW50XG4gICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnNbXCJkZWZhdWx0XCJdICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy50eXBlRGVmYXVsdCA9IHRoaXMub3B0aW9uc1tcImRlZmF1bHRcIl07XG4gICAgICAgIGlmICh0aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0gJiYgdHlwZW9mIHRoaXMudHlwZURlZmF1bHQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0aGlzLnR5cGVEZWZhdWx0ID0gdGhpcy5yZXNvbHZlZFR5cGUudmFsdWVzW3RoaXMudHlwZURlZmF1bHRdO1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSB1bm5lY2Vzc2FyeSBvcHRpb25zXG4gICAgaWYgKHRoaXMub3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhY2tlZCA9PT0gdHJ1ZSB8fCB0aGlzLm9wdGlvbnMucGFja2VkICE9PSB1bmRlZmluZWQgJiYgdGhpcy5yZXNvbHZlZFR5cGUgJiYgISh0aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0pKVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy5wYWNrZWQ7XG4gICAgICAgIGlmICghT2JqZWN0LmtleXModGhpcy5vcHRpb25zKS5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gY29udmVydCB0byBpbnRlcm5hbCBkYXRhIHR5cGUgaWYgbmVjZXNzc2FyeVxuICAgIGlmICh0aGlzLmxvbmcpIHtcbiAgICAgICAgdGhpcy50eXBlRGVmYXVsdCA9IHV0aWwuTG9uZy5mcm9tTnVtYmVyKHRoaXMudHlwZURlZmF1bHQsIHRoaXMudHlwZS5jaGFyQXQoMCkgPT09IFwidVwiKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoT2JqZWN0LmZyZWV6ZSlcbiAgICAgICAgICAgIE9iamVjdC5mcmVlemUodGhpcy50eXBlRGVmYXVsdCk7IC8vIGxvbmcgaW5zdGFuY2VzIGFyZSBtZWFudCB0byBiZSBpbW11dGFibGUgYW55d2F5IChpLmUuIHVzZSBzbWFsbCBpbnQgY2FjaGUgdGhhdCBldmVuIHJlcXVpcmVzIGl0KVxuXG4gICAgfSBlbHNlIGlmICh0aGlzLmJ5dGVzICYmIHR5cGVvZiB0aGlzLnR5cGVEZWZhdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhciBidWY7XG4gICAgICAgIGlmICh1dGlsLmJhc2U2NC50ZXN0KHRoaXMudHlwZURlZmF1bHQpKVxuICAgICAgICAgICAgdXRpbC5iYXNlNjQuZGVjb2RlKHRoaXMudHlwZURlZmF1bHQsIGJ1ZiA9IHV0aWwubmV3QnVmZmVyKHV0aWwuYmFzZTY0Lmxlbmd0aCh0aGlzLnR5cGVEZWZhdWx0KSksIDApO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB1dGlsLnV0Zjgud3JpdGUodGhpcy50eXBlRGVmYXVsdCwgYnVmID0gdXRpbC5uZXdCdWZmZXIodXRpbC51dGY4Lmxlbmd0aCh0aGlzLnR5cGVEZWZhdWx0KSksIDApO1xuICAgICAgICB0aGlzLnR5cGVEZWZhdWx0ID0gYnVmO1xuICAgIH1cblxuICAgIC8vIHRha2Ugc3BlY2lhbCBjYXJlIG9mIG1hcHMgYW5kIHJlcGVhdGVkIGZpZWxkc1xuICAgIGlmICh0aGlzLm1hcClcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB1dGlsLmVtcHR5T2JqZWN0O1xuICAgIGVsc2UgaWYgKHRoaXMucmVwZWF0ZWQpXG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gdXRpbC5lbXB0eUFycmF5O1xuICAgIGVsc2VcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB0aGlzLnR5cGVEZWZhdWx0O1xuXG4gICAgLy8gZW5zdXJlIHByb3BlciB2YWx1ZSBvbiBwcm90b3R5cGVcbiAgICBpZiAodGhpcy5wYXJlbnQgaW5zdGFuY2VvZiBUeXBlKVxuICAgICAgICB0aGlzLnBhcmVudC5jdG9yLnByb3RvdHlwZVt0aGlzLm5hbWVdID0gdGhpcy5kZWZhdWx0VmFsdWU7XG5cbiAgICByZXR1cm4gUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUucmVzb2x2ZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBEZWNvcmF0b3IgZnVuY3Rpb24gYXMgcmV0dXJuZWQgYnkge0BsaW5rIEZpZWxkLmR9IGFuZCB7QGxpbmsgTWFwRmllbGQuZH0gKFR5cGVTY3JpcHQpLlxuICogQHR5cGVkZWYgRmllbGREZWNvcmF0b3JcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGFyZ2V0IHByb3RvdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkTmFtZSBGaWVsZCBuYW1lXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbi8qKlxuICogRmllbGQgZGVjb3JhdG9yIChUeXBlU2NyaXB0KS5cbiAqIEBuYW1lIEZpZWxkLmRcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSWQgRmllbGQgaWRcbiAqIEBwYXJhbSB7XCJkb3VibGVcInxcImZsb2F0XCJ8XCJpbnQzMlwifFwidWludDMyXCJ8XCJzaW50MzJcInxcImZpeGVkMzJcInxcInNmaXhlZDMyXCJ8XCJpbnQ2NFwifFwidWludDY0XCJ8XCJzaW50NjRcInxcImZpeGVkNjRcInxcInNmaXhlZDY0XCJ8XCJzdHJpbmdcInxcImJvb2xcInxcImJ5dGVzXCJ8T2JqZWN0fSBmaWVsZFR5cGUgRmllbGQgdHlwZVxuICogQHBhcmFtIHtcIm9wdGlvbmFsXCJ8XCJyZXF1aXJlZFwifFwicmVwZWF0ZWRcIn0gW2ZpZWxkUnVsZT1cIm9wdGlvbmFsXCJdIEZpZWxkIHJ1bGVcbiAqIEBwYXJhbSB7VH0gW2RlZmF1bHRWYWx1ZV0gRGVmYXVsdCB2YWx1ZVxuICogQHJldHVybnMge0ZpZWxkRGVjb3JhdG9yfSBEZWNvcmF0b3IgZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgbnVtYmVyIHwgbnVtYmVyW10gfCBMb25nIHwgTG9uZ1tdIHwgc3RyaW5nIHwgc3RyaW5nW10gfCBib29sZWFuIHwgYm9vbGVhbltdIHwgVWludDhBcnJheSB8IFVpbnQ4QXJyYXlbXSB8IEJ1ZmZlciB8IEJ1ZmZlcltdXG4gKi9cbkZpZWxkLmQgPSBmdW5jdGlvbiBkZWNvcmF0ZUZpZWxkKGZpZWxkSWQsIGZpZWxkVHlwZSwgZmllbGRSdWxlLCBkZWZhdWx0VmFsdWUpIHtcblxuICAgIC8vIHN1Ym1lc3NhZ2U6IGRlY29yYXRlIHRoZSBzdWJtZXNzYWdlIGFuZCB1c2UgaXRzIG5hbWUgYXMgdGhlIHR5cGVcbiAgICBpZiAodHlwZW9mIGZpZWxkVHlwZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmaWVsZFR5cGUgPSB1dGlsLmRlY29yYXRlVHlwZShmaWVsZFR5cGUpLm5hbWU7XG5cbiAgICAvLyBlbnVtIHJlZmVyZW5jZTogY3JlYXRlIGEgcmVmbGVjdGVkIGNvcHkgb2YgdGhlIGVudW0gYW5kIGtlZXAgcmV1c2VpbmcgaXRcbiAgICBlbHNlIGlmIChmaWVsZFR5cGUgJiYgdHlwZW9mIGZpZWxkVHlwZSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgZmllbGRUeXBlID0gdXRpbC5kZWNvcmF0ZUVudW0oZmllbGRUeXBlKS5uYW1lO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZpZWxkRGVjb3JhdG9yKHByb3RvdHlwZSwgZmllbGROYW1lKSB7XG4gICAgICAgIHV0aWwuZGVjb3JhdGVUeXBlKHByb3RvdHlwZS5jb25zdHJ1Y3RvcilcbiAgICAgICAgICAgIC5hZGQobmV3IEZpZWxkKGZpZWxkTmFtZSwgZmllbGRJZCwgZmllbGRUeXBlLCBmaWVsZFJ1bGUsIHsgXCJkZWZhdWx0XCI6IGRlZmF1bHRWYWx1ZSB9KSk7XG4gICAgfTtcbn07XG5cbi8qKlxuICogRmllbGQgZGVjb3JhdG9yIChUeXBlU2NyaXB0KS5cbiAqIEBuYW1lIEZpZWxkLmRcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSWQgRmllbGQgaWRcbiAqIEBwYXJhbSB7Q29uc3RydWN0b3I8VD58c3RyaW5nfSBmaWVsZFR5cGUgRmllbGQgdHlwZVxuICogQHBhcmFtIHtcIm9wdGlvbmFsXCJ8XCJyZXF1aXJlZFwifFwicmVwZWF0ZWRcIn0gW2ZpZWxkUnVsZT1cIm9wdGlvbmFsXCJdIEZpZWxkIHJ1bGVcbiAqIEByZXR1cm5zIHtGaWVsZERlY29yYXRvcn0gRGVjb3JhdG9yIGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEB2YXJpYXRpb24gMlxuICovXG4vLyBsaWtlIEZpZWxkLmQgYnV0IHdpdGhvdXQgYSBkZWZhdWx0IHZhbHVlXG5cbi8vIFNldHMgdXAgY3ljbGljIGRlcGVuZGVuY2llcyAoY2FsbGVkIGluIGluZGV4LWxpZ2h0KVxuRmllbGQuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uIGNvbmZpZ3VyZShUeXBlXykge1xuICAgIFR5cGUgPSBUeXBlXztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBwcm90b2J1ZiA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vaW5kZXgtbWluaW1hbFwiKTtcblxucHJvdG9idWYuYnVpbGQgPSBcImxpZ2h0XCI7XG5cbi8qKlxuICogQSBub2RlLXN0eWxlIGNhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIGxvYWR9IGFuZCB7QGxpbmsgUm9vdCNsb2FkfS5cbiAqIEB0eXBlZGVmIExvYWRDYWxsYmFja1xuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55LCBvdGhlcndpc2UgYG51bGxgXG4gKiBAcGFyYW0ge1Jvb3R9IFtyb290XSBSb290LCBpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhbiBlcnJvclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG4vKipcbiAqIExvYWRzIG9uZSBvciBtdWx0aXBsZSAucHJvdG8gb3IgcHJlcHJvY2Vzc2VkIC5qc29uIGZpbGVzIGludG8gYSBjb21tb24gcm9vdCBuYW1lc3BhY2UgYW5kIGNhbGxzIHRoZSBjYWxsYmFjay5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBPbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxuICogQHBhcmFtIHtSb290fSByb290IFJvb3QgbmFtZXNwYWNlLCBkZWZhdWx0cyB0byBjcmVhdGUgYSBuZXcgb25lIGlmIG9taXR0ZWQuXG4gKiBAcGFyYW0ge0xvYWRDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAc2VlIHtAbGluayBSb290I2xvYWR9XG4gKi9cbmZ1bmN0aW9uIGxvYWQoZmlsZW5hbWUsIHJvb3QsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiByb290ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSByb290O1xuICAgICAgICByb290ID0gbmV3IHByb3RvYnVmLlJvb3QoKTtcbiAgICB9IGVsc2UgaWYgKCFyb290KVxuICAgICAgICByb290ID0gbmV3IHByb3RvYnVmLlJvb3QoKTtcbiAgICByZXR1cm4gcm9vdC5sb2FkKGZpbGVuYW1lLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byBhIGNvbW1vbiByb290IG5hbWVzcGFjZSBhbmQgY2FsbHMgdGhlIGNhbGxiYWNrLlxuICogQG5hbWUgbG9hZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgT25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7TG9hZENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBzZWUge0BsaW5rIFJvb3QjbG9hZH1cbiAqIEB2YXJpYXRpb24gMlxuICovXG4vLyBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lOnN0cmluZywgY2FsbGJhY2s6TG9hZENhbGxiYWNrKTp1bmRlZmluZWRcblxuLyoqXG4gKiBMb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIGEgY29tbW9uIHJvb3QgbmFtZXNwYWNlIGFuZCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqIEBuYW1lIGxvYWRcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXG4gKiBAcGFyYW0ge1Jvb3R9IFtyb290XSBSb290IG5hbWVzcGFjZSwgZGVmYXVsdHMgdG8gY3JlYXRlIGEgbmV3IG9uZSBpZiBvbWl0dGVkLlxuICogQHJldHVybnMge1Byb21pc2U8Um9vdD59IFByb21pc2VcbiAqIEBzZWUge0BsaW5rIFJvb3QjbG9hZH1cbiAqIEB2YXJpYXRpb24gM1xuICovXG4vLyBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lOnN0cmluZywgW3Jvb3Q6Um9vdF0pOlByb21pc2U8Um9vdD5cblxucHJvdG9idWYubG9hZCA9IGxvYWQ7XG5cbi8qKlxuICogU3luY2hyb25vdXNseSBsb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIGEgY29tbW9uIHJvb3QgbmFtZXNwYWNlIChub2RlIG9ubHkpLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXG4gKiBAcGFyYW0ge1Jvb3R9IFtyb290XSBSb290IG5hbWVzcGFjZSwgZGVmYXVsdHMgdG8gY3JlYXRlIGEgbmV3IG9uZSBpZiBvbWl0dGVkLlxuICogQHJldHVybnMge1Jvb3R9IFJvb3QgbmFtZXNwYWNlXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgc3luY2hyb25vdXMgZmV0Y2hpbmcgaXMgbm90IHN1cHBvcnRlZCAoaS5lLiBpbiBicm93c2Vycykgb3IgaWYgYSBmaWxlJ3Mgc3ludGF4IGlzIGludmFsaWRcbiAqIEBzZWUge0BsaW5rIFJvb3QjbG9hZFN5bmN9XG4gKi9cbmZ1bmN0aW9uIGxvYWRTeW5jKGZpbGVuYW1lLCByb290KSB7XG4gICAgaWYgKCFyb290KVxuICAgICAgICByb290ID0gbmV3IHByb3RvYnVmLlJvb3QoKTtcbiAgICByZXR1cm4gcm9vdC5sb2FkU3luYyhmaWxlbmFtZSk7XG59XG5cbnByb3RvYnVmLmxvYWRTeW5jID0gbG9hZFN5bmM7XG5cbi8vIFNlcmlhbGl6YXRpb25cbnByb3RvYnVmLmVuY29kZXIgICAgICAgICAgPSByZXF1aXJlKFwiLi9lbmNvZGVyXCIpO1xucHJvdG9idWYuZGVjb2RlciAgICAgICAgICA9IHJlcXVpcmUoXCIuL2RlY29kZXJcIik7XG5wcm90b2J1Zi52ZXJpZmllciAgICAgICAgID0gcmVxdWlyZShcIi4vdmVyaWZpZXJcIik7XG5wcm90b2J1Zi5jb252ZXJ0ZXIgICAgICAgID0gcmVxdWlyZShcIi4vY29udmVydGVyXCIpO1xuXG4vLyBSZWZsZWN0aW9uXG5wcm90b2J1Zi5SZWZsZWN0aW9uT2JqZWN0ID0gcmVxdWlyZShcIi4vb2JqZWN0XCIpO1xucHJvdG9idWYuTmFtZXNwYWNlICAgICAgICA9IHJlcXVpcmUoXCIuL25hbWVzcGFjZVwiKTtcbnByb3RvYnVmLlJvb3QgICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9yb290XCIpO1xucHJvdG9idWYuRW51bSAgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL2VudW1cIik7XG5wcm90b2J1Zi5UeXBlICAgICAgICAgICAgID0gcmVxdWlyZShcIi4vdHlwZVwiKTtcbnByb3RvYnVmLkZpZWxkICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9maWVsZFwiKTtcbnByb3RvYnVmLk9uZU9mICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKTtcbnByb3RvYnVmLk1hcEZpZWxkICAgICAgICAgPSByZXF1aXJlKFwiLi9tYXBmaWVsZFwiKTtcbnByb3RvYnVmLlNlcnZpY2UgICAgICAgICAgPSByZXF1aXJlKFwiLi9zZXJ2aWNlXCIpO1xucHJvdG9idWYuTWV0aG9kICAgICAgICAgICA9IHJlcXVpcmUoXCIuL21ldGhvZFwiKTtcblxuLy8gUnVudGltZVxucHJvdG9idWYuTWVzc2FnZSAgICAgICAgICA9IHJlcXVpcmUoXCIuL21lc3NhZ2VcIik7XG5wcm90b2J1Zi53cmFwcGVycyAgICAgICAgID0gcmVxdWlyZShcIi4vd3JhcHBlcnNcIik7XG5cbi8vIFV0aWxpdHlcbnByb3RvYnVmLnR5cGVzICAgICAgICAgICAgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbnByb3RvYnVmLnV0aWwgICAgICAgICAgICAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG4vLyBTZXQgdXAgcG9zc2libHkgY3ljbGljIHJlZmxlY3Rpb24gZGVwZW5kZW5jaWVzXG5wcm90b2J1Zi5SZWZsZWN0aW9uT2JqZWN0Ll9jb25maWd1cmUocHJvdG9idWYuUm9vdCk7XG5wcm90b2J1Zi5OYW1lc3BhY2UuX2NvbmZpZ3VyZShwcm90b2J1Zi5UeXBlLCBwcm90b2J1Zi5TZXJ2aWNlLCBwcm90b2J1Zi5FbnVtKTtcbnByb3RvYnVmLlJvb3QuX2NvbmZpZ3VyZShwcm90b2J1Zi5UeXBlKTtcbnByb3RvYnVmLkZpZWxkLl9jb25maWd1cmUocHJvdG9idWYuVHlwZSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBwcm90b2J1ZiA9IGV4cG9ydHM7XG5cbi8qKlxuICogQnVpbGQgdHlwZSwgb25lIG9mIGBcImZ1bGxcImAsIGBcImxpZ2h0XCJgIG9yIGBcIm1pbmltYWxcImAuXG4gKiBAbmFtZSBidWlsZFxuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdFxuICovXG5wcm90b2J1Zi5idWlsZCA9IFwibWluaW1hbFwiO1xuXG4vLyBTZXJpYWxpemF0aW9uXG5wcm90b2J1Zi5Xcml0ZXIgICAgICAgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XG5wcm90b2J1Zi5CdWZmZXJXcml0ZXIgPSByZXF1aXJlKFwiLi93cml0ZXJfYnVmZmVyXCIpO1xucHJvdG9idWYuUmVhZGVyICAgICAgID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xucHJvdG9idWYuQnVmZmVyUmVhZGVyID0gcmVxdWlyZShcIi4vcmVhZGVyX2J1ZmZlclwiKTtcblxuLy8gVXRpbGl0eVxucHJvdG9idWYudXRpbCAgICAgICAgID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xucHJvdG9idWYucnBjICAgICAgICAgID0gcmVxdWlyZShcIi4vcnBjXCIpO1xucHJvdG9idWYucm9vdHMgICAgICAgID0gcmVxdWlyZShcIi4vcm9vdHNcIik7XG5wcm90b2J1Zi5jb25maWd1cmUgICAgPSBjb25maWd1cmU7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIFJlY29uZmlndXJlcyB0aGUgbGlicmFyeSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50LlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gY29uZmlndXJlKCkge1xuICAgIHByb3RvYnVmLnV0aWwuX2NvbmZpZ3VyZSgpO1xuICAgIHByb3RvYnVmLldyaXRlci5fY29uZmlndXJlKHByb3RvYnVmLkJ1ZmZlcldyaXRlcik7XG4gICAgcHJvdG9idWYuUmVhZGVyLl9jb25maWd1cmUocHJvdG9idWYuQnVmZmVyUmVhZGVyKTtcbn1cblxuLy8gU2V0IHVwIGJ1ZmZlciB1dGlsaXR5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnRcbmNvbmZpZ3VyZSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHJvdG9idWYgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2luZGV4LWxpZ2h0XCIpO1xuXG5wcm90b2J1Zi5idWlsZCA9IFwiZnVsbFwiO1xuXG4vLyBQYXJzZXJcbnByb3RvYnVmLnRva2VuaXplICAgICAgICAgPSByZXF1aXJlKFwiLi90b2tlbml6ZVwiKTtcbnByb3RvYnVmLnBhcnNlICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9wYXJzZVwiKTtcbnByb3RvYnVmLmNvbW1vbiAgICAgICAgICAgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5cbi8vIENvbmZpZ3VyZSBwYXJzZXJcbnByb3RvYnVmLlJvb3QuX2NvbmZpZ3VyZShwcm90b2J1Zi5UeXBlLCBwcm90b2J1Zi5wYXJzZSwgcHJvdG9idWYuY29tbW9uKTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBNYXBGaWVsZDtcblxuLy8gZXh0ZW5kcyBGaWVsZFxudmFyIEZpZWxkID0gcmVxdWlyZShcIi4vZmllbGRcIik7XG4oKE1hcEZpZWxkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRmllbGQucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBNYXBGaWVsZCkuY2xhc3NOYW1lID0gXCJNYXBGaWVsZFwiO1xuXG52YXIgdHlwZXMgICA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpLFxuICAgIHV0aWwgICAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgbWFwIGZpZWxkIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgbWFwIGZpZWxkLlxuICogQGV4dGVuZHMgRmllbGRCYXNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFVuaXF1ZSBuYW1lIHdpdGhpbiBpdHMgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgVW5pcXVlIGlkIHdpdGhpbiBpdHMgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5VHlwZSBLZXkgdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVmFsdWUgdHlwZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29tbWVudF0gQ29tbWVudCBhc3NvY2lhdGVkIHdpdGggdGhpcyBmaWVsZFxuICovXG5mdW5jdGlvbiBNYXBGaWVsZChuYW1lLCBpZCwga2V5VHlwZSwgdHlwZSwgb3B0aW9ucywgY29tbWVudCkge1xuICAgIEZpZWxkLmNhbGwodGhpcywgbmFtZSwgaWQsIHR5cGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvcHRpb25zLCBjb21tZW50KTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdXRpbC5pc1N0cmluZyhrZXlUeXBlKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwia2V5VHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgLyoqXG4gICAgICogS2V5IHR5cGUuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmtleVR5cGUgPSBrZXlUeXBlOyAvLyB0b0pTT04sIG1hcmtlclxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZWQga2V5IHR5cGUgaWYgbm90IGEgYmFzaWMgdHlwZS5cbiAgICAgKiBAdHlwZSB7UmVmbGVjdGlvbk9iamVjdHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucmVzb2x2ZWRLZXlUeXBlID0gbnVsbDtcblxuICAgIC8vIE92ZXJyaWRlcyBGaWVsZCNtYXBcbiAgICB0aGlzLm1hcCA9IHRydWU7XG59XG5cbi8qKlxuICogTWFwIGZpZWxkIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElNYXBGaWVsZFxuICogQGV4dGVuZHMge0lGaWVsZH1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBrZXlUeXBlIEtleSB0eXBlXG4gKi9cblxuLyoqXG4gKiBFeHRlbnNpb24gbWFwIGZpZWxkIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElFeHRlbnNpb25NYXBGaWVsZFxuICogQGV4dGVuZHMgSU1hcEZpZWxkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZXh0ZW5kIEV4dGVuZGVkIHR5cGVcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBtYXAgZmllbGQgZnJvbSBhIG1hcCBmaWVsZCBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmllbGQgbmFtZVxuICogQHBhcmFtIHtJTWFwRmllbGR9IGpzb24gTWFwIGZpZWxkIGRlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtNYXBGaWVsZH0gQ3JlYXRlZCBtYXAgZmllbGRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXG4gKi9cbk1hcEZpZWxkLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xuICAgIHJldHVybiBuZXcgTWFwRmllbGQobmFtZSwganNvbi5pZCwganNvbi5rZXlUeXBlLCBqc29uLnR5cGUsIGpzb24ub3B0aW9ucywganNvbi5jb21tZW50KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBtYXAgZmllbGQgdG8gYSBtYXAgZmllbGQgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7SVRvSlNPTk9wdGlvbnN9IFt0b0pTT05PcHRpb25zXSBKU09OIGNvbnZlcnNpb24gb3B0aW9uc1xuICogQHJldHVybnMge0lNYXBGaWVsZH0gTWFwIGZpZWxkIGRlc2NyaXB0b3JcbiAqL1xuTWFwRmllbGQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XG4gICAgdmFyIGtlZXBDb21tZW50cyA9IHRvSlNPTk9wdGlvbnMgPyBCb29sZWFuKHRvSlNPTk9wdGlvbnMua2VlcENvbW1lbnRzKSA6IGZhbHNlO1xuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcbiAgICAgICAgXCJrZXlUeXBlXCIgLCB0aGlzLmtleVR5cGUsXG4gICAgICAgIFwidHlwZVwiICAgICwgdGhpcy50eXBlLFxuICAgICAgICBcImlkXCIgICAgICAsIHRoaXMuaWQsXG4gICAgICAgIFwiZXh0ZW5kXCIgICwgdGhpcy5leHRlbmQsXG4gICAgICAgIFwib3B0aW9uc1wiICwgdGhpcy5vcHRpb25zLFxuICAgICAgICBcImNvbW1lbnRcIiAsIGtlZXBDb21tZW50cyA/IHRoaXMuY29tbWVudCA6IHVuZGVmaW5lZFxuICAgIF0pO1xufTtcblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTWFwRmllbGQucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKCkge1xuICAgIGlmICh0aGlzLnJlc29sdmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIC8vIEJlc2lkZXMgYSB2YWx1ZSB0eXBlLCBtYXAgZmllbGRzIGhhdmUgYSBrZXkgdHlwZSB0aGF0IG1heSBiZSBcImFueSBzY2FsYXIgdHlwZSBleGNlcHQgZm9yIGZsb2F0aW5nIHBvaW50IHR5cGVzIGFuZCBieXRlc1wiXG4gICAgaWYgKHR5cGVzLm1hcEtleVt0aGlzLmtleVR5cGVdID09PSB1bmRlZmluZWQpXG4gICAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCBrZXkgdHlwZTogXCIgKyB0aGlzLmtleVR5cGUpO1xuXG4gICAgcmV0dXJuIEZpZWxkLnByb3RvdHlwZS5yZXNvbHZlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIE1hcCBmaWVsZCBkZWNvcmF0b3IgKFR5cGVTY3JpcHQpLlxuICogQG5hbWUgTWFwRmllbGQuZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJZCBGaWVsZCBpZFxuICogQHBhcmFtIHtcImludDMyXCJ8XCJ1aW50MzJcInxcInNpbnQzMlwifFwiZml4ZWQzMlwifFwic2ZpeGVkMzJcInxcImludDY0XCJ8XCJ1aW50NjRcInxcInNpbnQ2NFwifFwiZml4ZWQ2NFwifFwic2ZpeGVkNjRcInxcImJvb2xcInxcInN0cmluZ1wifSBmaWVsZEtleVR5cGUgRmllbGQga2V5IHR5cGVcbiAqIEBwYXJhbSB7XCJkb3VibGVcInxcImZsb2F0XCJ8XCJpbnQzMlwifFwidWludDMyXCJ8XCJzaW50MzJcInxcImZpeGVkMzJcInxcInNmaXhlZDMyXCJ8XCJpbnQ2NFwifFwidWludDY0XCJ8XCJzaW50NjRcInxcImZpeGVkNjRcInxcInNmaXhlZDY0XCJ8XCJib29sXCJ8XCJzdHJpbmdcInxcImJ5dGVzXCJ8T2JqZWN0fENvbnN0cnVjdG9yPHt9Pn0gZmllbGRWYWx1ZVR5cGUgRmllbGQgdmFsdWUgdHlwZVxuICogQHJldHVybnMge0ZpZWxkRGVjb3JhdG9yfSBEZWNvcmF0b3IgZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfCBMb25nIHwgc3RyaW5nIHwgYm9vbGVhbiB8IFVpbnQ4QXJyYXkgfCBCdWZmZXIgfCBudW1iZXJbXSB8IE1lc3NhZ2U8e30+IH1cbiAqL1xuTWFwRmllbGQuZCA9IGZ1bmN0aW9uIGRlY29yYXRlTWFwRmllbGQoZmllbGRJZCwgZmllbGRLZXlUeXBlLCBmaWVsZFZhbHVlVHlwZSkge1xuXG4gICAgLy8gc3VibWVzc2FnZSB2YWx1ZTogZGVjb3JhdGUgdGhlIHN1Ym1lc3NhZ2UgYW5kIHVzZSBpdHMgbmFtZSBhcyB0aGUgdHlwZVxuICAgIGlmICh0eXBlb2YgZmllbGRWYWx1ZVR5cGUgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZmllbGRWYWx1ZVR5cGUgPSB1dGlsLmRlY29yYXRlVHlwZShmaWVsZFZhbHVlVHlwZSkubmFtZTtcblxuICAgIC8vIGVudW0gcmVmZXJlbmNlIHZhbHVlOiBjcmVhdGUgYSByZWZsZWN0ZWQgY29weSBvZiB0aGUgZW51bSBhbmQga2VlcCByZXVzZWluZyBpdFxuICAgIGVsc2UgaWYgKGZpZWxkVmFsdWVUeXBlICYmIHR5cGVvZiBmaWVsZFZhbHVlVHlwZSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgZmllbGRWYWx1ZVR5cGUgPSB1dGlsLmRlY29yYXRlRW51bShmaWVsZFZhbHVlVHlwZSkubmFtZTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBtYXBGaWVsZERlY29yYXRvcihwcm90b3R5cGUsIGZpZWxkTmFtZSkge1xuICAgICAgICB1dGlsLmRlY29yYXRlVHlwZShwcm90b3R5cGUuY29uc3RydWN0b3IpXG4gICAgICAgICAgICAuYWRkKG5ldyBNYXBGaWVsZChmaWVsZE5hbWUsIGZpZWxkSWQsIGZpZWxkS2V5VHlwZSwgZmllbGRWYWx1ZVR5cGUpKTtcbiAgICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc3NhZ2UgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIEFic3RyYWN0IHJ1bnRpbWUgbWVzc2FnZS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtQcm9wZXJ0aWVzPFQ+fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgb2JqZWN0ID0gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIE1lc3NhZ2UocHJvcGVydGllcykge1xuICAgIC8vIG5vdCB1c2VkIGludGVybmFsbHlcbiAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbn1cblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIHJlZmxlY3RlZCB0eXBlLlxuICogQG5hbWUgTWVzc2FnZS4kdHlwZVxuICogQHR5cGUge1R5cGV9XG4gKiBAcmVhZG9ubHlcbiAqL1xuXG4vKipcbiAqIFJlZmVyZW5jZSB0byB0aGUgcmVmbGVjdGVkIHR5cGUuXG4gKiBAbmFtZSBNZXNzYWdlIyR0eXBlXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEByZWFkb25seVxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWVzc2FnZSBvZiB0aGlzIHR5cGUgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gKiBAcmV0dXJucyB7TWVzc2FnZTxUPn0gTWVzc2FnZSBpbnN0YW5jZVxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuY3JlYXRlKHByb3BlcnRpZXMpO1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUuXG4gKiBAcGFyYW0ge1R8T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgTWVzc2FnZSB0byBlbmNvZGVcbiAqIEBwYXJhbSB7V3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gdXNlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBXcml0ZXJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cbiAqL1xuTWVzc2FnZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcik7XG59O1xuXG4vKipcbiAqIEVuY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZSBwcmVjZWVkZWQgYnkgaXRzIGxlbmd0aCBhcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7VHxPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBNZXNzYWdlIHRvIGVuY29kZVxuICogQHBhcmFtIHtXcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byB1c2VcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IFdyaXRlclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICByZXR1cm4gdGhpcy4kdHlwZS5lbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLlxuICogQG5hbWUgTWVzc2FnZS5kZWNvZGVcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtSZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlXG4gKiBAcmV0dXJucyB7VH0gRGVjb2RlZCBtZXNzYWdlXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XG4gKi9cbk1lc3NhZ2UuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlcikge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLmRlY29kZShyZWFkZXIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAbmFtZSBNZXNzYWdlLmRlY29kZURlbGltaXRlZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1JlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGVcbiAqIEByZXR1cm5zIHtUfSBEZWNvZGVkIG1lc3NhZ2VcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cbiAqL1xuTWVzc2FnZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZGVjb2RlRGVsaW1pdGVkKHJlYWRlcik7XG59O1xuXG4vKipcbiAqIFZlcmlmaWVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUuXG4gKiBAbmFtZSBNZXNzYWdlLnZlcmlmeVxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gKi9cbk1lc3NhZ2UudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy4kdHlwZS52ZXJpZnkobWVzc2FnZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWVzc2FnZSBvZiB0aGlzIHR5cGUgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG9iamVjdCBQbGFpbiBvYmplY3RcbiAqIEByZXR1cm5zIHtUfSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XG4gKi9cbk1lc3NhZ2UuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZnJvbU9iamVjdChvYmplY3QpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBtZXNzYWdlIG9mIHRoaXMgdHlwZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICogQHBhcmFtIHtUfSBtZXNzYWdlIE1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLnRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIG1lc3NhZ2UgdG8gSlNPTi5cbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAqL1xuTWVzc2FnZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLnRvT2JqZWN0KHRoaXMsIHV0aWwudG9KU09OT3B0aW9ucyk7XG59O1xuXG4vKmVzbGludC1lbmFibGUgdmFsaWQtanNkb2MqLyIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBNZXRob2Q7XG5cbi8vIGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxudmFyIFJlZmxlY3Rpb25PYmplY3QgPSByZXF1aXJlKFwiLi9vYmplY3RcIik7XG4oKE1ldGhvZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBNZXRob2QpLmNsYXNzTmFtZSA9IFwiTWV0aG9kXCI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHNlcnZpY2UgbWV0aG9kIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgc2VydmljZSBtZXRob2QuXG4gKiBAZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE1ldGhvZCBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IHR5cGUgTWV0aG9kIHR5cGUsIHVzdWFsbHkgYFwicnBjXCJgXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdFR5cGUgUmVxdWVzdCBtZXNzYWdlIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNwb25zZVR5cGUgUmVzcG9uc2UgbWVzc2FnZSB0eXBlXG4gKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0LjxzdHJpbmcsKj59IFtyZXF1ZXN0U3RyZWFtXSBXaGV0aGVyIHRoZSByZXF1ZXN0IGlzIHN0cmVhbWVkXG4gKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0LjxzdHJpbmcsKj59IFtyZXNwb25zZVN0cmVhbV0gV2hldGhlciB0aGUgcmVzcG9uc2UgaXMgc3RyZWFtZWRcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbW1lbnRdIFRoZSBjb21tZW50IGZvciB0aGlzIG1ldGhvZFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3BhcnNlZE9wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnMsIHByb3Blcmx5IHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5mdW5jdGlvbiBNZXRob2QobmFtZSwgdHlwZSwgcmVxdWVzdFR5cGUsIHJlc3BvbnNlVHlwZSwgcmVxdWVzdFN0cmVhbSwgcmVzcG9uc2VTdHJlYW0sIG9wdGlvbnMsIGNvbW1lbnQsIHBhcnNlZE9wdGlvbnMpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHV0aWwuaXNPYmplY3QocmVxdWVzdFN0cmVhbSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHJlcXVlc3RTdHJlYW07XG4gICAgICAgIHJlcXVlc3RTdHJlYW0gPSByZXNwb25zZVN0cmVhbSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKHV0aWwuaXNPYmplY3QocmVzcG9uc2VTdHJlYW0pKSB7XG4gICAgICAgIG9wdGlvbnMgPSByZXNwb25zZVN0cmVhbTtcbiAgICAgICAgcmVzcG9uc2VTdHJlYW0gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCEodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHV0aWwuaXNTdHJpbmcodHlwZSkpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJ0eXBlIG11c3QgYmUgYSBzdHJpbmdcIik7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXV0aWwuaXNTdHJpbmcocmVxdWVzdFR5cGUpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJyZXF1ZXN0VHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF1dGlsLmlzU3RyaW5nKHJlc3BvbnNlVHlwZSkpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInJlc3BvbnNlVHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgUmVmbGVjdGlvbk9iamVjdC5jYWxsKHRoaXMsIG5hbWUsIG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHR5cGUuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSB0eXBlIHx8IFwicnBjXCI7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCB0eXBlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5yZXF1ZXN0VHlwZSA9IHJlcXVlc3RUeXBlOyAvLyB0b0pTT04sIG1hcmtlclxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXF1ZXN0cyBhcmUgc3RyZWFtZWQgb3Igbm90LlxuICAgICAqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLnJlcXVlc3RTdHJlYW0gPSByZXF1ZXN0U3RyZWFtID8gdHJ1ZSA6IHVuZGVmaW5lZDsgLy8gdG9KU09OXG5cbiAgICAvKipcbiAgICAgKiBSZXNwb25zZSB0eXBlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXNwb25zZXMgYXJlIHN0cmVhbWVkIG9yIG5vdC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5yZXNwb25zZVN0cmVhbSA9IHJlc3BvbnNlU3RyZWFtID8gdHJ1ZSA6IHVuZGVmaW5lZDsgLy8gdG9KU09OXG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlZCByZXF1ZXN0IHR5cGUuXG4gICAgICogQHR5cGUge1R5cGV8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc29sdmVkUmVxdWVzdFR5cGUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZWQgcmVzcG9uc2UgdHlwZS5cbiAgICAgKiBAdHlwZSB7VHlwZXxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucmVzb2x2ZWRSZXNwb25zZVR5cGUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ29tbWVudCBmb3IgdGhpcyBtZXRob2RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5jb21tZW50ID0gY29tbWVudDtcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgcHJvcGVybHkgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gICAgICovXG4gICAgdGhpcy5wYXJzZWRPcHRpb25zID0gcGFyc2VkT3B0aW9ucztcbn1cblxuLyoqXG4gKiBNZXRob2QgZGVzY3JpcHRvci5cbiAqIEBpbnRlcmZhY2UgSU1ldGhvZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt0eXBlPVwicnBjXCJdIE1ldGhvZCB0eXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVxdWVzdFR5cGUgUmVxdWVzdCB0eXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVzcG9uc2VUeXBlIFJlc3BvbnNlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JlcXVlc3RTdHJlYW09ZmFsc2VdIFdoZXRoZXIgcmVxdWVzdHMgYXJlIHN0cmVhbWVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXNwb25zZVN0cmVhbT1mYWxzZV0gV2hldGhlciByZXNwb25zZXMgYXJlIHN0cmVhbWVkXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gTWV0aG9kIG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb21tZW50IE1ldGhvZCBjb21tZW50c1xuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywqPn0gW3BhcnNlZE9wdGlvbnNdIE1ldGhvZCBvcHRpb25zIHByb3Blcmx5IHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG1ldGhvZCBmcm9tIGEgbWV0aG9kIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBNZXRob2QgbmFtZVxuICogQHBhcmFtIHtJTWV0aG9kfSBqc29uIE1ldGhvZCBkZXNjcmlwdG9yXG4gKiBAcmV0dXJucyB7TWV0aG9kfSBDcmVhdGVkIG1ldGhvZFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqL1xuTWV0aG9kLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xuICAgIHJldHVybiBuZXcgTWV0aG9kKG5hbWUsIGpzb24udHlwZSwganNvbi5yZXF1ZXN0VHlwZSwganNvbi5yZXNwb25zZVR5cGUsIGpzb24ucmVxdWVzdFN0cmVhbSwganNvbi5yZXNwb25zZVN0cmVhbSwganNvbi5vcHRpb25zLCBqc29uLmNvbW1lbnQsIGpzb24ucGFyc2VkT3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgbWV0aG9kIHRvIGEgbWV0aG9kIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtJTWV0aG9kfSBNZXRob2QgZGVzY3JpcHRvclxuICovXG5NZXRob2QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XG4gICAgdmFyIGtlZXBDb21tZW50cyA9IHRvSlNPTk9wdGlvbnMgPyBCb29sZWFuKHRvSlNPTk9wdGlvbnMua2VlcENvbW1lbnRzKSA6IGZhbHNlO1xuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcbiAgICAgICAgXCJ0eXBlXCIgICAgICAgICAgICwgdGhpcy50eXBlICE9PSBcInJwY1wiICYmIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHRoaXMudHlwZSB8fCB1bmRlZmluZWQsXG4gICAgICAgIFwicmVxdWVzdFR5cGVcIiAgICAsIHRoaXMucmVxdWVzdFR5cGUsXG4gICAgICAgIFwicmVxdWVzdFN0cmVhbVwiICAsIHRoaXMucmVxdWVzdFN0cmVhbSxcbiAgICAgICAgXCJyZXNwb25zZVR5cGVcIiAgICwgdGhpcy5yZXNwb25zZVR5cGUsXG4gICAgICAgIFwicmVzcG9uc2VTdHJlYW1cIiAsIHRoaXMucmVzcG9uc2VTdHJlYW0sXG4gICAgICAgIFwib3B0aW9uc1wiICAgICAgICAsIHRoaXMub3B0aW9ucyxcbiAgICAgICAgXCJjb21tZW50XCIgICAgICAgICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50IDogdW5kZWZpbmVkLFxuICAgICAgICBcInBhcnNlZE9wdGlvbnNcIiAgLCB0aGlzLnBhcnNlZE9wdGlvbnMsXG4gICAgXSk7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5NZXRob2QucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucmVzb2x2ZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgdGhpcy5yZXNvbHZlZFJlcXVlc3RUeXBlID0gdGhpcy5wYXJlbnQubG9va3VwVHlwZSh0aGlzLnJlcXVlc3RUeXBlKTtcbiAgICB0aGlzLnJlc29sdmVkUmVzcG9uc2VUeXBlID0gdGhpcy5wYXJlbnQubG9va3VwVHlwZSh0aGlzLnJlc3BvbnNlVHlwZSk7XG5cbiAgICByZXR1cm4gUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUucmVzb2x2ZS5jYWxsKHRoaXMpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBOYW1lc3BhY2U7XG5cbi8vIGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxudmFyIFJlZmxlY3Rpb25PYmplY3QgPSByZXF1aXJlKFwiLi9vYmplY3RcIik7XG4oKE5hbWVzcGFjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBOYW1lc3BhY2UpLmNsYXNzTmFtZSA9IFwiTmFtZXNwYWNlXCI7XG5cbnZhciBGaWVsZCAgICA9IHJlcXVpcmUoXCIuL2ZpZWxkXCIpLFxuICAgIHV0aWwgICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKSxcbiAgICBPbmVPZiAgICA9IHJlcXVpcmUoXCIuL29uZW9mXCIpO1xuXG52YXIgVHlwZSwgICAgLy8gY3ljbGljXG4gICAgU2VydmljZSxcbiAgICBFbnVtO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgbmFtZXNwYWNlIGluc3RhbmNlLlxuICogQG5hbWUgTmFtZXNwYWNlXG4gKiBAY2xhc3NkZXNjIFJlZmxlY3RlZCBuYW1lc3BhY2UuXG4gKiBAZXh0ZW5kcyBOYW1lc3BhY2VCYXNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRGVjbGFyZWQgb3B0aW9uc1xuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5hbWVzcGFjZSBmcm9tIEpTT04uXG4gKiBAbWVtYmVyb2YgTmFtZXNwYWNlXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBqc29uIEpTT04gb2JqZWN0XG4gKiBAcmV0dXJucyB7TmFtZXNwYWNlfSBDcmVhdGVkIG5hbWVzcGFjZVxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqL1xuTmFtZXNwYWNlLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xuICAgIHJldHVybiBuZXcgTmFtZXNwYWNlKG5hbWUsIGpzb24ub3B0aW9ucykuYWRkSlNPTihqc29uLm5lc3RlZCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIGFycmF5IG9mIHJlZmxlY3Rpb24gb2JqZWN0cyB0byBKU09OLlxuICogQG1lbWJlcm9mIE5hbWVzcGFjZVxuICogQHBhcmFtIHtSZWZsZWN0aW9uT2JqZWN0W119IGFycmF5IE9iamVjdCBhcnJheVxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj58dW5kZWZpbmVkfSBKU09OIG9iamVjdCBvciBgdW5kZWZpbmVkYCB3aGVuIGFycmF5IGlzIGVtcHR5XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9KU09OKGFycmF5LCB0b0pTT05PcHRpb25zKSB7XG4gICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSlcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB2YXIgb2JqID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7ICsraSlcbiAgICAgICAgb2JqW2FycmF5W2ldLm5hbWVdID0gYXJyYXlbaV0udG9KU09OKHRvSlNPTk9wdGlvbnMpO1xuICAgIHJldHVybiBvYmo7XG59XG5cbk5hbWVzcGFjZS5hcnJheVRvSlNPTiA9IGFycmF5VG9KU09OO1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgaWQgaXMgcmVzZXJ2ZWQuXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXJbXXxzdHJpbmc+fHVuZGVmaW5lZH0gcmVzZXJ2ZWQgQXJyYXkgb2YgcmVzZXJ2ZWQgcmFuZ2VzIGFuZCBuYW1lc1xuICogQHBhcmFtIHtudW1iZXJ9IGlkIElkIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgcmVzZXJ2ZWQsIG90aGVyd2lzZSBgZmFsc2VgXG4gKi9cbk5hbWVzcGFjZS5pc1Jlc2VydmVkSWQgPSBmdW5jdGlvbiBpc1Jlc2VydmVkSWQocmVzZXJ2ZWQsIGlkKSB7XG4gICAgaWYgKHJlc2VydmVkKVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc2VydmVkLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNlcnZlZFtpXSAhPT0gXCJzdHJpbmdcIiAmJiByZXNlcnZlZFtpXVswXSA8PSBpZCAmJiByZXNlcnZlZFtpXVsxXSA+IGlkKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBuYW1lIGlzIHJlc2VydmVkLlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyW118c3RyaW5nPnx1bmRlZmluZWR9IHJlc2VydmVkIEFycmF5IG9mIHJlc2VydmVkIHJhbmdlcyBhbmQgbmFtZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xuTmFtZXNwYWNlLmlzUmVzZXJ2ZWROYW1lID0gZnVuY3Rpb24gaXNSZXNlcnZlZE5hbWUocmVzZXJ2ZWQsIG5hbWUpIHtcbiAgICBpZiAocmVzZXJ2ZWQpXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzZXJ2ZWQubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBpZiAocmVzZXJ2ZWRbaV0gPT09IG5hbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBOb3QgYW4gYWN0dWFsIGNvbnN0cnVjdG9yLiBVc2Uge0BsaW5rIE5hbWVzcGFjZX0gaW5zdGVhZC5cbiAqIEBjbGFzc2Rlc2MgQmFzZSBjbGFzcyBvZiBhbGwgcmVmbGVjdGlvbiBvYmplY3RzIGNvbnRhaW5pbmcgbmVzdGVkIG9iamVjdHMuIFRoaXMgaXMgbm90IGFuIGFjdHVhbCBjbGFzcyBidXQgaGVyZSBmb3IgdGhlIHNha2Ugb2YgaGF2aW5nIGNvbnNpc3RlbnQgdHlwZSBkZWZpbml0aW9ucy5cbiAqIEBleHBvcnRzIE5hbWVzcGFjZUJhc2VcbiAqIEBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcbiAqIEBhYnN0cmFjdFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lc3BhY2UgbmFtZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcbiAqIEBzZWUge0BsaW5rIE5hbWVzcGFjZX1cbiAqL1xuZnVuY3Rpb24gTmFtZXNwYWNlKG5hbWUsIG9wdGlvbnMpIHtcbiAgICBSZWZsZWN0aW9uT2JqZWN0LmNhbGwodGhpcywgbmFtZSwgb3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBOZXN0ZWQgb2JqZWN0cyBieSBuYW1lLlxuICAgICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxSZWZsZWN0aW9uT2JqZWN0Pnx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5uZXN0ZWQgPSB1bmRlZmluZWQ7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogQ2FjaGVkIG5lc3RlZCBvYmplY3RzIGFzIGFuIGFycmF5LlxuICAgICAqIEB0eXBlIHtSZWZsZWN0aW9uT2JqZWN0W118bnVsbH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX25lc3RlZEFycmF5ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY2xlYXJDYWNoZShuYW1lc3BhY2UpIHtcbiAgICBuYW1lc3BhY2UuX25lc3RlZEFycmF5ID0gbnVsbDtcbiAgICByZXR1cm4gbmFtZXNwYWNlO1xufVxuXG4vKipcbiAqIE5lc3RlZCBvYmplY3RzIG9mIHRoaXMgbmFtZXNwYWNlIGFzIGFuIGFycmF5IGZvciBpdGVyYXRpb24uXG4gKiBAbmFtZSBOYW1lc3BhY2VCYXNlI25lc3RlZEFycmF5XG4gKiBAdHlwZSB7UmVmbGVjdGlvbk9iamVjdFtdfVxuICogQHJlYWRvbmx5XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShOYW1lc3BhY2UucHJvdG90eXBlLCBcIm5lc3RlZEFycmF5XCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmVzdGVkQXJyYXkgfHwgKHRoaXMuX25lc3RlZEFycmF5ID0gdXRpbC50b0FycmF5KHRoaXMubmVzdGVkKSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogTmFtZXNwYWNlIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElOYW1lc3BhY2VcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBOYW1lc3BhY2Ugb3B0aW9uc1xuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxBbnlOZXN0ZWRPYmplY3Q+fSBbbmVzdGVkXSBOZXN0ZWQgb2JqZWN0IGRlc2NyaXB0b3JzXG4gKi9cblxuLyoqXG4gKiBBbnkgZXh0ZW5zaW9uIGZpZWxkIGRlc2NyaXB0b3IuXG4gKiBAdHlwZWRlZiBBbnlFeHRlbnNpb25GaWVsZFxuICogQHR5cGUge0lFeHRlbnNpb25GaWVsZHxJRXh0ZW5zaW9uTWFwRmllbGR9XG4gKi9cblxuLyoqXG4gKiBBbnkgbmVzdGVkIG9iamVjdCBkZXNjcmlwdG9yLlxuICogQHR5cGVkZWYgQW55TmVzdGVkT2JqZWN0XG4gKiBAdHlwZSB7SUVudW18SVR5cGV8SVNlcnZpY2V8QW55RXh0ZW5zaW9uRmllbGR8SU5hbWVzcGFjZXxJT25lT2Z9XG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIG5hbWVzcGFjZSB0byBhIG5hbWVzcGFjZSBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7SU5hbWVzcGFjZX0gTmFtZXNwYWNlIGRlc2NyaXB0b3JcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcbiAgICAgICAgXCJvcHRpb25zXCIgLCB0aGlzLm9wdGlvbnMsXG4gICAgICAgIFwibmVzdGVkXCIgICwgYXJyYXlUb0pTT04odGhpcy5uZXN0ZWRBcnJheSwgdG9KU09OT3B0aW9ucylcbiAgICBdKTtcbn07XG5cbi8qKlxuICogQWRkcyBuZXN0ZWQgb2JqZWN0cyB0byB0aGlzIG5hbWVzcGFjZSBmcm9tIG5lc3RlZCBvYmplY3QgZGVzY3JpcHRvcnMuXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLEFueU5lc3RlZE9iamVjdD59IG5lc3RlZEpzb24gQW55IG5lc3RlZCBvYmplY3QgZGVzY3JpcHRvcnNcbiAqIEByZXR1cm5zIHtOYW1lc3BhY2V9IGB0aGlzYFxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmFkZEpTT04gPSBmdW5jdGlvbiBhZGRKU09OKG5lc3RlZEpzb24pIHtcbiAgICB2YXIgbnMgPSB0aGlzO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKG5lc3RlZEpzb24pIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyhuZXN0ZWRKc29uKSwgaSA9IDAsIG5lc3RlZDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRKc29uW25hbWVzW2ldXTtcbiAgICAgICAgICAgIG5zLmFkZCggLy8gbW9zdCB0byBsZWFzdCBsaWtlbHlcbiAgICAgICAgICAgICAgICAoIG5lc3RlZC5maWVsZHMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gVHlwZS5mcm9tSlNPTlxuICAgICAgICAgICAgICAgIDogbmVzdGVkLnZhbHVlcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBFbnVtLmZyb21KU09OXG4gICAgICAgICAgICAgICAgOiBuZXN0ZWQubWV0aG9kcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBTZXJ2aWNlLmZyb21KU09OXG4gICAgICAgICAgICAgICAgOiBuZXN0ZWQuaWQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gRmllbGQuZnJvbUpTT05cbiAgICAgICAgICAgICAgICA6IE5hbWVzcGFjZS5mcm9tSlNPTiApKG5hbWVzW2ldLCBuZXN0ZWQpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuZXN0ZWQgb2JqZWN0IG9mIHRoZSBzcGVjaWZpZWQgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5lc3RlZCBvYmplY3QgbmFtZVxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R8bnVsbH0gVGhlIHJlZmxlY3Rpb24gb2JqZWN0IG9yIGBudWxsYCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5uZXN0ZWQgJiYgdGhpcy5uZXN0ZWRbbmFtZV1cbiAgICAgICAgfHwgbnVsbDtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWVzIG9mIHRoZSBuZXN0ZWQge0BsaW5rIEVudW18ZW51bX0gb2YgdGhlIHNwZWNpZmllZCBuYW1lLlxuICogVGhpcyBtZXRob2RzIGRpZmZlcnMgZnJvbSB7QGxpbmsgTmFtZXNwYWNlI2dldHxnZXR9IGluIHRoYXQgaXQgcmV0dXJucyBhbiBlbnVtJ3MgdmFsdWVzIGRpcmVjdGx5IGFuZCB0aHJvd3MgaW5zdGVhZCBvZiByZXR1cm5pbmcgYG51bGxgLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmVzdGVkIGVudW0gbmFtZVxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLG51bWJlcj59IEVudW0gdmFsdWVzXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgaXMgbm8gc3VjaCBlbnVtXG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuZ2V0RW51bSA9IGZ1bmN0aW9uIGdldEVudW0obmFtZSkge1xuICAgIGlmICh0aGlzLm5lc3RlZCAmJiB0aGlzLm5lc3RlZFtuYW1lXSBpbnN0YW5jZW9mIEVudW0pXG4gICAgICAgIHJldHVybiB0aGlzLm5lc3RlZFtuYW1lXS52YWx1ZXM7XG4gICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIGVudW06IFwiICsgbmFtZSk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBuZXN0ZWQgb2JqZWN0IHRvIHRoaXMgbmFtZXNwYWNlLlxuICogQHBhcmFtIHtSZWZsZWN0aW9uT2JqZWN0fSBvYmplY3QgTmVzdGVkIG9iamVjdCB0byBhZGRcbiAqIEByZXR1cm5zIHtOYW1lc3BhY2V9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgbmVzdGVkIG9iamVjdCB3aXRoIHRoaXMgbmFtZVxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChvYmplY3QpIHtcblxuICAgIGlmICghKG9iamVjdCBpbnN0YW5jZW9mIEZpZWxkICYmIG9iamVjdC5leHRlbmQgIT09IHVuZGVmaW5lZCB8fCBvYmplY3QgaW5zdGFuY2VvZiBUeXBlICB8fCBvYmplY3QgaW5zdGFuY2VvZiBPbmVPZiB8fCBvYmplY3QgaW5zdGFuY2VvZiBFbnVtIHx8IG9iamVjdCBpbnN0YW5jZW9mIFNlcnZpY2UgfHwgb2JqZWN0IGluc3RhbmNlb2YgTmFtZXNwYWNlKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwib2JqZWN0IG11c3QgYmUgYSB2YWxpZCBuZXN0ZWQgb2JqZWN0XCIpO1xuXG4gICAgaWYgKCF0aGlzLm5lc3RlZClcbiAgICAgICAgdGhpcy5uZXN0ZWQgPSB7fTtcbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHByZXYgPSB0aGlzLmdldChvYmplY3QubmFtZSk7XG4gICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICBpZiAocHJldiBpbnN0YW5jZW9mIE5hbWVzcGFjZSAmJiBvYmplY3QgaW5zdGFuY2VvZiBOYW1lc3BhY2UgJiYgIShwcmV2IGluc3RhbmNlb2YgVHlwZSB8fCBwcmV2IGluc3RhbmNlb2YgU2VydmljZSkpIHtcbiAgICAgICAgICAgICAgICAvLyByZXBsYWNlIHBsYWluIG5hbWVzcGFjZSBidXQga2VlcCBleGlzdGluZyBuZXN0ZWQgZWxlbWVudHMgYW5kIG9wdGlvbnNcbiAgICAgICAgICAgICAgICB2YXIgbmVzdGVkID0gcHJldi5uZXN0ZWRBcnJheTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5lc3RlZC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmFkZChuZXN0ZWRbaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHByZXYpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5uZXN0ZWQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmVzdGVkID0ge307XG4gICAgICAgICAgICAgICAgb2JqZWN0LnNldE9wdGlvbnMocHJldi5vcHRpb25zLCB0cnVlKTtcblxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJkdXBsaWNhdGUgbmFtZSAnXCIgKyBvYmplY3QubmFtZSArIFwiJyBpbiBcIiArIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMubmVzdGVkW29iamVjdC5uYW1lXSA9IG9iamVjdDtcbiAgICBvYmplY3Qub25BZGQodGhpcyk7XG4gICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBuZXN0ZWQgb2JqZWN0IGZyb20gdGhpcyBuYW1lc3BhY2UuXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IG9iamVjdCBOZXN0ZWQgb2JqZWN0IHRvIHJlbW92ZVxuICogQHJldHVybnMge05hbWVzcGFjZX0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICogQHRocm93cyB7RXJyb3J9IElmIGBvYmplY3RgIGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIG5hbWVzcGFjZVxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShvYmplY3QpIHtcblxuICAgIGlmICghKG9iamVjdCBpbnN0YW5jZW9mIFJlZmxlY3Rpb25PYmplY3QpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJvYmplY3QgbXVzdCBiZSBhIFJlZmxlY3Rpb25PYmplY3RcIik7XG4gICAgaWYgKG9iamVjdC5wYXJlbnQgIT09IHRoaXMpXG4gICAgICAgIHRocm93IEVycm9yKG9iamVjdCArIFwiIGlzIG5vdCBhIG1lbWJlciBvZiBcIiArIHRoaXMpO1xuXG4gICAgZGVsZXRlIHRoaXMubmVzdGVkW29iamVjdC5uYW1lXTtcbiAgICBpZiAoIU9iamVjdC5rZXlzKHRoaXMubmVzdGVkKS5sZW5ndGgpXG4gICAgICAgIHRoaXMubmVzdGVkID0gdW5kZWZpbmVkO1xuXG4gICAgb2JqZWN0Lm9uUmVtb3ZlKHRoaXMpO1xuICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xufTtcblxuLyoqXG4gKiBEZWZpbmVzIGFkZGl0aWFsIG5hbWVzcGFjZXMgd2l0aGluIHRoaXMgb25lIGlmIG5vdCB5ZXQgZXhpc3RpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0aCBQYXRoIHRvIGNyZWF0ZVxuICogQHBhcmFtIHsqfSBbanNvbl0gTmVzdGVkIHR5cGVzIHRvIGNyZWF0ZSBmcm9tIEpTT05cbiAqIEByZXR1cm5zIHtOYW1lc3BhY2V9IFBvaW50ZXIgdG8gdGhlIGxhc3QgbmFtZXNwYWNlIGNyZWF0ZWQgb3IgYHRoaXNgIGlmIHBhdGggaXMgZW1wdHlcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5kZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUocGF0aCwganNvbikge1xuXG4gICAgaWYgKHV0aWwuaXNTdHJpbmcocGF0aCkpXG4gICAgICAgIHBhdGggPSBwYXRoLnNwbGl0KFwiLlwiKTtcbiAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShwYXRoKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiaWxsZWdhbCBwYXRoXCIpO1xuICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoICYmIHBhdGhbMF0gPT09IFwiXCIpXG4gICAgICAgIHRocm93IEVycm9yKFwicGF0aCBtdXN0IGJlIHJlbGF0aXZlXCIpO1xuXG4gICAgdmFyIHB0ciA9IHRoaXM7XG4gICAgd2hpbGUgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcGFydCA9IHBhdGguc2hpZnQoKTtcbiAgICAgICAgaWYgKHB0ci5uZXN0ZWQgJiYgcHRyLm5lc3RlZFtwYXJ0XSkge1xuICAgICAgICAgICAgcHRyID0gcHRyLm5lc3RlZFtwYXJ0XTtcbiAgICAgICAgICAgIGlmICghKHB0ciBpbnN0YW5jZW9mIE5hbWVzcGFjZSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJwYXRoIGNvbmZsaWN0cyB3aXRoIG5vbi1uYW1lc3BhY2Ugb2JqZWN0c1wiKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBwdHIuYWRkKHB0ciA9IG5ldyBOYW1lc3BhY2UocGFydCkpO1xuICAgIH1cbiAgICBpZiAoanNvbilcbiAgICAgICAgcHRyLmFkZEpTT04oanNvbik7XG4gICAgcmV0dXJuIHB0cjtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhpcyBuYW1lc3BhY2UncyBhbmQgYWxsIGl0cyBuZXN0ZWQgb2JqZWN0cycgdHlwZSByZWZlcmVuY2VzLiBVc2VmdWwgdG8gdmFsaWRhdGUgYSByZWZsZWN0aW9uIHRyZWUsIGJ1dCBjb21lcyBhdCBhIGNvc3QuXG4gKiBAcmV0dXJucyB7TmFtZXNwYWNlfSBgdGhpc2BcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5yZXNvbHZlQWxsID0gZnVuY3Rpb24gcmVzb2x2ZUFsbCgpIHtcbiAgICB2YXIgbmVzdGVkID0gdGhpcy5uZXN0ZWRBcnJheSwgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBuZXN0ZWQubGVuZ3RoKVxuICAgICAgICBpZiAobmVzdGVkW2ldIGluc3RhbmNlb2YgTmFtZXNwYWNlKVxuICAgICAgICAgICAgbmVzdGVkW2krK10ucmVzb2x2ZUFsbCgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBuZXN0ZWRbaSsrXS5yZXNvbHZlKCk7XG4gICAgcmV0dXJuIHRoaXMucmVzb2x2ZSgpO1xufTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSBsb29rcyB1cCB0aGUgcmVmbGVjdGlvbiBvYmplY3QgbWF0Y2hpbmcgdGhlIHNwZWNpZmllZCBwYXRoIGluIHRoZSBzY29wZSBvZiB0aGlzIG5hbWVzcGFjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxuICogQHBhcmFtIHsqfEFycmF5LjwqPn0gZmlsdGVyVHlwZXMgRmlsdGVyIHR5cGVzLCBhbnkgY29tYmluYXRpb24gb2YgdGhlIGNvbnN0cnVjdG9ycyBvZiBgcHJvdG9idWYuVHlwZWAsIGBwcm90b2J1Zi5FbnVtYCwgYHByb3RvYnVmLlNlcnZpY2VgIGV0Yy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmVudEFscmVhZHlDaGVja2VkPWZhbHNlXSBJZiBrbm93biwgd2hldGhlciB0aGUgcGFyZW50IGhhcyBhbHJlYWR5IGJlZW4gY2hlY2tlZFxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R8bnVsbH0gTG9va2VkIHVwIG9iamVjdCBvciBgbnVsbGAgaWYgbm9uZSBjb3VsZCBiZSBmb3VuZFxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmxvb2t1cCA9IGZ1bmN0aW9uIGxvb2t1cChwYXRoLCBmaWx0ZXJUeXBlcywgcGFyZW50QWxyZWFkeUNoZWNrZWQpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXJUeXBlcyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgcGFyZW50QWxyZWFkeUNoZWNrZWQgPSBmaWx0ZXJUeXBlcztcbiAgICAgICAgZmlsdGVyVHlwZXMgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmIChmaWx0ZXJUeXBlcyAmJiAhQXJyYXkuaXNBcnJheShmaWx0ZXJUeXBlcykpXG4gICAgICAgIGZpbHRlclR5cGVzID0gWyBmaWx0ZXJUeXBlcyBdO1xuXG4gICAgaWYgKHV0aWwuaXNTdHJpbmcocGF0aCkgJiYgcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHBhdGggPT09IFwiLlwiKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucm9vdDtcbiAgICAgICAgcGF0aCA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGgubGVuZ3RoKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIC8vIFN0YXJ0IGF0IHJvb3QgaWYgcGF0aCBpcyBhYnNvbHV0ZVxuICAgIGlmIChwYXRoWzBdID09PSBcIlwiKVxuICAgICAgICByZXR1cm4gdGhpcy5yb290Lmxvb2t1cChwYXRoLnNsaWNlKDEpLCBmaWx0ZXJUeXBlcyk7XG5cbiAgICAvLyBUZXN0IGlmIHRoZSBmaXJzdCBwYXJ0IG1hdGNoZXMgYW55IG5lc3RlZCBvYmplY3QsIGFuZCBpZiBzbywgdHJhdmVyc2UgaWYgcGF0aCBjb250YWlucyBtb3JlXG4gICAgdmFyIGZvdW5kID0gdGhpcy5nZXQocGF0aFswXSk7XG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKCFmaWx0ZXJUeXBlcyB8fCBmaWx0ZXJUeXBlcy5pbmRleE9mKGZvdW5kLmNvbnN0cnVjdG9yKSA+IC0xKVxuICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZDtcbiAgICAgICAgfSBlbHNlIGlmIChmb3VuZCBpbnN0YW5jZW9mIE5hbWVzcGFjZSAmJiAoZm91bmQgPSBmb3VuZC5sb29rdXAocGF0aC5zbGljZSgxKSwgZmlsdGVyVHlwZXMsIHRydWUpKSlcbiAgICAgICAgICAgIHJldHVybiBmb3VuZDtcblxuICAgIC8vIE90aGVyd2lzZSB0cnkgZWFjaCBuZXN0ZWQgbmFtZXNwYWNlXG4gICAgfSBlbHNlXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5uZXN0ZWRBcnJheS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGlmICh0aGlzLl9uZXN0ZWRBcnJheVtpXSBpbnN0YW5jZW9mIE5hbWVzcGFjZSAmJiAoZm91bmQgPSB0aGlzLl9uZXN0ZWRBcnJheVtpXS5sb29rdXAocGF0aCwgZmlsdGVyVHlwZXMsIHRydWUpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7XG5cbiAgICAvLyBJZiB0aGVyZSBoYXNuJ3QgYmVlbiBhIG1hdGNoLCB0cnkgYWdhaW4gYXQgdGhlIHBhcmVudFxuICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnRBbHJlYWR5Q2hlY2tlZClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50Lmxvb2t1cChwYXRoLCBmaWx0ZXJUeXBlcyk7XG59O1xuXG4vKipcbiAqIExvb2tzIHVwIHRoZSByZWZsZWN0aW9uIG9iamVjdCBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIHJlbGF0aXZlIHRvIHRoaXMgbmFtZXNwYWNlLlxuICogQG5hbWUgTmFtZXNwYWNlQmFzZSNsb29rdXBcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBsb29rIHVwXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJlbnRBbHJlYWR5Q2hlY2tlZD1mYWxzZV0gV2hldGhlciB0aGUgcGFyZW50IGhhcyBhbHJlYWR5IGJlZW4gY2hlY2tlZFxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R8bnVsbH0gTG9va2VkIHVwIG9iamVjdCBvciBgbnVsbGAgaWYgbm9uZSBjb3VsZCBiZSBmb3VuZFxuICogQHZhcmlhdGlvbiAyXG4gKi9cbi8vIGxvb2t1cChwYXRoOiBzdHJpbmcsIFtwYXJlbnRBbHJlYWR5Q2hlY2tlZDogYm9vbGVhbl0pXG5cbi8qKlxuICogTG9va3MgdXAgdGhlIHtAbGluayBUeXBlfHR5cGV9IGF0IHRoZSBzcGVjaWZpZWQgcGF0aCwgcmVsYXRpdmUgdG8gdGhpcyBuYW1lc3BhY2UuXG4gKiBCZXNpZGVzIGl0cyBzaWduYXR1cmUsIHRoaXMgbWV0aG9kcyBkaWZmZXJzIGZyb20ge0BsaW5rIE5hbWVzcGFjZSNsb29rdXB8bG9va3VwfSBpbiB0aGF0IGl0IHRocm93cyBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0aCBQYXRoIHRvIGxvb2sgdXBcbiAqIEByZXR1cm5zIHtUeXBlfSBMb29rZWQgdXAgdHlwZVxuICogQHRocm93cyB7RXJyb3J9IElmIGBwYXRoYCBkb2VzIG5vdCBwb2ludCB0byBhIHR5cGVcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5sb29rdXBUeXBlID0gZnVuY3Rpb24gbG9va3VwVHlwZShwYXRoKSB7XG4gICAgdmFyIGZvdW5kID0gdGhpcy5sb29rdXAocGF0aCwgWyBUeXBlIF0pO1xuICAgIGlmICghZm91bmQpXG4gICAgICAgIHRocm93IEVycm9yKFwibm8gc3VjaCB0eXBlOiBcIiArIHBhdGgpO1xuICAgIHJldHVybiBmb3VuZDtcbn07XG5cbi8qKlxuICogTG9va3MgdXAgdGhlIHZhbHVlcyBvZiB0aGUge0BsaW5rIEVudW18ZW51bX0gYXQgdGhlIHNwZWNpZmllZCBwYXRoLCByZWxhdGl2ZSB0byB0aGlzIG5hbWVzcGFjZS5cbiAqIEJlc2lkZXMgaXRzIHNpZ25hdHVyZSwgdGhpcyBtZXRob2RzIGRpZmZlcnMgZnJvbSB7QGxpbmsgTmFtZXNwYWNlI2xvb2t1cHxsb29rdXB9IGluIHRoYXQgaXQgdGhyb3dzIGluc3RlYWQgb2YgcmV0dXJuaW5nIGBudWxsYC5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxuICogQHJldHVybnMge0VudW19IExvb2tlZCB1cCBlbnVtXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYHBhdGhgIGRvZXMgbm90IHBvaW50IHRvIGFuIGVudW1cbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5sb29rdXBFbnVtID0gZnVuY3Rpb24gbG9va3VwRW51bShwYXRoKSB7XG4gICAgdmFyIGZvdW5kID0gdGhpcy5sb29rdXAocGF0aCwgWyBFbnVtIF0pO1xuICAgIGlmICghZm91bmQpXG4gICAgICAgIHRocm93IEVycm9yKFwibm8gc3VjaCBFbnVtICdcIiArIHBhdGggKyBcIicgaW4gXCIgKyB0aGlzKTtcbiAgICByZXR1cm4gZm91bmQ7XG59O1xuXG4vKipcbiAqIExvb2tzIHVwIHRoZSB7QGxpbmsgVHlwZXx0eXBlfSBvciB7QGxpbmsgRW51bXxlbnVtfSBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIHJlbGF0aXZlIHRvIHRoaXMgbmFtZXNwYWNlLlxuICogQmVzaWRlcyBpdHMgc2lnbmF0dXJlLCB0aGlzIG1ldGhvZHMgZGlmZmVycyBmcm9tIHtAbGluayBOYW1lc3BhY2UjbG9va3VwfGxvb2t1cH0gaW4gdGhhdCBpdCB0aHJvd3MgaW5zdGVhZCBvZiByZXR1cm5pbmcgYG51bGxgLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBsb29rIHVwXG4gKiBAcmV0dXJucyB7VHlwZX0gTG9va2VkIHVwIHR5cGUgb3IgZW51bVxuICogQHRocm93cyB7RXJyb3J9IElmIGBwYXRoYCBkb2VzIG5vdCBwb2ludCB0byBhIHR5cGUgb3IgZW51bVxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmxvb2t1cFR5cGVPckVudW0gPSBmdW5jdGlvbiBsb29rdXBUeXBlT3JFbnVtKHBhdGgpIHtcbiAgICB2YXIgZm91bmQgPSB0aGlzLmxvb2t1cChwYXRoLCBbIFR5cGUsIEVudW0gXSk7XG4gICAgaWYgKCFmb3VuZClcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIFR5cGUgb3IgRW51bSAnXCIgKyBwYXRoICsgXCInIGluIFwiICsgdGhpcyk7XG4gICAgcmV0dXJuIGZvdW5kO1xufTtcblxuLyoqXG4gKiBMb29rcyB1cCB0aGUge0BsaW5rIFNlcnZpY2V8c2VydmljZX0gYXQgdGhlIHNwZWNpZmllZCBwYXRoLCByZWxhdGl2ZSB0byB0aGlzIG5hbWVzcGFjZS5cbiAqIEJlc2lkZXMgaXRzIHNpZ25hdHVyZSwgdGhpcyBtZXRob2RzIGRpZmZlcnMgZnJvbSB7QGxpbmsgTmFtZXNwYWNlI2xvb2t1cHxsb29rdXB9IGluIHRoYXQgaXQgdGhyb3dzIGluc3RlYWQgb2YgcmV0dXJuaW5nIGBudWxsYC5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxuICogQHJldHVybnMge1NlcnZpY2V9IExvb2tlZCB1cCBzZXJ2aWNlXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYHBhdGhgIGRvZXMgbm90IHBvaW50IHRvIGEgc2VydmljZVxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmxvb2t1cFNlcnZpY2UgPSBmdW5jdGlvbiBsb29rdXBTZXJ2aWNlKHBhdGgpIHtcbiAgICB2YXIgZm91bmQgPSB0aGlzLmxvb2t1cChwYXRoLCBbIFNlcnZpY2UgXSk7XG4gICAgaWYgKCFmb3VuZClcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIFNlcnZpY2UgJ1wiICsgcGF0aCArIFwiJyBpbiBcIiArIHRoaXMpO1xuICAgIHJldHVybiBmb3VuZDtcbn07XG5cbi8vIFNldHMgdXAgY3ljbGljIGRlcGVuZGVuY2llcyAoY2FsbGVkIGluIGluZGV4LWxpZ2h0KVxuTmFtZXNwYWNlLl9jb25maWd1cmUgPSBmdW5jdGlvbihUeXBlXywgU2VydmljZV8sIEVudW1fKSB7XG4gICAgVHlwZSAgICA9IFR5cGVfO1xuICAgIFNlcnZpY2UgPSBTZXJ2aWNlXztcbiAgICBFbnVtICAgID0gRW51bV87XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3Rpb25PYmplY3Q7XG5cblJlZmxlY3Rpb25PYmplY3QuY2xhc3NOYW1lID0gXCJSZWZsZWN0aW9uT2JqZWN0XCI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxudmFyIFJvb3Q7IC8vIGN5Y2xpY1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcmVmbGVjdGlvbiBvYmplY3QgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIEJhc2UgY2xhc3Mgb2YgYWxsIHJlZmxlY3Rpb24gb2JqZWN0cy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT2JqZWN0IG5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXG4gKiBAYWJzdHJhY3RcbiAqL1xuZnVuY3Rpb24gUmVmbGVjdGlvbk9iamVjdChuYW1lLCBvcHRpb25zKSB7XG5cbiAgICBpZiAoIXV0aWwuaXNTdHJpbmcobmFtZSkpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIm5hbWUgbXVzdCBiZSBhIHN0cmluZ1wiKTtcblxuICAgIGlmIChvcHRpb25zICYmICF1dGlsLmlzT2JqZWN0KG9wdGlvbnMpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0XCIpO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj58dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogUGFyc2VkIE9wdGlvbnMuXG4gICAgICogQHR5cGUge0FycmF5LjxPYmplY3QuPHN0cmluZywqPj58dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMucGFyc2VkT3B0aW9ucyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBVbmlxdWUgbmFtZSB3aXRoaW4gaXRzIG5hbWVzcGFjZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG5cbiAgICAvKipcbiAgICAgKiBQYXJlbnQgbmFtZXNwYWNlLlxuICAgICAqIEB0eXBlIHtOYW1lc3BhY2V8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGFscmVhZHkgcmVzb2x2ZWQgb3Igbm90LlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMucmVzb2x2ZWQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENvbW1lbnQgdGV4dCwgaWYgYW55LlxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmNvbW1lbnQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogRGVmaW5pbmcgZmlsZSBuYW1lLlxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmZpbGVuYW1lID0gbnVsbDtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIFJlZmVyZW5jZSB0byB0aGUgcm9vdCBuYW1lc3BhY2UuXG4gICAgICogQG5hbWUgUmVmbGVjdGlvbk9iamVjdCNyb290XG4gICAgICogQHR5cGUge1Jvb3R9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcm9vdDoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHB0ciA9IHRoaXM7XG4gICAgICAgICAgICB3aGlsZSAocHRyLnBhcmVudCAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICBwdHIgPSBwdHIucGFyZW50O1xuICAgICAgICAgICAgcmV0dXJuIHB0cjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGdWxsIG5hbWUgaW5jbHVkaW5nIGxlYWRpbmcgZG90LlxuICAgICAqIEBuYW1lIFJlZmxlY3Rpb25PYmplY3QjZnVsbE5hbWVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGZ1bGxOYW1lOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IFsgdGhpcy5uYW1lIF0sXG4gICAgICAgICAgICAgICAgcHRyID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICB3aGlsZSAocHRyKSB7XG4gICAgICAgICAgICAgICAgcGF0aC51bnNoaWZ0KHB0ci5uYW1lKTtcbiAgICAgICAgICAgICAgICBwdHIgPSBwdHIucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhdGguam9pbihcIi5cIik7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIHJlZmxlY3Rpb24gb2JqZWN0IHRvIGl0cyBkZXNjcmlwdG9yIHJlcHJlc2VudGF0aW9uLlxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBEZXNjcmlwdG9yXG4gKiBAYWJzdHJhY3RcbiAqL1xuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUudG9KU09OID0gLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHRocm93IEVycm9yKCk7IC8vIG5vdCBpbXBsZW1lbnRlZCwgc2hvdWxkbid0IGhhcHBlblxufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiB0aGlzIG9iamVjdCBpcyBhZGRlZCB0byBhIHBhcmVudC5cbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gcGFyZW50IFBhcmVudCBhZGRlZCB0b1xuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUub25BZGQgPSBmdW5jdGlvbiBvbkFkZChwYXJlbnQpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQgIT09IHBhcmVudClcbiAgICAgICAgdGhpcy5wYXJlbnQucmVtb3ZlKHRoaXMpO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMucmVzb2x2ZWQgPSBmYWxzZTtcbiAgICB2YXIgcm9vdCA9IHBhcmVudC5yb290O1xuICAgIGlmIChyb290IGluc3RhbmNlb2YgUm9vdClcbiAgICAgICAgcm9vdC5faGFuZGxlQWRkKHRoaXMpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiB0aGlzIG9iamVjdCBpcyByZW1vdmVkIGZyb20gYSBwYXJlbnQuXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IHBhcmVudCBQYXJlbnQgcmVtb3ZlZCBmcm9tXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uIG9uUmVtb3ZlKHBhcmVudCkge1xuICAgIHZhciByb290ID0gcGFyZW50LnJvb3Q7XG4gICAgaWYgKHJvb3QgaW5zdGFuY2VvZiBSb290KVxuICAgICAgICByb290Ll9oYW5kbGVSZW1vdmUodGhpcyk7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIHRoaXMucmVzb2x2ZWQgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhpcyBvYmplY3RzIHR5cGUgcmVmZXJlbmNlcy5cbiAqIEByZXR1cm5zIHtSZWZsZWN0aW9uT2JqZWN0fSBgdGhpc2BcbiAqL1xuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgaWYgKHRoaXMucmVzb2x2ZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJvb3QgaW5zdGFuY2VvZiBSb290KVxuICAgICAgICB0aGlzLnJlc29sdmVkID0gdHJ1ZTsgLy8gb25seSBpZiBwYXJ0IG9mIGEgcm9vdFxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXRzIGFuIG9wdGlvbiB2YWx1ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE9wdGlvbiBuYW1lXG4gKiBAcmV0dXJucyB7Kn0gT3B0aW9uIHZhbHVlIG9yIGB1bmRlZmluZWRgIGlmIG5vdCBzZXRcbiAqL1xuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUuZ2V0T3B0aW9uID0gZnVuY3Rpb24gZ2V0T3B0aW9uKG5hbWUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zKVxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW25hbWVdO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIFNldHMgYW4gb3B0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT3B0aW9uIG5hbWVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgT3B0aW9uIHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpZk5vdFNldF0gU2V0cyB0aGUgb3B0aW9uIG9ubHkgaWYgaXQgaXNuJ3QgY3VycmVudGx5IHNldFxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R9IGB0aGlzYFxuICovXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5zZXRPcHRpb24gPSBmdW5jdGlvbiBzZXRPcHRpb24obmFtZSwgdmFsdWUsIGlmTm90U2V0KSB7XG4gICAgaWYgKCFpZk5vdFNldCB8fCAhdGhpcy5vcHRpb25zIHx8IHRoaXMub3B0aW9uc1tuYW1lXSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAodGhpcy5vcHRpb25zIHx8ICh0aGlzLm9wdGlvbnMgPSB7fSkpW25hbWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgYSBwYXJzZWQgb3B0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgcGFyc2VkIE9wdGlvbiBuYW1lXG4gKiBAcGFyYW0geyp9IHZhbHVlIE9wdGlvbiB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BOYW1lIGRvdCAnLicgZGVsaW1pdGVkIGZ1bGwgcGF0aCBvZiBwcm9wZXJ0eSB3aXRoaW4gdGhlIG9wdGlvbiB0byBzZXQuIGlmIHVuZGVmaW5lZFxcZW1wdHksIHdpbGwgYWRkIGEgbmV3IG9wdGlvbiB3aXRoIHRoYXQgdmFsdWVcbiAqIEByZXR1cm5zIHtSZWZsZWN0aW9uT2JqZWN0fSBgdGhpc2BcbiAqL1xuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUuc2V0UGFyc2VkT3B0aW9uID0gZnVuY3Rpb24gc2V0UGFyc2VkT3B0aW9uKG5hbWUsIHZhbHVlLCBwcm9wTmFtZSkge1xuICAgIGlmICghdGhpcy5wYXJzZWRPcHRpb25zKSB7XG4gICAgICAgIHRoaXMucGFyc2VkT3B0aW9ucyA9IFtdO1xuICAgIH1cbiAgICB2YXIgcGFyc2VkT3B0aW9ucyA9IHRoaXMucGFyc2VkT3B0aW9ucztcbiAgICBpZiAocHJvcE5hbWUpIHtcbiAgICAgICAgLy8gSWYgc2V0dGluZyBhIHN1YiBwcm9wZXJ0eSBvZiBhbiBvcHRpb24gdGhlbiB0cnkgdG8gbWVyZ2UgaXRcbiAgICAgICAgLy8gd2l0aCBhbiBleGlzdGluZyBvcHRpb25cbiAgICAgICAgdmFyIG9wdCA9IHBhcnNlZE9wdGlvbnMuZmluZChmdW5jdGlvbiAob3B0KSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdCwgbmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob3B0KSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBmb3VuZCBhbiBleGlzdGluZyBvcHRpb24gLSBqdXN0IG1lcmdlIHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gb3B0W25hbWVdO1xuICAgICAgICAgICAgdXRpbC5zZXRQcm9wZXJ0eShuZXdWYWx1ZSwgcHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgY3JlYXRlIGEgbmV3IG9wdGlvbiwgc2V0IGl0J3MgcHJvcGVydHkgYW5kIGFkZCBpdCB0byB0aGUgbGlzdFxuICAgICAgICAgICAgb3B0ID0ge307XG4gICAgICAgICAgICBvcHRbbmFtZV0gPSB1dGlsLnNldFByb3BlcnR5KHt9LCBwcm9wTmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgcGFyc2VkT3B0aW9ucy5wdXNoKG9wdCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBbHdheXMgY3JlYXRlIGEgbmV3IG9wdGlvbiB3aGVuIHNldHRpbmcgdGhlIHZhbHVlIG9mIHRoZSBvcHRpb24gaXRzZWxmXG4gICAgICAgIHZhciBuZXdPcHQgPSB7fTtcbiAgICAgICAgbmV3T3B0W25hbWVdID0gdmFsdWU7XG4gICAgICAgIHBhcnNlZE9wdGlvbnMucHVzaChuZXdPcHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyBtdWx0aXBsZSBvcHRpb25zLlxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gb3B0aW9ucyBPcHRpb25zIHRvIHNldFxuICogQHBhcmFtIHtib29sZWFufSBbaWZOb3RTZXRdIFNldHMgYW4gb3B0aW9uIG9ubHkgaWYgaXQgaXNuJ3QgY3VycmVudGx5IHNldFxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R9IGB0aGlzYFxuICovXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zLCBpZk5vdFNldCkge1xuICAgIGlmIChvcHRpb25zKVxuICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIHRoaXMuc2V0T3B0aW9uKGtleXNbaV0sIG9wdGlvbnNba2V5c1tpXV0sIGlmTm90U2V0KTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBpbnN0YW5jZSB0byBpdHMgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICogQHJldHVybnMge3N0cmluZ30gQ2xhc3MgbmFtZVssIHNwYWNlLCBmdWxsIG5hbWVdXG4gKi9cblJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuY29uc3RydWN0b3IuY2xhc3NOYW1lLFxuICAgICAgICBmdWxsTmFtZSAgPSB0aGlzLmZ1bGxOYW1lO1xuICAgIGlmIChmdWxsTmFtZS5sZW5ndGgpXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUgKyBcIiBcIiArIGZ1bGxOYW1lO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG59O1xuXG4vLyBTZXRzIHVwIGN5Y2xpYyBkZXBlbmRlbmNpZXMgKGNhbGxlZCBpbiBpbmRleC1saWdodClcblJlZmxlY3Rpb25PYmplY3QuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKFJvb3RfKSB7XG4gICAgUm9vdCA9IFJvb3RfO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBPbmVPZjtcblxuLy8gZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XG52YXIgUmVmbGVjdGlvbk9iamVjdCA9IHJlcXVpcmUoXCIuL29iamVjdFwiKTtcbigoT25lT2YucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gT25lT2YpLmNsYXNzTmFtZSA9IFwiT25lT2ZcIjtcblxudmFyIEZpZWxkID0gcmVxdWlyZShcIi4vZmllbGRcIiksXG4gICAgdXRpbCAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgb25lb2YgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFJlZmxlY3RlZCBvbmVvZi5cbiAqIEBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT25lb2YgbmFtZVxuICogQHBhcmFtIHtzdHJpbmdbXXxPYmplY3QuPHN0cmluZywqPn0gW2ZpZWxkTmFtZXNdIEZpZWxkIG5hbWVzXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRGVjbGFyZWQgb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IFtjb21tZW50XSBDb21tZW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGZpZWxkXG4gKi9cbmZ1bmN0aW9uIE9uZU9mKG5hbWUsIGZpZWxkTmFtZXMsIG9wdGlvbnMsIGNvbW1lbnQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmllbGROYW1lcykpIHtcbiAgICAgICAgb3B0aW9ucyA9IGZpZWxkTmFtZXM7XG4gICAgICAgIGZpZWxkTmFtZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIFJlZmxlY3Rpb25PYmplY3QuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghKGZpZWxkTmFtZXMgPT09IHVuZGVmaW5lZCB8fCBBcnJheS5pc0FycmF5KGZpZWxkTmFtZXMpKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiZmllbGROYW1lcyBtdXN0IGJlIGFuIEFycmF5XCIpO1xuXG4gICAgLyoqXG4gICAgICogRmllbGQgbmFtZXMgdGhhdCBiZWxvbmcgdG8gdGhpcyBvbmVvZi5cbiAgICAgKiBAdHlwZSB7c3RyaW5nW119XG4gICAgICovXG4gICAgdGhpcy5vbmVvZiA9IGZpZWxkTmFtZXMgfHwgW107IC8vIHRvSlNPTiwgbWFya2VyXG5cbiAgICAvKipcbiAgICAgKiBGaWVsZHMgdGhhdCBiZWxvbmcgdG8gdGhpcyBvbmVvZiBhcyBhbiBhcnJheSBmb3IgaXRlcmF0aW9uLlxuICAgICAqIEB0eXBlIHtGaWVsZFtdfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHRoaXMuZmllbGRzQXJyYXkgPSBbXTsgLy8gZGVjbGFyZWQgcmVhZG9ubHkgZm9yIGNvbmZvcm1hbmNlLCBwb3NzaWJseSBub3QgeWV0IGFkZGVkIHRvIHBhcmVudFxuXG4gICAgLyoqXG4gICAgICogQ29tbWVudCBmb3IgdGhpcyBmaWVsZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5jb21tZW50ID0gY29tbWVudDtcbn1cblxuLyoqXG4gKiBPbmVvZiBkZXNjcmlwdG9yLlxuICogQGludGVyZmFjZSBJT25lT2ZcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPHN0cmluZz59IG9uZW9mIE9uZW9mIGZpZWxkIG5hbWVzXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gT25lb2Ygb3B0aW9uc1xuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG9uZW9mIGZyb20gYSBvbmVvZiBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT25lb2YgbmFtZVxuICogQHBhcmFtIHtJT25lT2Z9IGpzb24gT25lb2YgZGVzY3JpcHRvclxuICogQHJldHVybnMge09uZU9mfSBDcmVhdGVkIG9uZW9mXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICovXG5PbmVPZi5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKG5hbWUsIGpzb24pIHtcbiAgICByZXR1cm4gbmV3IE9uZU9mKG5hbWUsIGpzb24ub25lb2YsIGpzb24ub3B0aW9ucywganNvbi5jb21tZW50KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBvbmVvZiB0byBhIG9uZW9mIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtJT25lT2Z9IE9uZW9mIGRlc2NyaXB0b3JcbiAqL1xuT25lT2YucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XG4gICAgdmFyIGtlZXBDb21tZW50cyA9IHRvSlNPTk9wdGlvbnMgPyBCb29sZWFuKHRvSlNPTk9wdGlvbnMua2VlcENvbW1lbnRzKSA6IGZhbHNlO1xuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcbiAgICAgICAgXCJvcHRpb25zXCIgLCB0aGlzLm9wdGlvbnMsXG4gICAgICAgIFwib25lb2ZcIiAgICwgdGhpcy5vbmVvZixcbiAgICAgICAgXCJjb21tZW50XCIgLCBrZWVwQ29tbWVudHMgPyB0aGlzLmNvbW1lbnQgOiB1bmRlZmluZWRcbiAgICBdKTtcbn07XG5cbi8qKlxuICogQWRkcyB0aGUgZmllbGRzIG9mIHRoZSBzcGVjaWZpZWQgb25lb2YgdG8gdGhlIHBhcmVudCBpZiBub3QgYWxyZWFkeSBkb25lIHNvLlxuICogQHBhcmFtIHtPbmVPZn0gb25lb2YgVGhlIG9uZW9mXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQGlubmVyXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIGFkZEZpZWxkc1RvUGFyZW50KG9uZW9mKSB7XG4gICAgaWYgKG9uZW9mLnBhcmVudClcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbmVvZi5maWVsZHNBcnJheS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGlmICghb25lb2YuZmllbGRzQXJyYXlbaV0ucGFyZW50KVxuICAgICAgICAgICAgICAgIG9uZW9mLnBhcmVudC5hZGQob25lb2YuZmllbGRzQXJyYXlbaV0pO1xufVxuXG4vKipcbiAqIEFkZHMgYSBmaWVsZCB0byB0aGlzIG9uZW9mIGFuZCByZW1vdmVzIGl0IGZyb20gaXRzIGN1cnJlbnQgcGFyZW50LCBpZiBhbnkuXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBGaWVsZCB0byBhZGRcbiAqIEByZXR1cm5zIHtPbmVPZn0gYHRoaXNgXG4gKi9cbk9uZU9mLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoZmllbGQpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghKGZpZWxkIGluc3RhbmNlb2YgRmllbGQpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJmaWVsZCBtdXN0IGJlIGEgRmllbGRcIik7XG5cbiAgICBpZiAoZmllbGQucGFyZW50ICYmIGZpZWxkLnBhcmVudCAhPT0gdGhpcy5wYXJlbnQpXG4gICAgICAgIGZpZWxkLnBhcmVudC5yZW1vdmUoZmllbGQpO1xuICAgIHRoaXMub25lb2YucHVzaChmaWVsZC5uYW1lKTtcbiAgICB0aGlzLmZpZWxkc0FycmF5LnB1c2goZmllbGQpO1xuICAgIGZpZWxkLnBhcnRPZiA9IHRoaXM7IC8vIGZpZWxkLnBhcmVudCByZW1haW5zIG51bGxcbiAgICBhZGRGaWVsZHNUb1BhcmVudCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIGZpZWxkIGZyb20gdGhpcyBvbmVvZiBhbmQgcHV0cyBpdCBiYWNrIHRvIHRoZSBvbmVvZidzIHBhcmVudC5cbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIEZpZWxkIHRvIHJlbW92ZVxuICogQHJldHVybnMge09uZU9mfSBgdGhpc2BcbiAqL1xuT25lT2YucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShmaWVsZCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCEoZmllbGQgaW5zdGFuY2VvZiBGaWVsZCkpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImZpZWxkIG11c3QgYmUgYSBGaWVsZFwiKTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuZmllbGRzQXJyYXkuaW5kZXhPZihmaWVsZCk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaW5kZXggPCAwKVxuICAgICAgICB0aHJvdyBFcnJvcihmaWVsZCArIFwiIGlzIG5vdCBhIG1lbWJlciBvZiBcIiArIHRoaXMpO1xuXG4gICAgdGhpcy5maWVsZHNBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIGluZGV4ID0gdGhpcy5vbmVvZi5pbmRleE9mKGZpZWxkLm5hbWUpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaW5kZXggPiAtMSkgLy8gdGhlb3JldGljYWxcbiAgICAgICAgdGhpcy5vbmVvZi5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgZmllbGQucGFydE9mID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbk9uZU9mLnByb3RvdHlwZS5vbkFkZCA9IGZ1bmN0aW9uIG9uQWRkKHBhcmVudCkge1xuICAgIFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLm9uQWRkLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy8gQ29sbGVjdCBwcmVzZW50IGZpZWxkc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vbmVvZi5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgZmllbGQgPSBwYXJlbnQuZ2V0KHRoaXMub25lb2ZbaV0pO1xuICAgICAgICBpZiAoZmllbGQgJiYgIWZpZWxkLnBhcnRPZikge1xuICAgICAgICAgICAgZmllbGQucGFydE9mID0gc2VsZjtcbiAgICAgICAgICAgIHNlbGYuZmllbGRzQXJyYXkucHVzaChmaWVsZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQWRkIG5vdCB5ZXQgcHJlc2VudCBmaWVsZHNcbiAgICBhZGRGaWVsZHNUb1BhcmVudCh0aGlzKTtcbn07XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbk9uZU9mLnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uIG9uUmVtb3ZlKHBhcmVudCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBmaWVsZDsgaSA8IHRoaXMuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmICgoZmllbGQgPSB0aGlzLmZpZWxkc0FycmF5W2ldKS5wYXJlbnQpXG4gICAgICAgICAgICBmaWVsZC5wYXJlbnQucmVtb3ZlKGZpZWxkKTtcbiAgICBSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5vblJlbW92ZS5jYWxsKHRoaXMsIHBhcmVudCk7XG59O1xuXG4vKipcbiAqIERlY29yYXRvciBmdW5jdGlvbiBhcyByZXR1cm5lZCBieSB7QGxpbmsgT25lT2YuZH0gKFR5cGVTY3JpcHQpLlxuICogQHR5cGVkZWYgT25lT2ZEZWNvcmF0b3JcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGFyZ2V0IHByb3RvdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IG9uZW9mTmFtZSBPbmVPZiBuYW1lXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbi8qKlxuICogT25lT2YgZGVjb3JhdG9yIChUeXBlU2NyaXB0KS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHsuLi5zdHJpbmd9IGZpZWxkTmFtZXMgRmllbGQgbmFtZXNcbiAqIEByZXR1cm5zIHtPbmVPZkRlY29yYXRvcn0gRGVjb3JhdG9yIGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIHN0cmluZ1xuICovXG5PbmVPZi5kID0gZnVuY3Rpb24gZGVjb3JhdGVPbmVPZigpIHtcbiAgICB2YXIgZmllbGROYW1lcyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxcbiAgICAgICAgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgIGZpZWxkTmFtZXNbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiBmdW5jdGlvbiBvbmVPZkRlY29yYXRvcihwcm90b3R5cGUsIG9uZW9mTmFtZSkge1xuICAgICAgICB1dGlsLmRlY29yYXRlVHlwZShwcm90b3R5cGUuY29uc3RydWN0b3IpXG4gICAgICAgICAgICAuYWRkKG5ldyBPbmVPZihvbmVvZk5hbWUsIGZpZWxkTmFtZXMpKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgb25lb2ZOYW1lLCB7XG4gICAgICAgICAgICBnZXQ6IHV0aWwub25lT2ZHZXR0ZXIoZmllbGROYW1lcyksXG4gICAgICAgICAgICBzZXQ6IHV0aWwub25lT2ZTZXR0ZXIoZmllbGROYW1lcylcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5cbnBhcnNlLmZpbGVuYW1lID0gbnVsbDtcbnBhcnNlLmRlZmF1bHRzID0geyBrZWVwQ2FzZTogZmFsc2UgfTtcblxudmFyIHRva2VuaXplICA9IHJlcXVpcmUoXCIuL3Rva2VuaXplXCIpLFxuICAgIFJvb3QgICAgICA9IHJlcXVpcmUoXCIuL3Jvb3RcIiksXG4gICAgVHlwZSAgICAgID0gcmVxdWlyZShcIi4vdHlwZVwiKSxcbiAgICBGaWVsZCAgICAgPSByZXF1aXJlKFwiLi9maWVsZFwiKSxcbiAgICBNYXBGaWVsZCAgPSByZXF1aXJlKFwiLi9tYXBmaWVsZFwiKSxcbiAgICBPbmVPZiAgICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKSxcbiAgICBFbnVtICAgICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIFNlcnZpY2UgICA9IHJlcXVpcmUoXCIuL3NlcnZpY2VcIiksXG4gICAgTWV0aG9kICAgID0gcmVxdWlyZShcIi4vbWV0aG9kXCIpLFxuICAgIHR5cGVzICAgICA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpLFxuICAgIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbnZhciBiYXNlMTBSZSAgICA9IC9eWzEtOV1bMC05XSokLyxcbiAgICBiYXNlMTBOZWdSZSA9IC9eLT9bMS05XVswLTldKiQvLFxuICAgIGJhc2UxNlJlICAgID0gL14wW3hdWzAtOWEtZkEtRl0rJC8sXG4gICAgYmFzZTE2TmVnUmUgPSAvXi0/MFt4XVswLTlhLWZBLUZdKyQvLFxuICAgIGJhc2U4UmUgICAgID0gL14wWzAtN10rJC8sXG4gICAgYmFzZThOZWdSZSAgPSAvXi0/MFswLTddKyQvLFxuICAgIG51bWJlclJlICAgID0gL14oPyFbZUVdKVswLTldKig/OlxcLlswLTldKik/KD86W2VFXVsrLV0/WzAtOV0rKT8kLyxcbiAgICBuYW1lUmUgICAgICA9IC9eW2EtekEtWl9dW2EtekEtWl8wLTldKiQvLFxuICAgIHR5cGVSZWZSZSAgID0gL14oPzpcXC4/W2EtekEtWl9dW2EtekEtWl8wLTldKikoPzpcXC5bYS16QS1aX11bYS16QS1aXzAtOV0qKSokLyxcbiAgICBmcVR5cGVSZWZSZSA9IC9eKD86XFwuW2EtekEtWl9dW2EtekEtWl8wLTldKikrJC87XG5cbi8qKlxuICogUmVzdWx0IG9iamVjdCByZXR1cm5lZCBmcm9tIHtAbGluayBwYXJzZX0uXG4gKiBAaW50ZXJmYWNlIElQYXJzZXJSZXN1bHRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfHVuZGVmaW5lZH0gcGFja2FnZSBQYWNrYWdlIG5hbWUsIGlmIGRlY2xhcmVkXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfHVuZGVmaW5lZH0gaW1wb3J0cyBJbXBvcnRzLCBpZiBhbnlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW118dW5kZWZpbmVkfSB3ZWFrSW1wb3J0cyBXZWFrIGltcG9ydHMsIGlmIGFueVxuICogQHByb3BlcnR5IHtzdHJpbmd8dW5kZWZpbmVkfSBzeW50YXggU3ludGF4LCBpZiBzcGVjaWZpZWQgKGVpdGhlciBgXCJwcm90bzJcImAgb3IgYFwicHJvdG8zXCJgKVxuICogQHByb3BlcnR5IHtSb290fSByb290IFBvcHVsYXRlZCByb290IGluc3RhbmNlXG4gKi9cblxuLyoqXG4gKiBPcHRpb25zIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb2Yge0BsaW5rIHBhcnNlfS5cbiAqIEBpbnRlcmZhY2UgSVBhcnNlT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBba2VlcENhc2U9ZmFsc2VdIEtlZXBzIGZpZWxkIGNhc2luZyBpbnN0ZWFkIG9mIGNvbnZlcnRpbmcgdG8gY2FtZWwgY2FzZVxuICogQHByb3BlcnR5IHtib29sZWFufSBbYWx0ZXJuYXRlQ29tbWVudE1vZGU9ZmFsc2VdIFJlY29nbml6ZSBkb3VibGUtc2xhc2ggY29tbWVudHMgaW4gYWRkaXRpb24gdG8gZG9jLWJsb2NrIGNvbW1lbnRzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbcHJlZmVyVHJhaWxpbmdDb21tZW50PWZhbHNlXSBVc2UgdHJhaWxpbmcgY29tbWVudCB3aGVuIGJvdGggbGVhZGluZyBjb21tZW50IGFuZCB0cmFpbGluZyBjb21tZW50IGV4aXN0LlxuICovXG5cbi8qKlxuICogT3B0aW9ucyBtb2RpZnlpbmcgdGhlIGJlaGF2aW9yIG9mIEpTT04gc2VyaWFsaXphdGlvbi5cbiAqIEBpbnRlcmZhY2UgSVRvSlNPTk9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2tlZXBDb21tZW50cz1mYWxzZV0gU2VyaWFsaXplcyBjb21tZW50cy5cbiAqL1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gLnByb3RvIHNvdXJjZSBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgcGFyc2VkIGNvbnRlbnRzLlxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBTb3VyY2UgY29udGVudHNcbiAqIEBwYXJhbSB7Um9vdH0gcm9vdCBSb290IHRvIHBvcHVsYXRlXG4gKiBAcGFyYW0ge0lQYXJzZU9wdGlvbnN9IFtvcHRpb25zXSBQYXJzZSBvcHRpb25zLiBEZWZhdWx0cyB0byB7QGxpbmsgcGFyc2UuZGVmYXVsdHN9IHdoZW4gb21pdHRlZC5cbiAqIEByZXR1cm5zIHtJUGFyc2VyUmVzdWx0fSBQYXJzZXIgcmVzdWx0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gZmlsZW5hbWU9bnVsbCBDdXJyZW50bHkgcHJvY2Vzc2luZyBmaWxlIG5hbWUgZm9yIGVycm9yIHJlcG9ydGluZywgaWYga25vd25cbiAqIEBwcm9wZXJ0eSB7SVBhcnNlT3B0aW9uc30gZGVmYXVsdHMgRGVmYXVsdCB7QGxpbmsgSVBhcnNlT3B0aW9uc31cbiAqL1xuZnVuY3Rpb24gcGFyc2Uoc291cmNlLCByb290LCBvcHRpb25zKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgY2FsbGJhY2stcmV0dXJuICovXG4gICAgaWYgKCEocm9vdCBpbnN0YW5jZW9mIFJvb3QpKSB7XG4gICAgICAgIG9wdGlvbnMgPSByb290O1xuICAgICAgICByb290ID0gbmV3IFJvb3QoKTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zKVxuICAgICAgICBvcHRpb25zID0gcGFyc2UuZGVmYXVsdHM7XG5cbiAgICB2YXIgcHJlZmVyVHJhaWxpbmdDb21tZW50ID0gb3B0aW9ucy5wcmVmZXJUcmFpbGluZ0NvbW1lbnQgfHwgZmFsc2U7XG4gICAgdmFyIHRuID0gdG9rZW5pemUoc291cmNlLCBvcHRpb25zLmFsdGVybmF0ZUNvbW1lbnRNb2RlIHx8IGZhbHNlKSxcbiAgICAgICAgbmV4dCA9IHRuLm5leHQsXG4gICAgICAgIHB1c2ggPSB0bi5wdXNoLFxuICAgICAgICBwZWVrID0gdG4ucGVlayxcbiAgICAgICAgc2tpcCA9IHRuLnNraXAsXG4gICAgICAgIGNtbnQgPSB0bi5jbW50O1xuXG4gICAgdmFyIGhlYWQgPSB0cnVlLFxuICAgICAgICBwa2csXG4gICAgICAgIGltcG9ydHMsXG4gICAgICAgIHdlYWtJbXBvcnRzLFxuICAgICAgICBzeW50YXgsXG4gICAgICAgIGlzUHJvdG8zID0gZmFsc2U7XG5cbiAgICB2YXIgcHRyID0gcm9vdDtcblxuICAgIHZhciBhcHBseUNhc2UgPSBvcHRpb25zLmtlZXBDYXNlID8gZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gbmFtZTsgfSA6IHV0aWwuY2FtZWxDYXNlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBmdW5jdGlvbiBpbGxlZ2FsKHRva2VuLCBuYW1lLCBpbnNpZGVUcnlDYXRjaCkge1xuICAgICAgICB2YXIgZmlsZW5hbWUgPSBwYXJzZS5maWxlbmFtZTtcbiAgICAgICAgaWYgKCFpbnNpZGVUcnlDYXRjaClcbiAgICAgICAgICAgIHBhcnNlLmZpbGVuYW1lID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIEVycm9yKFwiaWxsZWdhbCBcIiArIChuYW1lIHx8IFwidG9rZW5cIikgKyBcIiAnXCIgKyB0b2tlbiArIFwiJyAoXCIgKyAoZmlsZW5hbWUgPyBmaWxlbmFtZSArIFwiLCBcIiA6IFwiXCIpICsgXCJsaW5lIFwiICsgdG4ubGluZSArIFwiKVwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkU3RyaW5nKCkge1xuICAgICAgICB2YXIgdmFsdWVzID0gW10sXG4gICAgICAgICAgICB0b2tlbjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAoKHRva2VuID0gbmV4dCgpKSAhPT0gXCJcXFwiXCIgJiYgdG9rZW4gIT09IFwiJ1wiKVxuICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuXG4gICAgICAgICAgICB2YWx1ZXMucHVzaChuZXh0KCkpO1xuICAgICAgICAgICAgc2tpcCh0b2tlbik7XG4gICAgICAgICAgICB0b2tlbiA9IHBlZWsoKTtcbiAgICAgICAgfSB3aGlsZSAodG9rZW4gPT09IFwiXFxcIlwiIHx8IHRva2VuID09PSBcIidcIik7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuam9pbihcIlwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkVmFsdWUoYWNjZXB0VHlwZVJlZikge1xuICAgICAgICB2YXIgdG9rZW4gPSBuZXh0KCk7XG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICBjYXNlIFwiXFxcIlwiOlxuICAgICAgICAgICAgICAgIHB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZWFkU3RyaW5nKCk7XG4gICAgICAgICAgICBjYXNlIFwidHJ1ZVwiOiBjYXNlIFwiVFJVRVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgY2FzZSBcImZhbHNlXCI6IGNhc2UgXCJGQUxTRVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlTnVtYmVyKHRva2VuLCAvKiBpbnNpZGVUcnlDYXRjaCAqLyB0cnVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKGFjY2VwdFR5cGVSZWYgJiYgdHlwZVJlZlJlLnRlc3QodG9rZW4pKVxuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcblxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4sIFwidmFsdWVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkUmFuZ2VzKHRhcmdldCwgYWNjZXB0U3RyaW5ncykge1xuICAgICAgICB2YXIgdG9rZW4sIHN0YXJ0O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0U3RyaW5ncyAmJiAoKHRva2VuID0gcGVlaygpKSA9PT0gXCJcXFwiXCIgfHwgdG9rZW4gPT09IFwiJ1wiKSlcbiAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChyZWFkU3RyaW5nKCkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKFsgc3RhcnQgPSBwYXJzZUlkKG5leHQoKSksIHNraXAoXCJ0b1wiLCB0cnVlKSA/IHBhcnNlSWQobmV4dCgpKSA6IHN0YXJ0IF0pO1xuICAgICAgICB9IHdoaWxlIChza2lwKFwiLFwiLCB0cnVlKSk7XG4gICAgICAgIHNraXAoXCI7XCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTnVtYmVyKHRva2VuLCBpbnNpZGVUcnlDYXRjaCkge1xuICAgICAgICB2YXIgc2lnbiA9IDE7XG4gICAgICAgIGlmICh0b2tlbi5jaGFyQXQoMCkgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICBzaWduID0gLTE7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2VuLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgICAgICBjYXNlIFwiaW5mXCI6IGNhc2UgXCJJTkZcIjogY2FzZSBcIkluZlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBzaWduICogSW5maW5pdHk7XG4gICAgICAgICAgICBjYXNlIFwibmFuXCI6IGNhc2UgXCJOQU5cIjogY2FzZSBcIk5hblwiOiBjYXNlIFwiTmFOXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgICAgIGNhc2UgXCIwXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhc2UxMFJlLnRlc3QodG9rZW4pKVxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh0b2tlbiwgMTApO1xuICAgICAgICBpZiAoYmFzZTE2UmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHRva2VuLCAxNik7XG4gICAgICAgIGlmIChiYXNlOFJlLnRlc3QodG9rZW4pKVxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh0b2tlbiwgOCk7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKG51bWJlclJlLnRlc3QodG9rZW4pKVxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKiBwYXJzZUZsb2F0KHRva2VuKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcIm51bWJlclwiLCBpbnNpZGVUcnlDYXRjaCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJZCh0b2tlbiwgYWNjZXB0TmVnYXRpdmUpIHtcbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAgICAgY2FzZSBcIm1heFwiOiBjYXNlIFwiTUFYXCI6IGNhc2UgXCJNYXhcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gNTM2ODcwOTExO1xuICAgICAgICAgICAgY2FzZSBcIjBcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWFjY2VwdE5lZ2F0aXZlICYmIHRva2VuLmNoYXJBdCgwKSA9PT0gXCItXCIpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcImlkXCIpO1xuXG4gICAgICAgIGlmIChiYXNlMTBOZWdSZS50ZXN0KHRva2VuKSlcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0b2tlbiwgMTApO1xuICAgICAgICBpZiAoYmFzZTE2TmVnUmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodG9rZW4sIDE2KTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoYmFzZThOZWdSZS50ZXN0KHRva2VuKSlcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0b2tlbiwgOCk7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJpZFwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVBhY2thZ2UoKSB7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwa2cgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwoXCJwYWNrYWdlXCIpO1xuXG4gICAgICAgIHBrZyA9IG5leHQoKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCF0eXBlUmVmUmUudGVzdChwa2cpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChwa2csIFwibmFtZVwiKTtcblxuICAgICAgICBwdHIgPSBwdHIuZGVmaW5lKHBrZyk7XG4gICAgICAgIHNraXAoXCI7XCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSW1wb3J0KCkge1xuICAgICAgICB2YXIgdG9rZW4gPSBwZWVrKCk7XG4gICAgICAgIHZhciB3aGljaEltcG9ydHM7XG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgICAgIGNhc2UgXCJ3ZWFrXCI6XG4gICAgICAgICAgICAgICAgd2hpY2hJbXBvcnRzID0gd2Vha0ltcG9ydHMgfHwgKHdlYWtJbXBvcnRzID0gW10pO1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwdWJsaWNcIjpcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHdoaWNoSW1wb3J0cyA9IGltcG9ydHMgfHwgKGltcG9ydHMgPSBbXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW4gPSByZWFkU3RyaW5nKCk7XG4gICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICB3aGljaEltcG9ydHMucHVzaCh0b2tlbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTeW50YXgoKSB7XG4gICAgICAgIHNraXAoXCI9XCIpO1xuICAgICAgICBzeW50YXggPSByZWFkU3RyaW5nKCk7XG4gICAgICAgIGlzUHJvdG8zID0gc3ludGF4ID09PSBcInByb3RvM1wiO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWlzUHJvdG8zICYmIHN5bnRheCAhPT0gXCJwcm90bzJcIilcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwoc3ludGF4LCBcInN5bnRheFwiKTtcblxuICAgICAgICBza2lwKFwiO1wiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUNvbW1vbihwYXJlbnQsIHRva2VuKSB7XG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcblxuICAgICAgICAgICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKHBhcmVudCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgIHBhcnNlVHlwZShwYXJlbnQsIHRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICBwYXJzZUVudW0ocGFyZW50LCB0b2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgIGNhc2UgXCJzZXJ2aWNlXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VTZXJ2aWNlKHBhcmVudCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgICAgICBjYXNlIFwiZXh0ZW5kXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VFeHRlbnNpb24ocGFyZW50LCB0b2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlmQmxvY2sob2JqLCBmbklmLCBmbkVsc2UpIHtcbiAgICAgICAgdmFyIHRyYWlsaW5nTGluZSA9IHRuLmxpbmU7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIGlmKHR5cGVvZiBvYmouY29tbWVudCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICBvYmouY29tbWVudCA9IGNtbnQoKTsgLy8gdHJ5IGJsb2NrLXR5cGUgY29tbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqLmZpbGVuYW1lID0gcGFyc2UuZmlsZW5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNraXAoXCJ7XCIsIHRydWUpKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgICAgICB3aGlsZSAoKHRva2VuID0gbmV4dCgpKSAhPT0gXCJ9XCIpXG4gICAgICAgICAgICAgICAgZm5JZih0b2tlbik7XG4gICAgICAgICAgICBza2lwKFwiO1wiLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmbkVsc2UpXG4gICAgICAgICAgICAgICAgZm5FbHNlKCk7XG4gICAgICAgICAgICBza2lwKFwiO1wiKTtcbiAgICAgICAgICAgIGlmIChvYmogJiYgKHR5cGVvZiBvYmouY29tbWVudCAhPT0gXCJzdHJpbmdcIiB8fCBwcmVmZXJUcmFpbGluZ0NvbW1lbnQpKVxuICAgICAgICAgICAgICAgIG9iai5jb21tZW50ID0gY21udCh0cmFpbGluZ0xpbmUpIHx8IG9iai5jb21tZW50OyAvLyB0cnkgbGluZS10eXBlIGNvbW1lbnRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlVHlwZShwYXJlbnQsIHRva2VuKSB7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghbmFtZVJlLnRlc3QodG9rZW4gPSBuZXh0KCkpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJ0eXBlIG5hbWVcIik7XG5cbiAgICAgICAgdmFyIHR5cGUgPSBuZXcgVHlwZSh0b2tlbik7XG4gICAgICAgIGlmQmxvY2sodHlwZSwgZnVuY3Rpb24gcGFyc2VUeXBlX2Jsb2NrKHRva2VuKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VDb21tb24odHlwZSwgdG9rZW4pKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgc3dpdGNoICh0b2tlbikge1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hcFwiOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZU1hcEZpZWxkKHR5cGUsIHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwicmVxdWlyZWRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVwZWF0ZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGaWVsZCh0eXBlLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcIm9wdGlvbmFsXCI6XG4gICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQcm90bzMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmllbGQodHlwZSwgXCJwcm90bzNfb3B0aW9uYWxcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZpZWxkKHR5cGUsIFwib3B0aW9uYWxcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwib25lb2ZcIjpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VPbmVPZih0eXBlLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcImV4dGVuc2lvbnNcIjpcbiAgICAgICAgICAgICAgICAgICAgcmVhZFJhbmdlcyh0eXBlLmV4dGVuc2lvbnMgfHwgKHR5cGUuZXh0ZW5zaW9ucyA9IFtdKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcInJlc2VydmVkXCI6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRSYW5nZXModHlwZS5yZXNlcnZlZCB8fCAodHlwZS5yZXNlcnZlZCA9IFtdKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQcm90bzMgfHwgIXR5cGVSZWZSZS50ZXN0KHRva2VuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuXG4gICAgICAgICAgICAgICAgICAgIHB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUZpZWxkKHR5cGUsIFwib3B0aW9uYWxcIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGFyZW50LmFkZCh0eXBlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUZpZWxkKHBhcmVudCwgcnVsZSwgZXh0ZW5kKSB7XG4gICAgICAgIHZhciB0eXBlID0gbmV4dCgpO1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJncm91cFwiKSB7XG4gICAgICAgICAgICBwYXJzZUdyb3VwKHBhcmVudCwgcnVsZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHlwZSBuYW1lcyBjYW4gY29uc3VtZSBtdWx0aXBsZSB0b2tlbnMsIGluIG11bHRpcGxlIHZhcmlhbnRzOlxuICAgICAgICAvLyAgICBwYWNrYWdlLnN1YnBhY2thZ2UgICBmaWVsZCAgICAgICB0b2tlbnM6IFwicGFja2FnZS5zdWJwYWNrYWdlXCIgW1RZUEUgTkFNRSBFTkRTIEhFUkVdIFwiZmllbGRcIlxuICAgICAgICAvLyAgICBwYWNrYWdlIC4gc3VicGFja2FnZSBmaWVsZCAgICAgICB0b2tlbnM6IFwicGFja2FnZVwiIFwiLlwiIFwic3VicGFja2FnZVwiIFtUWVBFIE5BTUUgRU5EUyBIRVJFXSBcImZpZWxkXCJcbiAgICAgICAgLy8gICAgcGFja2FnZS4gIHN1YnBhY2thZ2UgZmllbGQgICAgICAgdG9rZW5zOiBcInBhY2thZ2UuXCIgXCJzdWJwYWNrYWdlXCIgW1RZUEUgTkFNRSBFTkRTIEhFUkVdIFwiZmllbGRcIlxuICAgICAgICAvLyAgICBwYWNrYWdlICAuc3VicGFja2FnZSBmaWVsZCAgICAgICB0b2tlbnM6IFwicGFja2FnZVwiIFwiLnN1YnBhY2thZ2VcIiBbVFlQRSBOQU1FIEVORFMgSEVSRV0gXCJmaWVsZFwiXG4gICAgICAgIC8vIEtlZXAgcmVhZGluZyB0b2tlbnMgdW50aWwgd2UgZ2V0IGEgdHlwZSBuYW1lIHdpdGggbm8gcGVyaW9kIGF0IHRoZSBlbmQsXG4gICAgICAgIC8vIGFuZCB0aGUgbmV4dCB0b2tlbiBkb2VzIG5vdCBzdGFydCB3aXRoIGEgcGVyaW9kLlxuICAgICAgICB3aGlsZSAodHlwZS5lbmRzV2l0aChcIi5cIikgfHwgcGVlaygpLnN0YXJ0c1dpdGgoXCIuXCIpKSB7XG4gICAgICAgICAgICB0eXBlICs9IG5leHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIXR5cGVSZWZSZS50ZXN0KHR5cGUpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0eXBlLCBcInR5cGVcIik7XG5cbiAgICAgICAgdmFyIG5hbWUgPSBuZXh0KCk7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghbmFtZVJlLnRlc3QobmFtZSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKG5hbWUsIFwibmFtZVwiKTtcblxuICAgICAgICBuYW1lID0gYXBwbHlDYXNlKG5hbWUpO1xuICAgICAgICBza2lwKFwiPVwiKTtcblxuICAgICAgICB2YXIgZmllbGQgPSBuZXcgRmllbGQobmFtZSwgcGFyc2VJZChuZXh0KCkpLCB0eXBlLCBydWxlLCBleHRlbmQpO1xuICAgICAgICBpZkJsb2NrKGZpZWxkLCBmdW5jdGlvbiBwYXJzZUZpZWxkX2Jsb2NrKHRva2VuKSB7XG5cbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IFwib3B0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBwYXJzZU9wdGlvbihmaWVsZCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XG5cbiAgICAgICAgfSwgZnVuY3Rpb24gcGFyc2VGaWVsZF9saW5lKCkge1xuICAgICAgICAgICAgcGFyc2VJbmxpbmVPcHRpb25zKGZpZWxkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJ1bGUgPT09IFwicHJvdG8zX29wdGlvbmFsXCIpIHtcbiAgICAgICAgICAgIC8vIGZvciBwcm90bzMgb3B0aW9uYWwgZmllbGRzLCB3ZSBjcmVhdGUgYSBzaW5nbGUtbWVtYmVyIE9uZW9mIHRvIG1pbWljIFwib3B0aW9uYWxcIiBiZWhhdmlvclxuICAgICAgICAgICAgdmFyIG9uZW9mID0gbmV3IE9uZU9mKFwiX1wiICsgbmFtZSk7XG4gICAgICAgICAgICBmaWVsZC5zZXRPcHRpb24oXCJwcm90bzNfb3B0aW9uYWxcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBvbmVvZi5hZGQoZmllbGQpO1xuICAgICAgICAgICAgcGFyZW50LmFkZChvbmVvZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJlbnQuYWRkKGZpZWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEpTT04gZGVmYXVsdHMgdG8gcGFja2VkPXRydWUgaWYgbm90IHNldCBzbyB3ZSBoYXZlIHRvIHNldCBwYWNrZWQ9ZmFsc2UgZXhwbGljaXR5IHdoZW5cbiAgICAgICAgLy8gcGFyc2luZyBwcm90bzIgZGVzY3JpcHRvcnMgd2l0aG91dCB0aGUgb3B0aW9uLCB3aGVyZSBhcHBsaWNhYmxlLiBUaGlzIG11c3QgYmUgZG9uZSBmb3JcbiAgICAgICAgLy8gYWxsIGtub3duIHBhY2thYmxlIHR5cGVzIGFuZCBhbnl0aGluZyB0aGF0IGNvdWxkIGJlIGFuIGVudW0gKD0gaXMgbm90IGEgYmFzaWMgdHlwZSkuXG4gICAgICAgIGlmICghaXNQcm90bzMgJiYgZmllbGQucmVwZWF0ZWQgJiYgKHR5cGVzLnBhY2tlZFt0eXBlXSAhPT0gdW5kZWZpbmVkIHx8IHR5cGVzLmJhc2ljW3R5cGVdID09PSB1bmRlZmluZWQpKVxuICAgICAgICAgICAgZmllbGQuc2V0T3B0aW9uKFwicGFja2VkXCIsIGZhbHNlLCAvKiBpZk5vdFNldCAqLyB0cnVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUdyb3VwKHBhcmVudCwgcnVsZSkge1xuICAgICAgICB2YXIgbmFtZSA9IG5leHQoKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFuYW1lUmUudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwobmFtZSwgXCJuYW1lXCIpO1xuXG4gICAgICAgIHZhciBmaWVsZE5hbWUgPSB1dGlsLmxjRmlyc3QobmFtZSk7XG4gICAgICAgIGlmIChuYW1lID09PSBmaWVsZE5hbWUpXG4gICAgICAgICAgICBuYW1lID0gdXRpbC51Y0ZpcnN0KG5hbWUpO1xuICAgICAgICBza2lwKFwiPVwiKTtcbiAgICAgICAgdmFyIGlkID0gcGFyc2VJZChuZXh0KCkpO1xuICAgICAgICB2YXIgdHlwZSA9IG5ldyBUeXBlKG5hbWUpO1xuICAgICAgICB0eXBlLmdyb3VwID0gdHJ1ZTtcbiAgICAgICAgdmFyIGZpZWxkID0gbmV3IEZpZWxkKGZpZWxkTmFtZSwgaWQsIG5hbWUsIHJ1bGUpO1xuICAgICAgICBmaWVsZC5maWxlbmFtZSA9IHBhcnNlLmZpbGVuYW1lO1xuICAgICAgICBpZkJsb2NrKHR5cGUsIGZ1bmN0aW9uIHBhcnNlR3JvdXBfYmxvY2sodG9rZW4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAodG9rZW4pIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VPcHRpb24odHlwZSwgdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBza2lwKFwiO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwicmVxdWlyZWRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVwZWF0ZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGaWVsZCh0eXBlLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcIm9wdGlvbmFsXCI6XG4gICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQcm90bzMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmllbGQodHlwZSwgXCJwcm90bzNfb3B0aW9uYWxcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZpZWxkKHR5cGUsIFwib3B0aW9uYWxcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZVR5cGUodHlwZSwgdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRW51bSh0eXBlLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTsgLy8gdGhlcmUgYXJlIG5vIGdyb3VwcyB3aXRoIHByb3RvMyBzZW1hbnRpY3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5hZGQodHlwZSlcbiAgICAgICAgICAgICAgLmFkZChmaWVsZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNYXBGaWVsZChwYXJlbnQpIHtcbiAgICAgICAgc2tpcChcIjxcIik7XG4gICAgICAgIHZhciBrZXlUeXBlID0gbmV4dCgpO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAodHlwZXMubWFwS2V5W2tleVR5cGVdID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKGtleVR5cGUsIFwidHlwZVwiKTtcblxuICAgICAgICBza2lwKFwiLFwiKTtcbiAgICAgICAgdmFyIHZhbHVlVHlwZSA9IG5leHQoKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCF0eXBlUmVmUmUudGVzdCh2YWx1ZVR5cGUpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh2YWx1ZVR5cGUsIFwidHlwZVwiKTtcblxuICAgICAgICBza2lwKFwiPlwiKTtcbiAgICAgICAgdmFyIG5hbWUgPSBuZXh0KCk7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghbmFtZVJlLnRlc3QobmFtZSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKG5hbWUsIFwibmFtZVwiKTtcblxuICAgICAgICBza2lwKFwiPVwiKTtcbiAgICAgICAgdmFyIGZpZWxkID0gbmV3IE1hcEZpZWxkKGFwcGx5Q2FzZShuYW1lKSwgcGFyc2VJZChuZXh0KCkpLCBrZXlUeXBlLCB2YWx1ZVR5cGUpO1xuICAgICAgICBpZkJsb2NrKGZpZWxkLCBmdW5jdGlvbiBwYXJzZU1hcEZpZWxkX2Jsb2NrKHRva2VuKSB7XG5cbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IFwib3B0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBwYXJzZU9wdGlvbihmaWVsZCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XG5cbiAgICAgICAgfSwgZnVuY3Rpb24gcGFyc2VNYXBGaWVsZF9saW5lKCkge1xuICAgICAgICAgICAgcGFyc2VJbmxpbmVPcHRpb25zKGZpZWxkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5hZGQoZmllbGQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlT25lT2YocGFyZW50LCB0b2tlbikge1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4sIFwibmFtZVwiKTtcblxuICAgICAgICB2YXIgb25lb2YgPSBuZXcgT25lT2YoYXBwbHlDYXNlKHRva2VuKSk7XG4gICAgICAgIGlmQmxvY2sob25lb2YsIGZ1bmN0aW9uIHBhcnNlT25lT2ZfYmxvY2sodG9rZW4pIHtcbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gXCJvcHRpb25cIikge1xuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKG9uZW9mLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgc2tpcChcIjtcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIHBhcnNlRmllbGQob25lb2YsIFwib3B0aW9uYWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBwYXJlbnQuYWRkKG9uZW9mKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUVudW0ocGFyZW50LCB0b2tlbikge1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4sIFwibmFtZVwiKTtcblxuICAgICAgICB2YXIgZW5tID0gbmV3IEVudW0odG9rZW4pO1xuICAgICAgICBpZkJsb2NrKGVubSwgZnVuY3Rpb24gcGFyc2VFbnVtX2Jsb2NrKHRva2VuKSB7XG4gICAgICAgICAgc3dpdGNoKHRva2VuKSB7XG4gICAgICAgICAgICBjYXNlIFwib3B0aW9uXCI6XG4gICAgICAgICAgICAgIHBhcnNlT3B0aW9uKGVubSwgdG9rZW4pO1xuICAgICAgICAgICAgICBza2lwKFwiO1wiKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJyZXNlcnZlZFwiOlxuICAgICAgICAgICAgICByZWFkUmFuZ2VzKGVubS5yZXNlcnZlZCB8fCAoZW5tLnJlc2VydmVkID0gW10pLCB0cnVlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHBhcnNlRW51bVZhbHVlKGVubSwgdG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5hZGQoZW5tKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUVudW1WYWx1ZShwYXJlbnQsIHRva2VuKSB7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghbmFtZVJlLnRlc3QodG9rZW4pKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xuXG4gICAgICAgIHNraXAoXCI9XCIpO1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUlkKG5leHQoKSwgdHJ1ZSksXG4gICAgICAgICAgICBkdW1teSA9IHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIGR1bW15LnNldE9wdGlvbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgaWZCbG9jayhkdW1teSwgZnVuY3Rpb24gcGFyc2VFbnVtVmFsdWVfYmxvY2sodG9rZW4pIHtcblxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gXCJvcHRpb25cIikge1xuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKGR1bW15LCB0b2tlbik7IC8vIHNraXBcbiAgICAgICAgICAgICAgICBza2lwKFwiO1wiKTtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuXG4gICAgICAgIH0sIGZ1bmN0aW9uIHBhcnNlRW51bVZhbHVlX2xpbmUoKSB7XG4gICAgICAgICAgICBwYXJzZUlubGluZU9wdGlvbnMoZHVtbXkpOyAvLyBza2lwXG4gICAgICAgIH0pO1xuICAgICAgICBwYXJlbnQuYWRkKHRva2VuLCB2YWx1ZSwgZHVtbXkuY29tbWVudCwgZHVtbXkub3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VPcHRpb24ocGFyZW50LCB0b2tlbikge1xuICAgICAgICB2YXIgaXNDdXN0b20gPSBza2lwKFwiKFwiLCB0cnVlKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCF0eXBlUmVmUmUudGVzdCh0b2tlbiA9IG5leHQoKSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcIm5hbWVcIik7XG5cbiAgICAgICAgdmFyIG5hbWUgPSB0b2tlbjtcbiAgICAgICAgdmFyIG9wdGlvbiA9IG5hbWU7XG4gICAgICAgIHZhciBwcm9wTmFtZTtcblxuICAgICAgICBpZiAoaXNDdXN0b20pIHtcbiAgICAgICAgICAgIHNraXAoXCIpXCIpO1xuICAgICAgICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgICAgICAgb3B0aW9uID0gbmFtZTtcbiAgICAgICAgICAgIHRva2VuID0gcGVlaygpO1xuICAgICAgICAgICAgaWYgKGZxVHlwZVJlZlJlLnRlc3QodG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgcHJvcE5hbWUgPSB0b2tlbi5zbGljZSgxKTsgLy9yZW1vdmUgJy4nIGJlZm9yZSBwcm9wZXJ0eSBuYW1lXG4gICAgICAgICAgICAgICAgbmFtZSArPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2tpcChcIj1cIik7XG4gICAgICAgIHZhciBvcHRpb25WYWx1ZSA9IHBhcnNlT3B0aW9uVmFsdWUocGFyZW50LCBuYW1lKTtcbiAgICAgICAgc2V0UGFyc2VkT3B0aW9uKHBhcmVudCwgb3B0aW9uLCBvcHRpb25WYWx1ZSwgcHJvcE5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlT3B0aW9uVmFsdWUocGFyZW50LCBuYW1lKSB7XG4gICAgICAgIC8vIHsgYTogXCJmb29cIiBiIHsgYzogXCJiYXJcIiB9IH1cbiAgICAgICAgaWYgKHNraXAoXCJ7XCIsIHRydWUpKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0UmVzdWx0ID0ge307XG5cbiAgICAgICAgICAgIHdoaWxlICghc2tpcChcIn1cIiwgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuID0gbmV4dCgpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcIm5hbWVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJlbmQgb2YgaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBwcm9wTmFtZSA9IHRva2VuO1xuXG4gICAgICAgICAgICAgICAgc2tpcChcIjpcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGVlaygpID09PSBcIntcIilcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZU9wdGlvblZhbHVlKHBhcmVudCwgbmFtZSArIFwiLlwiICsgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBlZWsoKSA9PT0gXCJbXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb3B0aW9uIChteV9vcHRpb24pID0ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmVwZWF0ZWRfdmFsdWU6IFsgXCJmb29cIiwgXCJiYXJcIiBdXG4gICAgICAgICAgICAgICAgICAgIC8vIH07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChza2lwKFwiW1wiLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHJlYWRWYWx1ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5wdXNoKGxhc3RWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChza2lwKFwiLFwiLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwKFwiXVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGFzdFZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0T3B0aW9uKHBhcmVudCwgbmFtZSArIFwiLlwiICsgdG9rZW4sIGxhc3RWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlYWRWYWx1ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0T3B0aW9uKHBhcmVudCwgbmFtZSArIFwiLlwiICsgdG9rZW4sIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJldlZhbHVlID0gb2JqZWN0UmVzdWx0W3Byb3BOYW1lXTtcblxuICAgICAgICAgICAgICAgIGlmIChwcmV2VmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gW10uY29uY2F0KHByZXZWYWx1ZSkuY29uY2F0KHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIG9iamVjdFJlc3VsdFtwcm9wTmFtZV0gPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFNlbWljb2xvbnMgYW5kIGNvbW1hcyBjYW4gYmUgb3B0aW9uYWxcbiAgICAgICAgICAgICAgICBza2lwKFwiLFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBza2lwKFwiO1wiLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdFJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaW1wbGVWYWx1ZSA9IHJlYWRWYWx1ZSh0cnVlKTtcbiAgICAgICAgc2V0T3B0aW9uKHBhcmVudCwgbmFtZSwgc2ltcGxlVmFsdWUpO1xuICAgICAgICByZXR1cm4gc2ltcGxlVmFsdWU7XG4gICAgICAgIC8vIERvZXMgbm90IGVuZm9yY2UgYSBkZWxpbWl0ZXIgdG8gYmUgdW5pdmVyc2FsXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T3B0aW9uKHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHBhcmVudC5zZXRPcHRpb24pXG4gICAgICAgICAgICBwYXJlbnQuc2V0T3B0aW9uKG5hbWUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRQYXJzZWRPcHRpb24ocGFyZW50LCBuYW1lLCB2YWx1ZSwgcHJvcE5hbWUpIHtcbiAgICAgICAgaWYgKHBhcmVudC5zZXRQYXJzZWRPcHRpb24pXG4gICAgICAgICAgICBwYXJlbnQuc2V0UGFyc2VkT3B0aW9uKG5hbWUsIHZhbHVlLCBwcm9wTmFtZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJbmxpbmVPcHRpb25zKHBhcmVudCkge1xuICAgICAgICBpZiAoc2tpcChcIltcIiwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBwYXJzZU9wdGlvbihwYXJlbnQsIFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgfSB3aGlsZSAoc2tpcChcIixcIiwgdHJ1ZSkpO1xuICAgICAgICAgICAgc2tpcChcIl1cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVNlcnZpY2UocGFyZW50LCB0b2tlbikge1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4sIFwic2VydmljZSBuYW1lXCIpO1xuXG4gICAgICAgIHZhciBzZXJ2aWNlID0gbmV3IFNlcnZpY2UodG9rZW4pO1xuICAgICAgICBpZkJsb2NrKHNlcnZpY2UsIGZ1bmN0aW9uIHBhcnNlU2VydmljZV9ibG9jayh0b2tlbikge1xuICAgICAgICAgICAgaWYgKHBhcnNlQ29tbW9uKHNlcnZpY2UsIHRva2VuKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IFwicnBjXCIpXG4gICAgICAgICAgICAgICAgcGFyc2VNZXRob2Qoc2VydmljZSwgdG9rZW4pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuICAgICAgICB9KTtcbiAgICAgICAgcGFyZW50LmFkZChzZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1ldGhvZChwYXJlbnQsIHRva2VuKSB7XG4gICAgICAgIC8vIEdldCB0aGUgY29tbWVudCBvZiB0aGUgcHJlY2VkaW5nIGxpbmUgbm93IChpZiBvbmUgZXhpc3RzKSBpbiBjYXNlIHRoZVxuICAgICAgICAvLyBtZXRob2QgaXMgZGVmaW5lZCBhY3Jvc3MgbXVsdGlwbGUgbGluZXMuXG4gICAgICAgIHZhciBjb21tZW50VGV4dCA9IGNtbnQoKTtcblxuICAgICAgICB2YXIgdHlwZSA9IHRva2VuO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4sIFwibmFtZVwiKTtcblxuICAgICAgICB2YXIgbmFtZSA9IHRva2VuLFxuICAgICAgICAgICAgcmVxdWVzdFR5cGUsIHJlcXVlc3RTdHJlYW0sXG4gICAgICAgICAgICByZXNwb25zZVR5cGUsIHJlc3BvbnNlU3RyZWFtO1xuXG4gICAgICAgIHNraXAoXCIoXCIpO1xuICAgICAgICBpZiAoc2tpcChcInN0cmVhbVwiLCB0cnVlKSlcbiAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0gPSB0cnVlO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIXR5cGVSZWZSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuXG4gICAgICAgIHJlcXVlc3RUeXBlID0gdG9rZW47XG4gICAgICAgIHNraXAoXCIpXCIpOyBza2lwKFwicmV0dXJuc1wiKTsgc2tpcChcIihcIik7XG4gICAgICAgIGlmIChza2lwKFwic3RyZWFtXCIsIHRydWUpKVxuICAgICAgICAgICAgcmVzcG9uc2VTdHJlYW0gPSB0cnVlO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIXR5cGVSZWZSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuXG4gICAgICAgIHJlc3BvbnNlVHlwZSA9IHRva2VuO1xuICAgICAgICBza2lwKFwiKVwiKTtcblxuICAgICAgICB2YXIgbWV0aG9kID0gbmV3IE1ldGhvZChuYW1lLCB0eXBlLCByZXF1ZXN0VHlwZSwgcmVzcG9uc2VUeXBlLCByZXF1ZXN0U3RyZWFtLCByZXNwb25zZVN0cmVhbSk7XG4gICAgICAgIG1ldGhvZC5jb21tZW50ID0gY29tbWVudFRleHQ7XG4gICAgICAgIGlmQmxvY2sobWV0aG9kLCBmdW5jdGlvbiBwYXJzZU1ldGhvZF9ibG9jayh0b2tlbikge1xuXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKHRva2VuID09PSBcIm9wdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VPcHRpb24obWV0aG9kLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgc2tpcChcIjtcIik7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICB9KTtcbiAgICAgICAgcGFyZW50LmFkZChtZXRob2QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlRXh0ZW5zaW9uKHBhcmVudCwgdG9rZW4pIHtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCF0eXBlUmVmUmUudGVzdCh0b2tlbiA9IG5leHQoKSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcInJlZmVyZW5jZVwiKTtcblxuICAgICAgICB2YXIgcmVmZXJlbmNlID0gdG9rZW47XG4gICAgICAgIGlmQmxvY2sobnVsbCwgZnVuY3Rpb24gcGFyc2VFeHRlbnNpb25fYmxvY2sodG9rZW4pIHtcbiAgICAgICAgICAgIHN3aXRjaCAodG9rZW4pIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXBlYXRlZFwiOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZpZWxkKHBhcmVudCwgdG9rZW4sIHJlZmVyZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcIm9wdGlvbmFsXCI6XG4gICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQcm90bzMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmllbGQocGFyZW50LCBcInByb3RvM19vcHRpb25hbFwiLCByZWZlcmVuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGaWVsZChwYXJlbnQsIFwib3B0aW9uYWxcIiwgcmVmZXJlbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvdG8zIHx8ICF0eXBlUmVmUmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmllbGQocGFyZW50LCBcIm9wdGlvbmFsXCIsIHJlZmVyZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IG5leHQoKSkgIT09IG51bGwpIHtcbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xuXG4gICAgICAgICAgICBjYXNlIFwicGFja2FnZVwiOlxuXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKCFoZWFkKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICAgICAgICAgIHBhcnNlUGFja2FnZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiaW1wb3J0XCI6XG5cbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICBpZiAoIWhlYWQpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuXG4gICAgICAgICAgICAgICAgcGFyc2VJbXBvcnQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcInN5bnRheFwiOlxuXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKCFoZWFkKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICAgICAgICAgIHBhcnNlU3ludGF4KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcblxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKHB0ciwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VDb21tb24ocHRyLCB0b2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2UuZmlsZW5hbWUgPSBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIFwicGFja2FnZVwiICAgICA6IHBrZyxcbiAgICAgICAgXCJpbXBvcnRzXCIgICAgIDogaW1wb3J0cyxcbiAgICAgICAgIHdlYWtJbXBvcnRzICA6IHdlYWtJbXBvcnRzLFxuICAgICAgICAgc3ludGF4ICAgICAgIDogc3ludGF4LFxuICAgICAgICAgcm9vdCAgICAgICAgIDogcm9vdFxuICAgIH07XG59XG5cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiAucHJvdG8gc291cmNlIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBwYXJzZWQgY29udGVudHMuXG4gKiBAbmFtZSBwYXJzZVxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFNvdXJjZSBjb250ZW50c1xuICogQHBhcmFtIHtJUGFyc2VPcHRpb25zfSBbb3B0aW9uc10gUGFyc2Ugb3B0aW9ucy4gRGVmYXVsdHMgdG8ge0BsaW5rIHBhcnNlLmRlZmF1bHRzfSB3aGVuIG9taXR0ZWQuXG4gKiBAcmV0dXJucyB7SVBhcnNlclJlc3VsdH0gUGFyc2VyIHJlc3VsdFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZpbGVuYW1lPW51bGwgQ3VycmVudGx5IHByb2Nlc3NpbmcgZmlsZSBuYW1lIGZvciBlcnJvciByZXBvcnRpbmcsIGlmIGtub3duXG4gKiBAcHJvcGVydHkge0lQYXJzZU9wdGlvbnN9IGRlZmF1bHRzIERlZmF1bHQge0BsaW5rIElQYXJzZU9wdGlvbnN9XG4gKiBAdmFyaWF0aW9uIDJcbiAqL1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRlcjtcblxudmFyIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxudmFyIEJ1ZmZlclJlYWRlcjsgLy8gY3ljbGljXG5cbnZhciBMb25nQml0cyAgPSB1dGlsLkxvbmdCaXRzLFxuICAgIHV0ZjggICAgICA9IHV0aWwudXRmODtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGluZGV4T3V0T2ZSYW5nZShyZWFkZXIsIHdyaXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIFJhbmdlRXJyb3IoXCJpbmRleCBvdXQgb2YgcmFuZ2U6IFwiICsgcmVhZGVyLnBvcyArIFwiICsgXCIgKyAod3JpdGVMZW5ndGggfHwgMSkgKyBcIiA+IFwiICsgcmVhZGVyLmxlbik7XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyByZWFkZXIgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBidWZmZXIuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHJlYWRlciB1c2luZyBgVWludDhBcnJheWAgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UgYEFycmF5YC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxuICovXG5mdW5jdGlvbiBSZWFkZXIoYnVmZmVyKSB7XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGJ1ZmZlci5cbiAgICAgKiBAdHlwZSB7VWludDhBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmJ1ZiA9IGJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIFJlYWQgYnVmZmVyIHBvc2l0aW9uLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5wb3MgPSAwO1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIgbGVuZ3RoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSBidWZmZXIubGVuZ3RoO1xufVxuXG52YXIgY3JlYXRlX2FycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09IFwidW5kZWZpbmVkXCJcbiAgICA/IGZ1bmN0aW9uIGNyZWF0ZV90eXBlZF9hcnJheShidWZmZXIpIHtcbiAgICAgICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgQXJyYXkuaXNBcnJheShidWZmZXIpKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkZXIoYnVmZmVyKTtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJpbGxlZ2FsIGJ1ZmZlclwiKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA6IGZ1bmN0aW9uIGNyZWF0ZV9hcnJheShidWZmZXIpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYnVmZmVyKSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZGVyKGJ1ZmZlcik7XG4gICAgICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBidWZmZXJcIik7XG4gICAgfTtcblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gdXRpbC5CdWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiBjcmVhdGVfYnVmZmVyX3NldHVwKGJ1ZmZlcikge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFkZXIuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcihidWZmZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5CdWZmZXIuaXNCdWZmZXIoYnVmZmVyKVxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBCdWZmZXJSZWFkZXIoYnVmZmVyKVxuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgICAgICA6IGNyZWF0ZV9hcnJheShidWZmZXIpO1xuICAgICAgICAgICAgfSkoYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICA6IGNyZWF0ZV9hcnJheTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyByZWFkZXIgdXNpbmcgdGhlIHNwZWNpZmllZCBidWZmZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7VWludDhBcnJheXxCdWZmZXJ9IGJ1ZmZlciBCdWZmZXIgdG8gcmVhZCBmcm9tXG4gKiBAcmV0dXJucyB7UmVhZGVyfEJ1ZmZlclJlYWRlcn0gQSB7QGxpbmsgQnVmZmVyUmVhZGVyfSBpZiBgYnVmZmVyYCBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGEge0BsaW5rIFJlYWRlcn1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgYnVmZmVyYCBpcyBub3QgYSB2YWxpZCBidWZmZXJcbiAqL1xuUmVhZGVyLmNyZWF0ZSA9IGNyZWF0ZSgpO1xuXG5SZWFkZXIucHJvdG90eXBlLl9zbGljZSA9IHV0aWwuQXJyYXkucHJvdG90eXBlLnN1YmFycmF5IHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vKipcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGFuIHVuc2lnbmVkIDMyIGJpdCB2YWx1ZS5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLnVpbnQzMiA9IChmdW5jdGlvbiByZWFkX3VpbnQzMl9zZXR1cCgpIHtcbiAgICB2YXIgdmFsdWUgPSA0Mjk0OTY3Mjk1OyAvLyBvcHRpbWl6ZXIgdHlwZS1oaW50LCB0ZW5kcyB0byBkZW9wdCBvdGhlcndpc2UgKD8hKVxuICAgIHJldHVybiBmdW5jdGlvbiByZWFkX3VpbnQzMigpIHtcbiAgICAgICAgdmFsdWUgPSAoICAgICAgICAgdGhpcy5idWZbdGhpcy5wb3NdICYgMTI3ICAgICAgICkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8ICA3KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMTQpID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCAyMSkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAgMTUpIDw8IDI4KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICgodGhpcy5wb3MgKz0gNSkgPiB0aGlzLmxlbikge1xuICAgICAgICAgICAgdGhpcy5wb3MgPSB0aGlzLmxlbjtcbiAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uIHJlYWRfaW50MzIoKSB7XG4gICAgcmV0dXJuIHRoaXMudWludDMyKCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHppZy16YWcgZW5jb2RlZCB2YXJpbnQgYXMgYSBzaWduZWQgMzIgYml0IHZhbHVlLlxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLnNpbnQzMiA9IGZ1bmN0aW9uIHJlYWRfc2ludDMyKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMudWludDMyKCk7XG4gICAgcmV0dXJuIHZhbHVlID4+PiAxIF4gLSh2YWx1ZSAmIDEpIHwgMDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWludmFsaWQtdGhpcyAqL1xuXG5mdW5jdGlvbiByZWFkTG9uZ1ZhcmludCgpIHtcbiAgICAvLyB0ZW5kcyB0byBkZW9wdCB3aXRoIGxvY2FsIHZhcnMgZm9yIG9jdGV0IGV0Yy5cbiAgICB2YXIgYml0cyA9IG5ldyBMb25nQml0cygwLCAwKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgaWYgKHRoaXMubGVuIC0gdGhpcy5wb3MgPiA0KSB7IC8vIGZhc3Qgcm91dGUgKGxvKVxuICAgICAgICBmb3IgKDsgaSA8IDQ7ICsraSkge1xuICAgICAgICAgICAgLy8gMXN0Li40dGhcbiAgICAgICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IGkgKiA3KSA+Pj4gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLyA1dGhcbiAgICAgICAgYml0cy5sbyA9IChiaXRzLmxvIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMjgpID4+PiAwO1xuICAgICAgICBiaXRzLmhpID0gKGJpdHMuaGkgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA+PiAgNCkgPj4+IDA7XG4gICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgIHJldHVybiBiaXRzO1xuICAgICAgICBpID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IDM7ICsraSkge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xuICAgICAgICAgICAgLy8gMXN0Li4zdGhcbiAgICAgICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IGkgKiA3KSA+Pj4gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLyA0dGhcbiAgICAgICAgYml0cy5sbyA9IChiaXRzLmxvIHwgKHRoaXMuYnVmW3RoaXMucG9zKytdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XG4gICAgICAgIHJldHVybiBiaXRzO1xuICAgIH1cbiAgICBpZiAodGhpcy5sZW4gLSB0aGlzLnBvcyA+IDQpIHsgLy8gZmFzdCByb3V0ZSAoaGkpXG4gICAgICAgIGZvciAoOyBpIDwgNTsgKytpKSB7XG4gICAgICAgICAgICAvLyA2dGguLjEwdGhcbiAgICAgICAgICAgIGJpdHMuaGkgPSAoYml0cy5oaSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IGkgKiA3ICsgMykgPj4+IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xuICAgICAgICAgICAgLy8gNnRoLi4xMHRoXG4gICAgICAgICAgICBiaXRzLmhpID0gKGJpdHMuaGkgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNyArIDMpID4+PiAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KVxuICAgICAgICAgICAgICAgIHJldHVybiBiaXRzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHZhcmludCBlbmNvZGluZ1wiKTtcbn1cblxuLyogZXNsaW50LWVuYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUuXG4gKiBAbmFtZSBSZWFkZXIjaW50NjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGFuIHVuc2lnbmVkIDY0IGJpdCB2YWx1ZS5cbiAqIEBuYW1lIFJlYWRlciN1aW50NjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIGEgemlnLXphZyBlbmNvZGVkIHZhcmludCBhcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUuXG4gKiBAbmFtZSBSZWFkZXIjc2ludDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIGJvb2xlYW4uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmJvb2wgPSBmdW5jdGlvbiByZWFkX2Jvb2woKSB7XG4gICAgcmV0dXJuIHRoaXMudWludDMyKCkgIT09IDA7XG59O1xuXG5mdW5jdGlvbiByZWFkRml4ZWQzMl9lbmQoYnVmLCBlbmQpIHsgLy8gbm90ZSB0aGF0IHRoaXMgdXNlcyBgZW5kYCwgbm90IGBwb3NgXG4gICAgcmV0dXJuIChidWZbZW5kIC0gNF1cbiAgICAgICAgICB8IGJ1ZltlbmQgLSAzXSA8PCA4XG4gICAgICAgICAgfCBidWZbZW5kIC0gMl0gPDwgMTZcbiAgICAgICAgICB8IGJ1ZltlbmQgLSAxXSA8PCAyNCkgPj4+IDA7XG59XG5cbi8qKlxuICogUmVhZHMgZml4ZWQgMzIgYml0cyBhcyBhbiB1bnNpZ25lZCAzMiBiaXQgaW50ZWdlci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5maXhlZDMyID0gZnVuY3Rpb24gcmVhZF9maXhlZDMyKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgNCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICByZXR1cm4gcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KTtcbn07XG5cbi8qKlxuICogUmVhZHMgZml4ZWQgMzIgYml0cyBhcyBhIHNpZ25lZCAzMiBiaXQgaW50ZWdlci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5zZml4ZWQzMiA9IGZ1bmN0aW9uIHJlYWRfc2ZpeGVkMzIoKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA0ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA0KTtcblxuICAgIHJldHVybiByZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpIHwgMDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWludmFsaWQtdGhpcyAqL1xuXG5mdW5jdGlvbiByZWFkRml4ZWQ2NCgvKiB0aGlzOiBSZWFkZXIgKi8pIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnBvcyArIDggPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDgpO1xuXG4gICAgcmV0dXJuIG5ldyBMb25nQml0cyhyZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpLCByZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpKTtcbn1cblxuLyogZXNsaW50LWVuYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuLyoqXG4gKiBSZWFkcyBmaXhlZCA2NCBiaXRzLlxuICogQG5hbWUgUmVhZGVyI2ZpeGVkNjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIHppZy16YWcgZW5jb2RlZCBmaXhlZCA2NCBiaXRzLlxuICogQG5hbWUgUmVhZGVyI3NmaXhlZDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIGZsb2F0ICgzMiBiaXQpIGFzIGEgbnVtYmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiByZWFkX2Zsb2F0KCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgNCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICB2YXIgdmFsdWUgPSB1dGlsLmZsb2F0LnJlYWRGbG9hdExFKHRoaXMuYnVmLCB0aGlzLnBvcyk7XG4gICAgdGhpcy5wb3MgKz0gNDtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgZG91YmxlICg2NCBiaXQgZmxvYXQpIGFzIGEgbnVtYmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuZG91YmxlID0gZnVuY3Rpb24gcmVhZF9kb3VibGUoKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA4ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA0KTtcblxuICAgIHZhciB2YWx1ZSA9IHV0aWwuZmxvYXQucmVhZERvdWJsZUxFKHRoaXMuYnVmLCB0aGlzLnBvcyk7XG4gICAgdGhpcy5wb3MgKz0gODtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gcmVhZF9ieXRlcygpIHtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy51aW50MzIoKSxcbiAgICAgICAgc3RhcnQgID0gdGhpcy5wb3MsXG4gICAgICAgIGVuZCAgICA9IHRoaXMucG9zICsgbGVuZ3RoO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGVuZCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgbGVuZ3RoKTtcblxuICAgIHRoaXMucG9zICs9IGxlbmd0aDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmJ1ZikpIC8vIHBsYWluIGFycmF5XG4gICAgICAgIHJldHVybiB0aGlzLmJ1Zi5zbGljZShzdGFydCwgZW5kKTtcblxuICAgIGlmIChzdGFydCA9PT0gZW5kKSB7IC8vIGZpeCBmb3IgSUUgMTAvV2luOCBhbmQgb3RoZXJzJyBzdWJhcnJheSByZXR1cm5pbmcgYXJyYXkgb2Ygc2l6ZSAxXG4gICAgICAgIHZhciBuYXRpdmVCdWZmZXIgPSB1dGlsLkJ1ZmZlcjtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUJ1ZmZlclxuICAgICAgICAgICAgPyBuYXRpdmVCdWZmZXIuYWxsb2MoMClcbiAgICAgICAgICAgIDogbmV3IHRoaXMuYnVmLmNvbnN0cnVjdG9yKDApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2xpY2UuY2FsbCh0aGlzLmJ1Ziwgc3RhcnQsIGVuZCk7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgc3RyaW5nIHByZWNlZWRlZCBieSBpdHMgYnl0ZSBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gcmVhZF9zdHJpbmcoKSB7XG4gICAgdmFyIGJ5dGVzID0gdGhpcy5ieXRlcygpO1xuICAgIHJldHVybiB1dGY4LnJlYWQoYnl0ZXMsIDAsIGJ5dGVzLmxlbmd0aCk7XG59O1xuXG4vKipcbiAqIFNraXBzIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJ5dGVzIGlmIHNwZWNpZmllZCwgb3RoZXJ3aXNlIHNraXBzIGEgdmFyaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIExlbmd0aCBpZiBrbm93biwgb3RoZXJ3aXNlIGEgdmFyaW50IGlzIGFzc3VtZWRcbiAqIEByZXR1cm5zIHtSZWFkZXJ9IGB0aGlzYFxuICovXG5SZWFkZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiBza2lwKGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAodGhpcy5wb3MgKyBsZW5ndGggPiB0aGlzLmxlbilcbiAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCBsZW5ndGgpO1xuICAgICAgICB0aGlzLnBvcyArPSBsZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xuICAgICAgICB9IHdoaWxlICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSAmIDEyOCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTa2lwcyB0aGUgbmV4dCBlbGVtZW50IG9mIHRoZSBzcGVjaWZpZWQgd2lyZSB0eXBlLlxuICogQHBhcmFtIHtudW1iZXJ9IHdpcmVUeXBlIFdpcmUgdHlwZSByZWNlaXZlZFxuICogQHJldHVybnMge1JlYWRlcn0gYHRoaXNgXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc2tpcFR5cGUgPSBmdW5jdGlvbih3aXJlVHlwZSkge1xuICAgIHN3aXRjaCAod2lyZVR5cGUpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgdGhpcy5za2lwKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdGhpcy5za2lwKDgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHRoaXMuc2tpcCh0aGlzLnVpbnQzMigpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB3aGlsZSAoKHdpcmVUeXBlID0gdGhpcy51aW50MzIoKSAmIDcpICE9PSA0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5za2lwVHlwZSh3aXJlVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgdGhpcy5za2lwKDQpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCB3aXJlIHR5cGUgXCIgKyB3aXJlVHlwZSArIFwiIGF0IG9mZnNldCBcIiArIHRoaXMucG9zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5SZWFkZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKEJ1ZmZlclJlYWRlcl8pIHtcbiAgICBCdWZmZXJSZWFkZXIgPSBCdWZmZXJSZWFkZXJfO1xuICAgIFJlYWRlci5jcmVhdGUgPSBjcmVhdGUoKTtcbiAgICBCdWZmZXJSZWFkZXIuX2NvbmZpZ3VyZSgpO1xuXG4gICAgdmFyIGZuID0gdXRpbC5Mb25nID8gXCJ0b0xvbmdcIiA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIFwidG9OdW1iZXJcIjtcbiAgICB1dGlsLm1lcmdlKFJlYWRlci5wcm90b3R5cGUsIHtcblxuICAgICAgICBpbnQ2NDogZnVuY3Rpb24gcmVhZF9pbnQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkTG9uZ1ZhcmludC5jYWxsKHRoaXMpW2ZuXShmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdWludDY0OiBmdW5jdGlvbiByZWFkX3VpbnQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkTG9uZ1ZhcmludC5jYWxsKHRoaXMpW2ZuXSh0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaW50NjQ6IGZ1bmN0aW9uIHJlYWRfc2ludDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRMb25nVmFyaW50LmNhbGwodGhpcykuenpEZWNvZGUoKVtmbl0oZmFsc2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpeGVkNjQ6IGZ1bmN0aW9uIHJlYWRfZml4ZWQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkRml4ZWQ2NC5jYWxsKHRoaXMpW2ZuXSh0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZml4ZWQ2NDogZnVuY3Rpb24gcmVhZF9zZml4ZWQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkRml4ZWQ2NC5jYWxsKHRoaXMpW2ZuXShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJSZWFkZXI7XG5cbi8vIGV4dGVuZHMgUmVhZGVyXG52YXIgUmVhZGVyID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xuKEJ1ZmZlclJlYWRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlYWRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEJ1ZmZlclJlYWRlcjtcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgcmVhZGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCByZWFkZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxuICogQGV4dGVuZHMgUmVhZGVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxuICovXG5mdW5jdGlvbiBCdWZmZXJSZWFkZXIoYnVmZmVyKSB7XG4gICAgUmVhZGVyLmNhbGwodGhpcywgYnVmZmVyKTtcblxuICAgIC8qKlxuICAgICAqIFJlYWQgYnVmZmVyLlxuICAgICAqIEBuYW1lIEJ1ZmZlclJlYWRlciNidWZcbiAgICAgKiBAdHlwZSB7QnVmZmVyfVxuICAgICAqL1xufVxuXG5CdWZmZXJSZWFkZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh1dGlsLkJ1ZmZlcilcbiAgICAgICAgQnVmZmVyUmVhZGVyLnByb3RvdHlwZS5fc2xpY2UgPSB1dGlsLkJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlclJlYWRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gcmVhZF9zdHJpbmdfYnVmZmVyKCkge1xuICAgIHZhciBsZW4gPSB0aGlzLnVpbnQzMigpOyAvLyBtb2RpZmllcyBwb3NcbiAgICByZXR1cm4gdGhpcy5idWYudXRmOFNsaWNlXG4gICAgICAgID8gdGhpcy5idWYudXRmOFNsaWNlKHRoaXMucG9zLCB0aGlzLnBvcyA9IE1hdGgubWluKHRoaXMucG9zICsgbGVuLCB0aGlzLmxlbikpXG4gICAgICAgIDogdGhpcy5idWYudG9TdHJpbmcoXCJ1dGYtOFwiLCB0aGlzLnBvcywgdGhpcy5wb3MgPSBNYXRoLm1pbih0aGlzLnBvcyArIGxlbiwgdGhpcy5sZW4pKTtcbn07XG5cbi8qKlxuICogUmVhZHMgYSBzZXF1ZW5jZSBvZiBieXRlcyBwcmVjZWVkZWQgYnkgaXRzIGxlbmd0aCBhcyBhIHZhcmludC5cbiAqIEBuYW1lIEJ1ZmZlclJlYWRlciNieXRlc1xuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBWYWx1ZSByZWFkXG4gKi9cblxuQnVmZmVyUmVhZGVyLl9jb25maWd1cmUoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBSb290O1xuXG4vLyBleHRlbmRzIE5hbWVzcGFjZVxudmFyIE5hbWVzcGFjZSA9IHJlcXVpcmUoXCIuL25hbWVzcGFjZVwiKTtcbigoUm9vdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5hbWVzcGFjZS5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IFJvb3QpLmNsYXNzTmFtZSA9IFwiUm9vdFwiO1xuXG52YXIgRmllbGQgICA9IHJlcXVpcmUoXCIuL2ZpZWxkXCIpLFxuICAgIEVudW0gICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIE9uZU9mICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKSxcbiAgICB1dGlsICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxudmFyIFR5cGUsICAgLy8gY3ljbGljXG4gICAgcGFyc2UsICAvLyBtaWdodCBiZSBleGNsdWRlZFxuICAgIGNvbW1vbjsgLy8gXCJcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHJvb3QgbmFtZXNwYWNlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSb290IG5hbWVzcGFjZSB3cmFwcGluZyBhbGwgdHlwZXMsIGVudW1zLCBzZXJ2aWNlcywgc3ViLW5hbWVzcGFjZXMgZXRjLiB0aGF0IGJlbG9uZyB0b2dldGhlci5cbiAqIEBleHRlbmRzIE5hbWVzcGFjZUJhc2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIFRvcCBsZXZlbCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIFJvb3Qob3B0aW9ucykge1xuICAgIE5hbWVzcGFjZS5jYWxsKHRoaXMsIFwiXCIsIG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogRGVmZXJyZWQgZXh0ZW5zaW9uIGZpZWxkcy5cbiAgICAgKiBAdHlwZSB7RmllbGRbXX1cbiAgICAgKi9cbiAgICB0aGlzLmRlZmVycmVkID0gW107XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlZCBmaWxlIG5hbWVzIG9mIGxvYWRlZCBmaWxlcy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nW119XG4gICAgICovXG4gICAgdGhpcy5maWxlcyA9IFtdO1xufVxuXG4vKipcbiAqIExvYWRzIGEgbmFtZXNwYWNlIGRlc2NyaXB0b3IgaW50byBhIHJvb3QgbmFtZXNwYWNlLlxuICogQHBhcmFtIHtJTmFtZXNwYWNlfSBqc29uIE5hbWVlc3BhY2UgZGVzY3JpcHRvclxuICogQHBhcmFtIHtSb290fSBbcm9vdF0gUm9vdCBuYW1lc3BhY2UsIGRlZmF1bHRzIHRvIGNyZWF0ZSBhIG5ldyBvbmUgaWYgb21pdHRlZFxuICogQHJldHVybnMge1Jvb3R9IFJvb3QgbmFtZXNwYWNlXG4gKi9cblJvb3QuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihqc29uLCByb290KSB7XG4gICAgaWYgKCFyb290KVxuICAgICAgICByb290ID0gbmV3IFJvb3QoKTtcbiAgICBpZiAoanNvbi5vcHRpb25zKVxuICAgICAgICByb290LnNldE9wdGlvbnMoanNvbi5vcHRpb25zKTtcbiAgICByZXR1cm4gcm9vdC5hZGRKU09OKGpzb24ubmVzdGVkKTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGggb2YgYW4gaW1wb3J0ZWQgZmlsZSwgcmVsYXRpdmUgdG8gdGhlIGltcG9ydGluZyBvcmlnaW4uXG4gKiBUaGlzIG1ldGhvZCBleGlzdHMgc28geW91IGNhbiBvdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duIGxvZ2ljIGluIGNhc2UgeW91ciBpbXBvcnRzIGFyZSBzY2F0dGVyZWQgb3ZlciBtdWx0aXBsZSBkaXJlY3Rvcmllcy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbiBUaGUgZmlsZSBuYW1lIG9mIHRoZSBpbXBvcnRpbmcgZmlsZVxuICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldCBUaGUgZmlsZSBuYW1lIGJlaW5nIGltcG9ydGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IFJlc29sdmVkIHBhdGggdG8gYHRhcmdldGAgb3IgYG51bGxgIHRvIHNraXAgdGhlIGZpbGVcbiAqL1xuUm9vdC5wcm90b3R5cGUucmVzb2x2ZVBhdGggPSB1dGlsLnBhdGgucmVzb2x2ZTtcblxuLyoqXG4gKiBGZXRjaCBjb250ZW50IGZyb20gZmlsZSBwYXRoIG9yIHVybFxuICogVGhpcyBtZXRob2QgZXhpc3RzIHNvIHlvdSBjYW4gb3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93biBsb2dpYy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggRmlsZSBwYXRoIG9yIHVybFxuICogQHBhcmFtIHtGZXRjaENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuUm9vdC5wcm90b3R5cGUuZmV0Y2ggPSB1dGlsLmZldGNoO1xuXG4vLyBBIHN5bWJvbC1saWtlIGZ1bmN0aW9uIHRvIHNhZmVseSBzaWduYWwgc3luY2hyb25vdXMgbG9hZGluZ1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIFNZTkMoKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5LWZ1bmN0aW9uXG5cbi8qKlxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byB0aGlzIHJvb3QgbmFtZXNwYWNlIGFuZCBjYWxscyB0aGUgY2FsbGJhY2suXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgTmFtZXMgb2Ygb25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7SVBhcnNlT3B0aW9uc30gb3B0aW9ucyBQYXJzZSBvcHRpb25zXG4gKiBAcGFyYW0ge0xvYWRDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblJvb3QucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghY2FsbGJhY2spXG4gICAgICAgIHJldHVybiB1dGlsLmFzUHJvbWlzZShsb2FkLCBzZWxmLCBmaWxlbmFtZSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgc3luYyA9IGNhbGxiYWNrID09PSBTWU5DOyAvLyB1bmRvY3VtZW50ZWRcblxuICAgIC8vIEZpbmlzaGVzIGxvYWRpbmcgYnkgY2FsbGluZyB0aGUgY2FsbGJhY2sgKGV4YWN0bHkgb25jZSlcbiAgICBmdW5jdGlvbiBmaW5pc2goZXJyLCByb290KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWNhbGxiYWNrKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgY2IgPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBpZiAoc3luYylcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgY2IoZXJyLCByb290KTtcbiAgICB9XG5cbiAgICAvLyBCdW5kbGVkIGRlZmluaXRpb24gZXhpc3RlbmNlIGNoZWNraW5nXG4gICAgZnVuY3Rpb24gZ2V0QnVuZGxlZEZpbGVOYW1lKGZpbGVuYW1lKSB7XG4gICAgICAgIHZhciBpZHggPSBmaWxlbmFtZS5sYXN0SW5kZXhPZihcImdvb2dsZS9wcm90b2J1Zi9cIik7XG4gICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgICAgdmFyIGFsdG5hbWUgPSBmaWxlbmFtZS5zdWJzdHJpbmcoaWR4KTtcbiAgICAgICAgICAgIGlmIChhbHRuYW1lIGluIGNvbW1vbikgcmV0dXJuIGFsdG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gUHJvY2Vzc2VzIGEgc2luZ2xlIGZpbGVcbiAgICBmdW5jdGlvbiBwcm9jZXNzKGZpbGVuYW1lLCBzb3VyY2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh1dGlsLmlzU3RyaW5nKHNvdXJjZSkgJiYgc291cmNlLmNoYXJBdCgwKSA9PT0gXCJ7XCIpXG4gICAgICAgICAgICAgICAgc291cmNlID0gSlNPTi5wYXJzZShzb3VyY2UpO1xuICAgICAgICAgICAgaWYgKCF1dGlsLmlzU3RyaW5nKHNvdXJjZSkpXG4gICAgICAgICAgICAgICAgc2VsZi5zZXRPcHRpb25zKHNvdXJjZS5vcHRpb25zKS5hZGRKU09OKHNvdXJjZS5uZXN0ZWQpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2UuZmlsZW5hbWUgPSBmaWxlbmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gcGFyc2Uoc291cmNlLCBzZWxmLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQsXG4gICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQuaW1wb3J0cylcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGkgPCBwYXJzZWQuaW1wb3J0cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZCA9IGdldEJ1bmRsZWRGaWxlTmFtZShwYXJzZWQuaW1wb3J0c1tpXSkgfHwgc2VsZi5yZXNvbHZlUGF0aChmaWxlbmFtZSwgcGFyc2VkLmltcG9ydHNbaV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoKHJlc29sdmVkKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLndlYWtJbXBvcnRzKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFyc2VkLndlYWtJbXBvcnRzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc29sdmVkID0gZ2V0QnVuZGxlZEZpbGVOYW1lKHBhcnNlZC53ZWFrSW1wb3J0c1tpXSkgfHwgc2VsZi5yZXNvbHZlUGF0aChmaWxlbmFtZSwgcGFyc2VkLndlYWtJbXBvcnRzW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZXRjaChyZXNvbHZlZCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZmluaXNoKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzeW5jICYmICFxdWV1ZWQpXG4gICAgICAgICAgICBmaW5pc2gobnVsbCwgc2VsZik7IC8vIG9ubHkgb25jZSBhbnl3YXlcbiAgICB9XG5cbiAgICAvLyBGZXRjaGVzIGEgc2luZ2xlIGZpbGVcbiAgICBmdW5jdGlvbiBmZXRjaChmaWxlbmFtZSwgd2Vhaykge1xuICAgICAgICBmaWxlbmFtZSA9IGdldEJ1bmRsZWRGaWxlTmFtZShmaWxlbmFtZSkgfHwgZmlsZW5hbWU7XG5cbiAgICAgICAgLy8gU2tpcCBpZiBhbHJlYWR5IGxvYWRlZCAvIGF0dGVtcHRlZFxuICAgICAgICBpZiAoc2VsZi5maWxlcy5pbmRleE9mKGZpbGVuYW1lKSA+IC0xKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzZWxmLmZpbGVzLnB1c2goZmlsZW5hbWUpO1xuXG4gICAgICAgIC8vIFNob3J0Y3V0IGJ1bmRsZWQgZGVmaW5pdGlvbnNcbiAgICAgICAgaWYgKGZpbGVuYW1lIGluIGNvbW1vbikge1xuICAgICAgICAgICAgaWYgKHN5bmMpXG4gICAgICAgICAgICAgICAgcHJvY2VzcyhmaWxlbmFtZSwgY29tbW9uW2ZpbGVuYW1lXSk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICArK3F1ZXVlZDtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAtLXF1ZXVlZDtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2VzcyhmaWxlbmFtZSwgY29tbW9uW2ZpbGVuYW1lXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdGhlcndpc2UgZmV0Y2ggZnJvbSBkaXNrIG9yIG5ldHdvcmtcbiAgICAgICAgaWYgKHN5bmMpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2U7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHV0aWwuZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lKS50b1N0cmluZyhcInV0ZjhcIik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdlYWspXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaChlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb2Nlc3MoZmlsZW5hbWUsIHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICArK3F1ZXVlZDtcbiAgICAgICAgICAgIHNlbGYuZmV0Y2goZmlsZW5hbWUsIGZ1bmN0aW9uKGVyciwgc291cmNlKSB7XG4gICAgICAgICAgICAgICAgLS1xdWV1ZWQ7XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKCFjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyB0ZXJtaW5hdGVkIG1lYW53aGlsZVxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF3ZWFrKVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFxdWV1ZWQpIC8vIGNhbid0IGJlIGNvdmVyZWQgcmVsaWFibHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaChudWxsLCBzZWxmKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9jZXNzKGZpbGVuYW1lLCBzb3VyY2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHF1ZXVlZCA9IDA7XG5cbiAgICAvLyBBc3NlbWJsaW5nIHRoZSByb290IG5hbWVzcGFjZSBkb2Vzbid0IHJlcXVpcmUgd29ya2luZyB0eXBlXG4gICAgLy8gcmVmZXJlbmNlcyBhbnltb3JlLCBzbyB3ZSBjYW4gbG9hZCBldmVyeXRoaW5nIGluIHBhcmFsbGVsXG4gICAgaWYgKHV0aWwuaXNTdHJpbmcoZmlsZW5hbWUpKVxuICAgICAgICBmaWxlbmFtZSA9IFsgZmlsZW5hbWUgXTtcbiAgICBmb3IgKHZhciBpID0gMCwgcmVzb2x2ZWQ7IGkgPCBmaWxlbmFtZS5sZW5ndGg7ICsraSlcbiAgICAgICAgaWYgKHJlc29sdmVkID0gc2VsZi5yZXNvbHZlUGF0aChcIlwiLCBmaWxlbmFtZVtpXSkpXG4gICAgICAgICAgICBmZXRjaChyZXNvbHZlZCk7XG5cbiAgICBpZiAoc3luYylcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFxdWV1ZWQpXG4gICAgICAgIGZpbmlzaChudWxsLCBzZWxmKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbi8vIGZ1bmN0aW9uIGxvYWQoZmlsZW5hbWU6c3RyaW5nLCBvcHRpb25zOklQYXJzZU9wdGlvbnMsIGNhbGxiYWNrOkxvYWRDYWxsYmFjayk6dW5kZWZpbmVkXG5cbi8qKlxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byB0aGlzIHJvb3QgbmFtZXNwYWNlIGFuZCBjYWxscyB0aGUgY2FsbGJhY2suXG4gKiBAZnVuY3Rpb24gUm9vdCNsb2FkXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgTmFtZXMgb2Ygb25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7TG9hZENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEB2YXJpYXRpb24gMlxuICovXG4vLyBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lOnN0cmluZywgY2FsbGJhY2s6TG9hZENhbGxiYWNrKTp1bmRlZmluZWRcblxuLyoqXG4gKiBMb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIHRoaXMgcm9vdCBuYW1lc3BhY2UgYW5kIHJldHVybnMgYSBwcm9taXNlLlxuICogQGZ1bmN0aW9uIFJvb3QjbG9hZFxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE5hbWVzIG9mIG9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXG4gKiBAcGFyYW0ge0lQYXJzZU9wdGlvbnN9IFtvcHRpb25zXSBQYXJzZSBvcHRpb25zLiBEZWZhdWx0cyB0byB7QGxpbmsgcGFyc2UuZGVmYXVsdHN9IHdoZW4gb21pdHRlZC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPFJvb3Q+fSBQcm9taXNlXG4gKiBAdmFyaWF0aW9uIDNcbiAqL1xuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIFtvcHRpb25zOklQYXJzZU9wdGlvbnNdKTpQcm9taXNlPFJvb3Q+XG5cbi8qKlxuICogU3luY2hyb25vdXNseSBsb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIHRoaXMgcm9vdCBuYW1lc3BhY2UgKG5vZGUgb25seSkuXG4gKiBAZnVuY3Rpb24gUm9vdCNsb2FkU3luY1xuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE5hbWVzIG9mIG9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXG4gKiBAcGFyYW0ge0lQYXJzZU9wdGlvbnN9IFtvcHRpb25zXSBQYXJzZSBvcHRpb25zLiBEZWZhdWx0cyB0byB7QGxpbmsgcGFyc2UuZGVmYXVsdHN9IHdoZW4gb21pdHRlZC5cbiAqIEByZXR1cm5zIHtSb290fSBSb290IG5hbWVzcGFjZVxuICogQHRocm93cyB7RXJyb3J9IElmIHN5bmNocm9ub3VzIGZldGNoaW5nIGlzIG5vdCBzdXBwb3J0ZWQgKGkuZS4gaW4gYnJvd3NlcnMpIG9yIGlmIGEgZmlsZSdzIHN5bnRheCBpcyBpbnZhbGlkXG4gKi9cblJvb3QucHJvdG90eXBlLmxvYWRTeW5jID0gZnVuY3Rpb24gbG9hZFN5bmMoZmlsZW5hbWUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIXV0aWwuaXNOb2RlKVxuICAgICAgICB0aHJvdyBFcnJvcihcIm5vdCBzdXBwb3J0ZWRcIik7XG4gICAgcmV0dXJuIHRoaXMubG9hZChmaWxlbmFtZSwgb3B0aW9ucywgU1lOQyk7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5Sb290LnByb3RvdHlwZS5yZXNvbHZlQWxsID0gZnVuY3Rpb24gcmVzb2x2ZUFsbCgpIHtcbiAgICBpZiAodGhpcy5kZWZlcnJlZC5sZW5ndGgpXG4gICAgICAgIHRocm93IEVycm9yKFwidW5yZXNvbHZhYmxlIGV4dGVuc2lvbnM6IFwiICsgdGhpcy5kZWZlcnJlZC5tYXAoZnVuY3Rpb24oZmllbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIidleHRlbmQgXCIgKyBmaWVsZC5leHRlbmQgKyBcIicgaW4gXCIgKyBmaWVsZC5wYXJlbnQuZnVsbE5hbWU7XG4gICAgICAgIH0pLmpvaW4oXCIsIFwiKSk7XG4gICAgcmV0dXJuIE5hbWVzcGFjZS5wcm90b3R5cGUucmVzb2x2ZUFsbC5jYWxsKHRoaXMpO1xufTtcblxuLy8gb25seSB1cHBlcmNhc2VkIChhbmQgdGh1cyBjb25mbGljdC1mcmVlKSBjaGlsZHJlbiBhcmUgZXhwb3NlZCwgc2VlIGJlbG93XG52YXIgZXhwb3NlUmUgPSAvXltBLVpdLztcblxuLyoqXG4gKiBIYW5kbGVzIGEgZGVmZXJyZWQgZGVjbGFyaW5nIGV4dGVuc2lvbiBmaWVsZCBieSBjcmVhdGluZyBhIHNpc3RlciBmaWVsZCB0byByZXByZXNlbnQgaXQgd2l0aGluIGl0cyBleHRlbmRlZCB0eXBlLlxuICogQHBhcmFtIHtSb290fSByb290IFJvb3QgaW5zdGFuY2VcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIERlY2xhcmluZyBleHRlbnNpb24gZmllbGQgd2l0aW4gdGhlIGRlY2xhcmluZyB0eXBlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHN1Y2Nlc3NmdWxseSBhZGRlZCB0byB0aGUgZXh0ZW5kZWQgdHlwZSwgYGZhbHNlYCBvdGhlcndpc2VcbiAqIEBpbm5lclxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiB0cnlIYW5kbGVFeHRlbnNpb24ocm9vdCwgZmllbGQpIHtcbiAgICB2YXIgZXh0ZW5kZWRUeXBlID0gZmllbGQucGFyZW50Lmxvb2t1cChmaWVsZC5leHRlbmQpO1xuICAgIGlmIChleHRlbmRlZFR5cGUpIHtcbiAgICAgICAgdmFyIHNpc3RlckZpZWxkID0gbmV3IEZpZWxkKGZpZWxkLmZ1bGxOYW1lLCBmaWVsZC5pZCwgZmllbGQudHlwZSwgZmllbGQucnVsZSwgdW5kZWZpbmVkLCBmaWVsZC5vcHRpb25zKTtcbiAgICAgICAgLy9kbyBub3QgYWxsb3cgdG8gZXh0ZW5kIHNhbWUgZmllbGQgdHdpY2UgdG8gcHJldmVudCB0aGUgZXJyb3JcbiAgICAgICAgaWYgKGV4dGVuZGVkVHlwZS5nZXQoc2lzdGVyRmllbGQubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHNpc3RlckZpZWxkLmRlY2xhcmluZ0ZpZWxkID0gZmllbGQ7XG4gICAgICAgIGZpZWxkLmV4dGVuc2lvbkZpZWxkID0gc2lzdGVyRmllbGQ7XG4gICAgICAgIGV4dGVuZGVkVHlwZS5hZGQoc2lzdGVyRmllbGQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENhbGxlZCB3aGVuIGFueSBvYmplY3QgaXMgYWRkZWQgdG8gdGhpcyByb290IG9yIGl0cyBzdWItbmFtZXNwYWNlcy5cbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gb2JqZWN0IE9iamVjdCBhZGRlZFxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBwcml2YXRlXG4gKi9cblJvb3QucHJvdG90eXBlLl9oYW5kbGVBZGQgPSBmdW5jdGlvbiBfaGFuZGxlQWRkKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBGaWVsZCkge1xuXG4gICAgICAgIGlmICgvKiBhbiBleHRlbnNpb24gZmllbGQgKGltcGxpZXMgbm90IHBhcnQgb2YgYSBvbmVvZikgKi8gb2JqZWN0LmV4dGVuZCAhPT0gdW5kZWZpbmVkICYmIC8qIG5vdCBhbHJlYWR5IGhhbmRsZWQgKi8gIW9iamVjdC5leHRlbnNpb25GaWVsZClcbiAgICAgICAgICAgIGlmICghdHJ5SGFuZGxlRXh0ZW5zaW9uKHRoaXMsIG9iamVjdCkpXG4gICAgICAgICAgICAgICAgdGhpcy5kZWZlcnJlZC5wdXNoKG9iamVjdCk7XG5cbiAgICB9IGVsc2UgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEVudW0pIHtcblxuICAgICAgICBpZiAoZXhwb3NlUmUudGVzdChvYmplY3QubmFtZSkpXG4gICAgICAgICAgICBvYmplY3QucGFyZW50W29iamVjdC5uYW1lXSA9IG9iamVjdC52YWx1ZXM7IC8vIGV4cG9zZSBlbnVtIHZhbHVlcyBhcyBwcm9wZXJ0eSBvZiBpdHMgcGFyZW50XG5cbiAgICB9IGVsc2UgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgT25lT2YpKSAvKiBldmVyeXRoaW5nIGVsc2UgaXMgYSBuYW1lc3BhY2UgKi8ge1xuXG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBUeXBlKSAvLyBUcnkgdG8gaGFuZGxlIGFueSBkZWZlcnJlZCBleHRlbnNpb25zXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGVmZXJyZWQubGVuZ3RoOylcbiAgICAgICAgICAgICAgICBpZiAodHJ5SGFuZGxlRXh0ZW5zaW9uKHRoaXMsIHRoaXMuZGVmZXJyZWRbaV0pKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAvKiBpbml0aWFsaXplcyAqLyBvYmplY3QubmVzdGVkQXJyYXkubGVuZ3RoOyArK2opIC8vIHJlY3Vyc2UgaW50byB0aGUgbmFtZXNwYWNlXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVBZGQob2JqZWN0Ll9uZXN0ZWRBcnJheVtqXSk7XG4gICAgICAgIGlmIChleHBvc2VSZS50ZXN0KG9iamVjdC5uYW1lKSlcbiAgICAgICAgICAgIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdID0gb2JqZWN0OyAvLyBleHBvc2UgbmFtZXNwYWNlIGFzIHByb3BlcnR5IG9mIGl0cyBwYXJlbnRcbiAgICB9XG5cbiAgICAvLyBUaGUgYWJvdmUgYWxzbyBhZGRzIHVwcGVyY2FzZWQgKGFuZCB0aHVzIGNvbmZsaWN0LWZyZWUpIG5lc3RlZCB0eXBlcywgc2VydmljZXMgYW5kIGVudW1zIGFzXG4gICAgLy8gcHJvcGVydGllcyBvZiBuYW1lc3BhY2VzIGp1c3QgbGlrZSBzdGF0aWMgY29kZSBkb2VzLiBUaGlzIGFsbG93cyB1c2luZyBhIC5kLnRzIGdlbmVyYXRlZCBmb3JcbiAgICAvLyBhIHN0YXRpYyBtb2R1bGUgd2l0aCByZWZsZWN0aW9uLWJhc2VkIHNvbHV0aW9ucyB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIG1ldC5cbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gYW55IG9iamVjdCBpcyByZW1vdmVkIGZyb20gdGhpcyByb290IG9yIGl0cyBzdWItbmFtZXNwYWNlcy5cbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gb2JqZWN0IE9iamVjdCByZW1vdmVkXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHByaXZhdGVcbiAqL1xuUm9vdC5wcm90b3R5cGUuX2hhbmRsZVJlbW92ZSA9IGZ1bmN0aW9uIF9oYW5kbGVSZW1vdmUob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEZpZWxkKSB7XG5cbiAgICAgICAgaWYgKC8qIGFuIGV4dGVuc2lvbiBmaWVsZCAqLyBvYmplY3QuZXh0ZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgvKiBhbHJlYWR5IGhhbmRsZWQgKi8gb2JqZWN0LmV4dGVuc2lvbkZpZWxkKSB7IC8vIHJlbW92ZSBpdHMgc2lzdGVyIGZpZWxkXG4gICAgICAgICAgICAgICAgb2JqZWN0LmV4dGVuc2lvbkZpZWxkLnBhcmVudC5yZW1vdmUob2JqZWN0LmV4dGVuc2lvbkZpZWxkKTtcbiAgICAgICAgICAgICAgICBvYmplY3QuZXh0ZW5zaW9uRmllbGQgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gY2FuY2VsIHRoZSBleHRlbnNpb25cbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmRlZmVycmVkLmluZGV4T2Yob2JqZWN0KTtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgRW51bSkge1xuXG4gICAgICAgIGlmIChleHBvc2VSZS50ZXN0KG9iamVjdC5uYW1lKSlcbiAgICAgICAgICAgIGRlbGV0ZSBvYmplY3QucGFyZW50W29iamVjdC5uYW1lXTsgLy8gdW5leHBvc2UgZW51bSB2YWx1ZXNcblxuICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgTmFtZXNwYWNlKSB7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAvKiBpbml0aWFsaXplcyAqLyBvYmplY3QubmVzdGVkQXJyYXkubGVuZ3RoOyArK2kpIC8vIHJlY3Vyc2UgaW50byB0aGUgbmFtZXNwYWNlXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVSZW1vdmUob2JqZWN0Ll9uZXN0ZWRBcnJheVtpXSk7XG5cbiAgICAgICAgaWYgKGV4cG9zZVJlLnRlc3Qob2JqZWN0Lm5hbWUpKVxuICAgICAgICAgICAgZGVsZXRlIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdOyAvLyB1bmV4cG9zZSBuYW1lc3BhY2VzXG5cbiAgICB9XG59O1xuXG4vLyBTZXRzIHVwIGN5Y2xpYyBkZXBlbmRlbmNpZXMgKGNhbGxlZCBpbiBpbmRleC1saWdodClcblJvb3QuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKFR5cGVfLCBwYXJzZV8sIGNvbW1vbl8pIHtcbiAgICBUeXBlICAgPSBUeXBlXztcbiAgICBwYXJzZSAgPSBwYXJzZV87XG4gICAgY29tbW9uID0gY29tbW9uXztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0ge307XG5cbi8qKlxuICogTmFtZWQgcm9vdHMuXG4gKiBUaGlzIGlzIHdoZXJlIHBianMgc3RvcmVzIGdlbmVyYXRlZCBzdHJ1Y3R1cmVzICh0aGUgb3B0aW9uIGAtciwgLS1yb290YCBzcGVjaWZpZXMgYSBuYW1lKS5cbiAqIENhbiBhbHNvIGJlIHVzZWQgbWFudWFsbHkgdG8gbWFrZSByb290cyBhdmFpbGFibGUgYWNyb3NzIG1vZHVsZXMuXG4gKiBAbmFtZSByb290c1xuICogQHR5cGUge09iamVjdC48c3RyaW5nLFJvb3Q+fVxuICogQGV4YW1wbGVcbiAqIC8vIHBianMgLXIgbXlyb290IC1vIGNvbXBpbGVkLmpzIC4uLlxuICpcbiAqIC8vIGluIGFub3RoZXIgbW9kdWxlOlxuICogcmVxdWlyZShcIi4vY29tcGlsZWQuanNcIik7XG4gKlxuICogLy8gaW4gYW55IHN1YnNlcXVlbnQgbW9kdWxlOlxuICogdmFyIHJvb3QgPSBwcm90b2J1Zi5yb290c1tcIm15cm9vdFwiXTtcbiAqL1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogU3RyZWFtaW5nIFJQQyBoZWxwZXJzLlxuICogQG5hbWVzcGFjZVxuICovXG52YXIgcnBjID0gZXhwb3J0cztcblxuLyoqXG4gKiBSUEMgaW1wbGVtZW50YXRpb24gcGFzc2VkIHRvIHtAbGluayBTZXJ2aWNlI2NyZWF0ZX0gcGVyZm9ybWluZyBhIHNlcnZpY2UgcmVxdWVzdCBvbiBuZXR3b3JrIGxldmVsLCBpLmUuIGJ5IHV0aWxpemluZyBodHRwIHJlcXVlc3RzIG9yIHdlYnNvY2tldHMuXG4gKiBAdHlwZWRlZiBSUENJbXBsXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge01ldGhvZHxycGMuU2VydmljZU1ldGhvZDxNZXNzYWdlPHt9PixNZXNzYWdlPHt9Pj59IG1ldGhvZCBSZWZsZWN0ZWQgb3Igc3RhdGljIG1ldGhvZCBiZWluZyBjYWxsZWRcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gcmVxdWVzdERhdGEgUmVxdWVzdCBkYXRhXG4gKiBAcGFyYW0ge1JQQ0ltcGxDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAZXhhbXBsZVxuICogZnVuY3Rpb24gcnBjSW1wbChtZXRob2QsIHJlcXVlc3REYXRhLCBjYWxsYmFjaykge1xuICogICAgIGlmIChwcm90b2J1Zi51dGlsLmxjRmlyc3QobWV0aG9kLm5hbWUpICE9PSBcIm15TWV0aG9kXCIpIC8vIGNvbXBhdGlibGUgd2l0aCBzdGF0aWMgY29kZVxuICogICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggbWV0aG9kXCIpO1xuICogICAgIGFzeW5jaHJvbm91c2x5T2J0YWluQVJlc3BvbnNlKHJlcXVlc3REYXRhLCBmdW5jdGlvbihlcnIsIHJlc3BvbnNlRGF0YSkge1xuICogICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3BvbnNlRGF0YSk7XG4gKiAgICAgfSk7XG4gKiB9XG4gKi9cblxuLyoqXG4gKiBOb2RlLXN0eWxlIGNhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIFJQQ0ltcGx9LlxuICogQHR5cGVkZWYgUlBDSW1wbENhbGxiYWNrXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnksIG90aGVyd2lzZSBgbnVsbGBcbiAqIEBwYXJhbSB7VWludDhBcnJheXxudWxsfSBbcmVzcG9uc2VdIFJlc3BvbnNlIGRhdGEgb3IgYG51bGxgIHRvIHNpZ25hbCBlbmQgb2Ygc3RyZWFtLCBpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhbiBlcnJvclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG5ycGMuU2VydmljZSA9IHJlcXVpcmUoXCIuL3JwYy9zZXJ2aWNlXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2U7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbWluaW1hbFwiKTtcblxuLy8gRXh0ZW5kcyBFdmVudEVtaXR0ZXJcbihTZXJ2aWNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodXRpbC5FdmVudEVtaXR0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBTZXJ2aWNlO1xuXG4vKipcbiAqIEEgc2VydmljZSBtZXRob2QgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgcnBjLlNlcnZpY2VNZXRob2R8U2VydmljZU1ldGhvZH0uXG4gKlxuICogRGlmZmVycyBmcm9tIHtAbGluayBSUENJbXBsQ2FsbGJhY2t9IGluIHRoYXQgaXQgaXMgYW4gYWN0dWFsIGNhbGxiYWNrIG9mIGEgc2VydmljZSBtZXRob2Qgd2hpY2ggbWF5IG5vdCByZXR1cm4gYHJlc3BvbnNlID0gbnVsbGAuXG4gKiBAdHlwZWRlZiBycGMuU2VydmljZU1ldGhvZENhbGxiYWNrXG4gKiBAdGVtcGxhdGUgVFJlcyBleHRlbmRzIE1lc3NhZ2U8VFJlcz5cbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgRXJyb3IsIGlmIGFueVxuICogQHBhcmFtIHtUUmVzfSBbcmVzcG9uc2VdIFJlc3BvbnNlIG1lc3NhZ2VcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuLyoqXG4gKiBBIHNlcnZpY2UgbWV0aG9kIHBhcnQgb2YgYSB7QGxpbmsgcnBjLlNlcnZpY2V9IGFzIGNyZWF0ZWQgYnkge0BsaW5rIFNlcnZpY2UuY3JlYXRlfS5cbiAqIEB0eXBlZGVmIHJwYy5TZXJ2aWNlTWV0aG9kXG4gKiBAdGVtcGxhdGUgVFJlcSBleHRlbmRzIE1lc3NhZ2U8VFJlcT5cbiAqIEB0ZW1wbGF0ZSBUUmVzIGV4dGVuZHMgTWVzc2FnZTxUUmVzPlxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtUUmVxfFByb3BlcnRpZXM8VFJlcT59IHJlcXVlc3QgUmVxdWVzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdFxuICogQHBhcmFtIHtycGMuU2VydmljZU1ldGhvZENhbGxiYWNrPFRSZXM+fSBbY2FsbGJhY2tdIE5vZGUtc3R5bGUgY2FsbGJhY2sgY2FsbGVkIHdpdGggdGhlIGVycm9yLCBpZiBhbnksIGFuZCB0aGUgcmVzcG9uc2UgbWVzc2FnZVxuICogQHJldHVybnMge1Byb21pc2U8TWVzc2FnZTxUUmVzPj59IFByb21pc2UgaWYgYGNhbGxiYWNrYCBoYXMgYmVlbiBvbWl0dGVkLCBvdGhlcndpc2UgYHVuZGVmaW5lZGBcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgUlBDIHNlcnZpY2UgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIEFuIFJQQyBzZXJ2aWNlIGFzIHJldHVybmVkIGJ5IHtAbGluayBTZXJ2aWNlI2NyZWF0ZX0uXG4gKiBAZXhwb3J0cyBycGMuU2VydmljZVxuICogQGV4dGVuZHMgdXRpbC5FdmVudEVtaXR0ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtSUENJbXBsfSBycGNJbXBsIFJQQyBpbXBsZW1lbnRhdGlvblxuICogQHBhcmFtIHtib29sZWFufSBbcmVxdWVzdERlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxuICogQHBhcmFtIHtib29sZWFufSBbcmVzcG9uc2VEZWxpbWl0ZWQ9ZmFsc2VdIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBsZW5ndGgtZGVsaW1pdGVkXG4gKi9cbmZ1bmN0aW9uIFNlcnZpY2UocnBjSW1wbCwgcmVxdWVzdERlbGltaXRlZCwgcmVzcG9uc2VEZWxpbWl0ZWQpIHtcblxuICAgIGlmICh0eXBlb2YgcnBjSW1wbCAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJycGNJbXBsIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICAgIHV0aWwuRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBSUEMgaW1wbGVtZW50YXRpb24uIEJlY29tZXMgYG51bGxgIG9uY2UgdGhlIHNlcnZpY2UgaXMgZW5kZWQuXG4gICAgICogQHR5cGUge1JQQ0ltcGx8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJwY0ltcGwgPSBycGNJbXBsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlcXVlc3REZWxpbWl0ZWQgPSBCb29sZWFuKHJlcXVlc3REZWxpbWl0ZWQpO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXNwb25zZXMgYXJlIGxlbmd0aC1kZWxpbWl0ZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXNwb25zZURlbGltaXRlZCA9IEJvb2xlYW4ocmVzcG9uc2VEZWxpbWl0ZWQpO1xufVxuXG4vKipcbiAqIENhbGxzIGEgc2VydmljZSBtZXRob2QgdGhyb3VnaCB7QGxpbmsgcnBjLlNlcnZpY2UjcnBjSW1wbHxycGNJbXBsfS5cbiAqIEBwYXJhbSB7TWV0aG9kfHJwYy5TZXJ2aWNlTWV0aG9kPFRSZXEsVFJlcz59IG1ldGhvZCBSZWZsZWN0ZWQgb3Igc3RhdGljIG1ldGhvZFxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUUmVxPn0gcmVxdWVzdEN0b3IgUmVxdWVzdCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUUmVzPn0gcmVzcG9uc2VDdG9yIFJlc3BvbnNlIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1RSZXF8UHJvcGVydGllczxUUmVxPn0gcmVxdWVzdCBSZXF1ZXN0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0XG4gKiBAcGFyYW0ge3JwYy5TZXJ2aWNlTWV0aG9kQ2FsbGJhY2s8VFJlcz59IGNhbGxiYWNrIFNlcnZpY2UgY2FsbGJhY2tcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAdGVtcGxhdGUgVFJlcSBleHRlbmRzIE1lc3NhZ2U8VFJlcT5cbiAqIEB0ZW1wbGF0ZSBUUmVzIGV4dGVuZHMgTWVzc2FnZTxUUmVzPlxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS5ycGNDYWxsID0gZnVuY3Rpb24gcnBjQ2FsbChtZXRob2QsIHJlcXVlc3RDdG9yLCByZXNwb25zZUN0b3IsIHJlcXVlc3QsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXJlcXVlc3QpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInJlcXVlc3QgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuIHV0aWwuYXNQcm9taXNlKHJwY0NhbGwsIHNlbGYsIG1ldGhvZCwgcmVxdWVzdEN0b3IsIHJlc3BvbnNlQ3RvciwgcmVxdWVzdCk7XG5cbiAgICBpZiAoIXNlbGYucnBjSW1wbCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhFcnJvcihcImFscmVhZHkgZW5kZWRcIikpOyB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gc2VsZi5ycGNJbXBsKFxuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgcmVxdWVzdEN0b3Jbc2VsZi5yZXF1ZXN0RGVsaW1pdGVkID8gXCJlbmNvZGVEZWxpbWl0ZWRcIiA6IFwiZW5jb2RlXCJdKHJlcXVlc3QpLmZpbmlzaCgpLFxuICAgICAgICAgICAgZnVuY3Rpb24gcnBjQ2FsbGJhY2soZXJyLCByZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBlcnIsIG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVuZCgvKiBlbmRlZEJ5UlBDICovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlIGluc3RhbmNlb2YgcmVzcG9uc2VDdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZUN0b3Jbc2VsZi5yZXNwb25zZURlbGltaXRlZCA/IFwiZGVjb2RlRGVsaW1pdGVkXCIgOiBcImRlY29kZVwiXShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgZXJyLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLmVtaXQoXCJkYXRhXCIsIHJlc3BvbnNlLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVyciwgbWV0aG9kKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2soZXJyKTsgfSwgMCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxuLyoqXG4gKiBFbmRzIHRoaXMgc2VydmljZSBhbmQgZW1pdHMgdGhlIGBlbmRgIGV2ZW50LlxuICogQHBhcmFtIHtib29sZWFufSBbZW5kZWRCeVJQQz1mYWxzZV0gV2hldGhlciB0aGUgc2VydmljZSBoYXMgYmVlbiBlbmRlZCBieSB0aGUgUlBDIGltcGxlbWVudGF0aW9uLlxuICogQHJldHVybnMge3JwYy5TZXJ2aWNlfSBgdGhpc2BcbiAqL1xuU2VydmljZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gZW5kKGVuZGVkQnlSUEMpIHtcbiAgICBpZiAodGhpcy5ycGNJbXBsKSB7XG4gICAgICAgIGlmICghZW5kZWRCeVJQQykgLy8gc2lnbmFsIGVuZCB0byBycGNJbXBsXG4gICAgICAgICAgICB0aGlzLnJwY0ltcGwobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgIHRoaXMucnBjSW1wbCA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdChcImVuZFwiKS5vZmYoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2U7XG5cbi8vIGV4dGVuZHMgTmFtZXNwYWNlXG52YXIgTmFtZXNwYWNlID0gcmVxdWlyZShcIi4vbmFtZXNwYWNlXCIpO1xuKChTZXJ2aWNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTmFtZXNwYWNlLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gU2VydmljZSkuY2xhc3NOYW1lID0gXCJTZXJ2aWNlXCI7XG5cbnZhciBNZXRob2QgPSByZXF1aXJlKFwiLi9tZXRob2RcIiksXG4gICAgdXRpbCAgID0gcmVxdWlyZShcIi4vdXRpbFwiKSxcbiAgICBycGMgICAgPSByZXF1aXJlKFwiLi9ycGNcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBzZXJ2aWNlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgc2VydmljZS5cbiAqIEBleHRlbmRzIE5hbWVzcGFjZUJhc2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgU2VydmljZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gU2VydmljZSBvcHRpb25zXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICovXG5mdW5jdGlvbiBTZXJ2aWNlKG5hbWUsIG9wdGlvbnMpIHtcbiAgICBOYW1lc3BhY2UuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIFNlcnZpY2UgbWV0aG9kcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsTWV0aG9kPn1cbiAgICAgKi9cbiAgICB0aGlzLm1ldGhvZHMgPSB7fTsgLy8gdG9KU09OLCBtYXJrZXJcblxuICAgIC8qKlxuICAgICAqIENhY2hlZCBtZXRob2RzIGFzIGFuIGFycmF5LlxuICAgICAqIEB0eXBlIHtNZXRob2RbXXxudWxsfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWV0aG9kc0FycmF5ID0gbnVsbDtcbn1cblxuLyoqXG4gKiBTZXJ2aWNlIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElTZXJ2aWNlXG4gKiBAZXh0ZW5kcyBJTmFtZXNwYWNlXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLElNZXRob2Q+fSBtZXRob2RzIE1ldGhvZCBkZXNjcmlwdG9yc1xuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHNlcnZpY2UgZnJvbSBhIHNlcnZpY2UgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFNlcnZpY2UgbmFtZVxuICogQHBhcmFtIHtJU2VydmljZX0ganNvbiBTZXJ2aWNlIGRlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtTZXJ2aWNlfSBDcmVhdGVkIHNlcnZpY2VcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXG4gKi9cblNlcnZpY2UuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XG4gICAgdmFyIHNlcnZpY2UgPSBuZXcgU2VydmljZShuYW1lLCBqc29uLm9wdGlvbnMpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGpzb24ubWV0aG9kcylcbiAgICAgICAgZm9yICh2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyhqc29uLm1ldGhvZHMpLCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgc2VydmljZS5hZGQoTWV0aG9kLmZyb21KU09OKG5hbWVzW2ldLCBqc29uLm1ldGhvZHNbbmFtZXNbaV1dKSk7XG4gICAgaWYgKGpzb24ubmVzdGVkKVxuICAgICAgICBzZXJ2aWNlLmFkZEpTT04oanNvbi5uZXN0ZWQpO1xuICAgIHNlcnZpY2UuY29tbWVudCA9IGpzb24uY29tbWVudDtcbiAgICByZXR1cm4gc2VydmljZTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBzZXJ2aWNlIHRvIGEgc2VydmljZSBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7SVNlcnZpY2V9IFNlcnZpY2UgZGVzY3JpcHRvclxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xuICAgIHZhciBpbmhlcml0ZWQgPSBOYW1lc3BhY2UucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIHRvSlNPTk9wdGlvbnMpO1xuICAgIHZhciBrZWVwQ29tbWVudHMgPSB0b0pTT05PcHRpb25zID8gQm9vbGVhbih0b0pTT05PcHRpb25zLmtlZXBDb21tZW50cykgOiBmYWxzZTtcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXG4gICAgICAgIFwib3B0aW9uc1wiICwgaW5oZXJpdGVkICYmIGluaGVyaXRlZC5vcHRpb25zIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgXCJtZXRob2RzXCIgLCBOYW1lc3BhY2UuYXJyYXlUb0pTT04odGhpcy5tZXRob2RzQXJyYXksIHRvSlNPTk9wdGlvbnMpIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHt9LFxuICAgICAgICBcIm5lc3RlZFwiICAsIGluaGVyaXRlZCAmJiBpbmhlcml0ZWQubmVzdGVkIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgXCJjb21tZW50XCIgLCBrZWVwQ29tbWVudHMgPyB0aGlzLmNvbW1lbnQgOiB1bmRlZmluZWRcbiAgICBdKTtcbn07XG5cbi8qKlxuICogTWV0aG9kcyBvZiB0aGlzIHNlcnZpY2UgYXMgYW4gYXJyYXkgZm9yIGl0ZXJhdGlvbi5cbiAqIEBuYW1lIFNlcnZpY2UjbWV0aG9kc0FycmF5XG4gKiBAdHlwZSB7TWV0aG9kW119XG4gKiBAcmVhZG9ubHlcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlcnZpY2UucHJvdG90eXBlLCBcIm1ldGhvZHNBcnJheVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGhvZHNBcnJheSB8fCAodGhpcy5fbWV0aG9kc0FycmF5ID0gdXRpbC50b0FycmF5KHRoaXMubWV0aG9kcykpO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBjbGVhckNhY2hlKHNlcnZpY2UpIHtcbiAgICBzZXJ2aWNlLl9tZXRob2RzQXJyYXkgPSBudWxsO1xuICAgIHJldHVybiBzZXJ2aWNlO1xufVxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1ldGhvZHNbbmFtZV1cbiAgICAgICAgfHwgTmFtZXNwYWNlLnByb3RvdHlwZS5nZXQuY2FsbCh0aGlzLCBuYW1lKTtcbn07XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cblNlcnZpY2UucHJvdG90eXBlLnJlc29sdmVBbGwgPSBmdW5jdGlvbiByZXNvbHZlQWxsKCkge1xuICAgIHZhciBtZXRob2RzID0gdGhpcy5tZXRob2RzQXJyYXk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXRob2RzLmxlbmd0aDsgKytpKVxuICAgICAgICBtZXRob2RzW2ldLnJlc29sdmUoKTtcbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5yZXNvbHZlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQob2JqZWN0KSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5nZXQob2JqZWN0Lm5hbWUpKVxuICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBuYW1lICdcIiArIG9iamVjdC5uYW1lICsgXCInIGluIFwiICsgdGhpcyk7XG5cbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWV0aG9kKSB7XG4gICAgICAgIHRoaXMubWV0aG9kc1tvYmplY3QubmFtZV0gPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gY2xlYXJDYWNoZSh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIE5hbWVzcGFjZS5wcm90b3R5cGUuYWRkLmNhbGwodGhpcywgb2JqZWN0KTtcbn07XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cblNlcnZpY2UucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWV0aG9kKSB7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICh0aGlzLm1ldGhvZHNbb2JqZWN0Lm5hbWVdICE9PSBvYmplY3QpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihvYmplY3QgKyBcIiBpcyBub3QgYSBtZW1iZXIgb2YgXCIgKyB0aGlzKTtcblxuICAgICAgICBkZWxldGUgdGhpcy5tZXRob2RzW29iamVjdC5uYW1lXTtcbiAgICAgICAgb2JqZWN0LnBhcmVudCA9IG51bGw7XG4gICAgICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5yZW1vdmUuY2FsbCh0aGlzLCBvYmplY3QpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcnVudGltZSBzZXJ2aWNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcnBjIGltcGxlbWVudGF0aW9uLlxuICogQHBhcmFtIHtSUENJbXBsfSBycGNJbXBsIFJQQyBpbXBsZW1lbnRhdGlvblxuICogQHBhcmFtIHtib29sZWFufSBbcmVxdWVzdERlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxuICogQHBhcmFtIHtib29sZWFufSBbcmVzcG9uc2VEZWxpbWl0ZWQ9ZmFsc2VdIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBsZW5ndGgtZGVsaW1pdGVkXG4gKiBAcmV0dXJucyB7cnBjLlNlcnZpY2V9IFJQQyBzZXJ2aWNlLiBVc2VmdWwgd2hlcmUgcmVxdWVzdHMgYW5kL29yIHJlc3BvbnNlcyBhcmUgc3RyZWFtZWQuXG4gKi9cblNlcnZpY2UucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShycGNJbXBsLCByZXF1ZXN0RGVsaW1pdGVkLCByZXNwb25zZURlbGltaXRlZCkge1xuICAgIHZhciBycGNTZXJ2aWNlID0gbmV3IHJwYy5TZXJ2aWNlKHJwY0ltcGwsIHJlcXVlc3REZWxpbWl0ZWQsIHJlc3BvbnNlRGVsaW1pdGVkKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbWV0aG9kOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gdGhpcy5tZXRob2RzQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSB1dGlsLmxjRmlyc3QoKG1ldGhvZCA9IHRoaXMuX21ldGhvZHNBcnJheVtpXSkucmVzb2x2ZSgpLm5hbWUpLnJlcGxhY2UoL1teJFxcd19dL2csIFwiXCIpO1xuICAgICAgICBycGNTZXJ2aWNlW21ldGhvZE5hbWVdID0gdXRpbC5jb2RlZ2VuKFtcInJcIixcImNcIl0sIHV0aWwuaXNSZXNlcnZlZChtZXRob2ROYW1lKSA/IG1ldGhvZE5hbWUgKyBcIl9cIiA6IG1ldGhvZE5hbWUpKFwicmV0dXJuIHRoaXMucnBjQ2FsbChtLHEscyxyLGMpXCIpKHtcbiAgICAgICAgICAgIG06IG1ldGhvZCxcbiAgICAgICAgICAgIHE6IG1ldGhvZC5yZXNvbHZlZFJlcXVlc3RUeXBlLmN0b3IsXG4gICAgICAgICAgICBzOiBtZXRob2QucmVzb2x2ZWRSZXNwb25zZVR5cGUuY3RvclxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJwY1NlcnZpY2U7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHRva2VuaXplO1xuXG52YXIgZGVsaW1SZSAgICAgICAgPSAvW1xcc3t9PTs6W1xcXSwnXCIoKTw+XS9nLFxuICAgIHN0cmluZ0RvdWJsZVJlID0gLyg/OlwiKFteXCJcXFxcXSooPzpcXFxcLlteXCJcXFxcXSopKilcIikvZyxcbiAgICBzdHJpbmdTaW5nbGVSZSA9IC8oPzonKFteJ1xcXFxdKig/OlxcXFwuW14nXFxcXF0qKSopJykvZztcblxudmFyIHNldENvbW1lbnRSZSA9IC9eICpbKi9dKyAqLyxcbiAgICBzZXRDb21tZW50QWx0UmUgPSAvXlxccypcXCo/XFwvKi8sXG4gICAgc2V0Q29tbWVudFNwbGl0UmUgPSAvXFxuL2csXG4gICAgd2hpdGVzcGFjZVJlID0gL1xccy8sXG4gICAgdW5lc2NhcGVSZSA9IC9cXFxcKC4/KS9nO1xuXG52YXIgdW5lc2NhcGVNYXAgPSB7XG4gICAgXCIwXCI6IFwiXFwwXCIsXG4gICAgXCJyXCI6IFwiXFxyXCIsXG4gICAgXCJuXCI6IFwiXFxuXCIsXG4gICAgXCJ0XCI6IFwiXFx0XCJcbn07XG5cbi8qKlxuICogVW5lc2NhcGVzIGEgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gdW5lc2NhcGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFVuZXNjYXBlZCBzdHJpbmdcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPn0gbWFwIFNwZWNpYWwgY2hhcmFjdGVycyBtYXBcbiAqIEBtZW1iZXJvZiB0b2tlbml6ZVxuICovXG5mdW5jdGlvbiB1bmVzY2FwZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UodW5lc2NhcGVSZSwgZnVuY3Rpb24oJDAsICQxKSB7XG4gICAgICAgIHN3aXRjaCAoJDEpIHtcbiAgICAgICAgICAgIGNhc2UgXCJcXFxcXCI6XG4gICAgICAgICAgICBjYXNlIFwiXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQxO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5lc2NhcGVNYXBbJDFdIHx8IFwiXCI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxudG9rZW5pemUudW5lc2NhcGUgPSB1bmVzY2FwZTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuZXh0IHRva2VuIGFuZCBhZHZhbmNlcy5cbiAqIEB0eXBlZGVmIFRva2VuaXplckhhbmRsZU5leHRcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gTmV4dCB0b2tlbiBvciBgbnVsbGAgb24gZW9mXG4gKi9cblxuLyoqXG4gKiBQZWVrcyBmb3IgdGhlIG5leHQgdG9rZW4uXG4gKiBAdHlwZWRlZiBUb2tlbml6ZXJIYW5kbGVQZWVrXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IE5leHQgdG9rZW4gb3IgYG51bGxgIG9uIGVvZlxuICovXG5cbi8qKlxuICogUHVzaGVzIGEgdG9rZW4gYmFjayB0byB0aGUgc3RhY2suXG4gKiBAdHlwZWRlZiBUb2tlbml6ZXJIYW5kbGVQdXNoXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge3N0cmluZ30gdG9rZW4gVG9rZW5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuLyoqXG4gKiBTa2lwcyB0aGUgbmV4dCB0b2tlbi5cbiAqIEB0eXBlZGVmIFRva2VuaXplckhhbmRsZVNraXBcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7c3RyaW5nfSBleHBlY3RlZCBFeHBlY3RlZCB0b2tlblxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9uYWw9ZmFsc2VdIElmIG9wdGlvbmFsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdG9rZW4gbWF0Y2hlZFxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSB0b2tlbiBkaWRuJ3QgbWF0Y2ggYW5kIGlzIG5vdCBvcHRpb25hbFxuICovXG5cbi8qKlxuICogR2V0cyB0aGUgY29tbWVudCBvbiB0aGUgcHJldmlvdXMgbGluZSBvciwgYWx0ZXJuYXRpdmVseSwgdGhlIGxpbmUgY29tbWVudCBvbiB0aGUgc3BlY2lmaWVkIGxpbmUuXG4gKiBAdHlwZWRlZiBUb2tlbml6ZXJIYW5kbGVDbW50XG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge251bWJlcn0gW2xpbmVdIExpbmUgbnVtYmVyXG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IENvbW1lbnQgdGV4dCBvciBgbnVsbGAgaWYgbm9uZVxuICovXG5cbi8qKlxuICogSGFuZGxlIG9iamVjdCByZXR1cm5lZCBmcm9tIHtAbGluayB0b2tlbml6ZX0uXG4gKiBAaW50ZXJmYWNlIElUb2tlbml6ZXJIYW5kbGVcbiAqIEBwcm9wZXJ0eSB7VG9rZW5pemVySGFuZGxlTmV4dH0gbmV4dCBHZXRzIHRoZSBuZXh0IHRva2VuIGFuZCBhZHZhbmNlcyAoYG51bGxgIG9uIGVvZilcbiAqIEBwcm9wZXJ0eSB7VG9rZW5pemVySGFuZGxlUGVla30gcGVlayBQZWVrcyBmb3IgdGhlIG5leHQgdG9rZW4gKGBudWxsYCBvbiBlb2YpXG4gKiBAcHJvcGVydHkge1Rva2VuaXplckhhbmRsZVB1c2h9IHB1c2ggUHVzaGVzIGEgdG9rZW4gYmFjayB0byB0aGUgc3RhY2tcbiAqIEBwcm9wZXJ0eSB7VG9rZW5pemVySGFuZGxlU2tpcH0gc2tpcCBTa2lwcyBhIHRva2VuLCByZXR1cm5zIGl0cyBwcmVzZW5jZSBhbmQgYWR2YW5jZXMgb3IsIGlmIG5vbi1vcHRpb25hbCBhbmQgbm90IHByZXNlbnQsIHRocm93c1xuICogQHByb3BlcnR5IHtUb2tlbml6ZXJIYW5kbGVDbW50fSBjbW50IEdldHMgdGhlIGNvbW1lbnQgb24gdGhlIHByZXZpb3VzIGxpbmUgb3IgdGhlIGxpbmUgY29tbWVudCBvbiB0aGUgc3BlY2lmaWVkIGxpbmUsIGlmIGFueVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxpbmUgQ3VycmVudCBsaW5lIG51bWJlclxuICovXG5cbi8qKlxuICogVG9rZW5pemVzIHRoZSBnaXZlbiAucHJvdG8gc291cmNlIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHVzZWZ1bCB1dGlsaXR5IGZ1bmN0aW9ucy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgU291cmNlIGNvbnRlbnRzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFsdGVybmF0ZUNvbW1lbnRNb2RlIFdoZXRoZXIgd2Ugc2hvdWxkIGFjdGl2YXRlIGFsdGVybmF0ZSBjb21tZW50IHBhcnNpbmcgbW9kZS5cbiAqIEByZXR1cm5zIHtJVG9rZW5pemVySGFuZGxlfSBUb2tlbml6ZXIgaGFuZGxlXG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplKHNvdXJjZSwgYWx0ZXJuYXRlQ29tbWVudE1vZGUpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjYWxsYmFjay1yZXR1cm4gKi9cbiAgICBzb3VyY2UgPSBzb3VyY2UudG9TdHJpbmcoKTtcblxuICAgIHZhciBvZmZzZXQgPSAwLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoLFxuICAgICAgICBsaW5lID0gMSxcbiAgICAgICAgbGFzdENvbW1lbnRMaW5lID0gMCxcbiAgICAgICAgY29tbWVudHMgPSB7fTtcblxuICAgIHZhciBzdGFjayA9IFtdO1xuXG4gICAgdmFyIHN0cmluZ0RlbGltID0gbnVsbDtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBlcnJvciBmb3IgaWxsZWdhbCBzeW50YXguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN1YmplY3QgU3ViamVjdFxuICAgICAqIEByZXR1cm5zIHtFcnJvcn0gRXJyb3IgY3JlYXRlZFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlsbGVnYWwoc3ViamVjdCkge1xuICAgICAgICByZXR1cm4gRXJyb3IoXCJpbGxlZ2FsIFwiICsgc3ViamVjdCArIFwiIChsaW5lIFwiICsgbGluZSArIFwiKVwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkcyBhIHN0cmluZyB0aWxsIGl0cyBlbmQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gU3RyaW5nIHJlYWRcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWFkU3RyaW5nKCkge1xuICAgICAgICB2YXIgcmUgPSBzdHJpbmdEZWxpbSA9PT0gXCInXCIgPyBzdHJpbmdTaW5nbGVSZSA6IHN0cmluZ0RvdWJsZVJlO1xuICAgICAgICByZS5sYXN0SW5kZXggPSBvZmZzZXQgLSAxO1xuICAgICAgICB2YXIgbWF0Y2ggPSByZS5leGVjKHNvdXJjZSk7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKFwic3RyaW5nXCIpO1xuICAgICAgICBvZmZzZXQgPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHB1c2goc3RyaW5nRGVsaW0pO1xuICAgICAgICBzdHJpbmdEZWxpbSA9IG51bGw7XG4gICAgICAgIHJldHVybiB1bmVzY2FwZShtYXRjaFsxXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY2hhcmFjdGVyIGF0IGBwb3NgIHdpdGhpbiB0aGUgc291cmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgUG9zaXRpb25cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBDaGFyYWN0ZXJcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFyQXQocG9zKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuY2hhckF0KHBvcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCBjb21tZW50IHRleHQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFN0YXJ0IG9mZnNldFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgRW5kIG9mZnNldFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMZWFkaW5nIHNldCBpZiBhIGxlYWRpbmcgY29tbWVudFxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q29tbWVudChzdGFydCwgZW5kLCBpc0xlYWRpbmcpIHtcbiAgICAgICAgdmFyIGNvbW1lbnQgPSB7XG4gICAgICAgICAgICB0eXBlOiBzb3VyY2UuY2hhckF0KHN0YXJ0KyspLFxuICAgICAgICAgICAgbGluZUVtcHR5OiBmYWxzZSxcbiAgICAgICAgICAgIGxlYWRpbmc6IGlzTGVhZGluZyxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGxvb2tiYWNrO1xuICAgICAgICBpZiAoYWx0ZXJuYXRlQ29tbWVudE1vZGUpIHtcbiAgICAgICAgICAgIGxvb2tiYWNrID0gMjsgIC8vIGFsdGVybmF0ZSBjb21tZW50IHBhcnNpbmc6IFwiLy9cIiBvciBcIi8qXCJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvb2tiYWNrID0gMzsgIC8vIFwiLy8vXCIgb3IgXCIvKipcIlxuICAgICAgICB9XG4gICAgICAgIHZhciBjb21tZW50T2Zmc2V0ID0gc3RhcnQgLSBsb29rYmFjayxcbiAgICAgICAgICAgIGM7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICgtLWNvbW1lbnRPZmZzZXQgPCAwIHx8XG4gICAgICAgICAgICAgICAgICAgIChjID0gc291cmNlLmNoYXJBdChjb21tZW50T2Zmc2V0KSkgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgICAgICBjb21tZW50LmxpbmVFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGMgPT09IFwiIFwiIHx8IGMgPT09IFwiXFx0XCIpO1xuICAgICAgICB2YXIgbGluZXMgPSBzb3VyY2VcbiAgICAgICAgICAgIC5zdWJzdHJpbmcoc3RhcnQsIGVuZClcbiAgICAgICAgICAgIC5zcGxpdChzZXRDb21tZW50U3BsaXRSZSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBsaW5lc1tpXSA9IGxpbmVzW2ldXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYWx0ZXJuYXRlQ29tbWVudE1vZGUgPyBzZXRDb21tZW50QWx0UmUgOiBzZXRDb21tZW50UmUsIFwiXCIpXG4gICAgICAgICAgICAgICAgLnRyaW0oKTtcbiAgICAgICAgY29tbWVudC50ZXh0ID0gbGluZXNcbiAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpXG4gICAgICAgICAgICAudHJpbSgpO1xuXG4gICAgICAgIGNvbW1lbnRzW2xpbmVdID0gY29tbWVudDtcbiAgICAgICAgbGFzdENvbW1lbnRMaW5lID0gbGluZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RvdWJsZVNsYXNoQ29tbWVudExpbmUoc3RhcnRPZmZzZXQpIHtcbiAgICAgICAgdmFyIGVuZE9mZnNldCA9IGZpbmRFbmRPZkxpbmUoc3RhcnRPZmZzZXQpO1xuXG4gICAgICAgIC8vIHNlZSBpZiByZW1haW5pbmcgbGluZSBtYXRjaGVzIGNvbW1lbnQgcGF0dGVyblxuICAgICAgICB2YXIgbGluZVRleHQgPSBzb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpO1xuICAgICAgICB2YXIgaXNDb21tZW50ID0gL15cXHMqXFwvXFwvLy50ZXN0KGxpbmVUZXh0KTtcbiAgICAgICAgcmV0dXJuIGlzQ29tbWVudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5kRW5kT2ZMaW5lKGN1cnNvcikge1xuICAgICAgICAvLyBmaW5kIGVuZCBvZiBjdXJzb3IncyBsaW5lXG4gICAgICAgIHZhciBlbmRPZmZzZXQgPSBjdXJzb3I7XG4gICAgICAgIHdoaWxlIChlbmRPZmZzZXQgPCBsZW5ndGggJiYgY2hhckF0KGVuZE9mZnNldCkgIT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgIGVuZE9mZnNldCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmRPZmZzZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2J0YWlucyB0aGUgbmV4dCB0b2tlbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IE5leHQgdG9rZW4gb3IgYG51bGxgIG9uIGVvZlxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgIGlmIChzdHJpbmdEZWxpbSlcbiAgICAgICAgICAgIHJldHVybiByZWFkU3RyaW5nKCk7XG4gICAgICAgIHZhciByZXBlYXQsXG4gICAgICAgICAgICBwcmV2LFxuICAgICAgICAgICAgY3VycixcbiAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgaXNEb2MsXG4gICAgICAgICAgICBpc0xlYWRpbmdDb21tZW50ID0gb2Zmc2V0ID09PSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09PSBsZW5ndGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXBlYXQgPSBmYWxzZTtcbiAgICAgICAgICAgIHdoaWxlICh3aGl0ZXNwYWNlUmUudGVzdChjdXJyID0gY2hhckF0KG9mZnNldCkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnIgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNMZWFkaW5nQ29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICsrbGluZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCsrb2Zmc2V0ID09PSBsZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hhckF0KG9mZnNldCkgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCsrb2Zmc2V0ID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChcImNvbW1lbnRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaGFyQXQob2Zmc2V0KSA9PT0gXCIvXCIpIHsgLy8gTGluZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsdGVybmF0ZUNvbW1lbnRNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgdHJpcGxlLXNsYXNoIGNvbW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRG9jID0gY2hhckF0KHN0YXJ0ID0gb2Zmc2V0ICsgMSkgPT09IFwiL1wiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2hhckF0KCsrb2Zmc2V0KSAhPT0gXCJcXG5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICArK29mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0RvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENvbW1lbnQoc3RhcnQsIG9mZnNldCAtIDEsIGlzTGVhZGluZ0NvbW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYWlsaW5nIGNvbW1lbnQgY2Fubm90IG5vdCBiZSBtdWx0aS1saW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIGxlYWRpbmcgY29tbWVudCBzdGF0ZSBzaG91bGQgYmUgcmVzZXQgdG8gaGFuZGxlIHBvdGVudGlhbCBuZXh0IGNvbW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNMZWFkaW5nQ29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICArK2xpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBlYXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGRvdWJsZS1zbGFzaCBjb21tZW50cywgY29uc29saWRhdGluZyBjb25zZWN1dGl2ZSBsaW5lc1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RvYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG91YmxlU2xhc2hDb21tZW50TGluZShvZmZzZXQgLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRG9jID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IGZpbmRFbmRPZkxpbmUob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0xlYWRpbmdDb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmFpbGluZyBjb21tZW50IGNhbm5vdCBub3QgYmUgbXVsdGktbGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChpc0RvdWJsZVNsYXNoQ29tbWVudExpbmUob2Zmc2V0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWluKGxlbmd0aCwgZmluZEVuZE9mTGluZShvZmZzZXQpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDb21tZW50KHN0YXJ0LCBvZmZzZXQsIGlzTGVhZGluZ0NvbW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTGVhZGluZ0NvbW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGN1cnIgPSBjaGFyQXQob2Zmc2V0KSkgPT09IFwiKlwiKSB7IC8qIEJsb2NrICovXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciAvKiogKHJlZ3VsYXIgY29tbWVudCBtb2RlKSBvciAvKiAoYWx0ZXJuYXRlIGNvbW1lbnQgbW9kZSlcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBvZmZzZXQgKyAxO1xuICAgICAgICAgICAgICAgICAgICBpc0RvYyA9IGFsdGVybmF0ZUNvbW1lbnRNb2RlIHx8IGNoYXJBdChzdGFydCkgPT09IFwiKlwiO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyciA9PT0gXCJcXG5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrbGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgrK29mZnNldCA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChcImNvbW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gY3VycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIgPSBjaGFyQXQob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAocHJldiAhPT0gXCIqXCIgfHwgY3VyciAhPT0gXCIvXCIpO1xuICAgICAgICAgICAgICAgICAgICArK29mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDb21tZW50KHN0YXJ0LCBvZmZzZXQgLSAyLCBpc0xlYWRpbmdDb21tZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTGVhZGluZ0NvbW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiL1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAocmVwZWF0KTtcblxuICAgICAgICAvLyBvZmZzZXQgIT09IGxlbmd0aCBpZiB3ZSBnb3QgaGVyZVxuXG4gICAgICAgIHZhciBlbmQgPSBvZmZzZXQ7XG4gICAgICAgIGRlbGltUmUubGFzdEluZGV4ID0gMDtcbiAgICAgICAgdmFyIGRlbGltID0gZGVsaW1SZS50ZXN0KGNoYXJBdChlbmQrKykpO1xuICAgICAgICBpZiAoIWRlbGltKVxuICAgICAgICAgICAgd2hpbGUgKGVuZCA8IGxlbmd0aCAmJiAhZGVsaW1SZS50ZXN0KGNoYXJBdChlbmQpKSlcbiAgICAgICAgICAgICAgICArK2VuZDtcbiAgICAgICAgdmFyIHRva2VuID0gc291cmNlLnN1YnN0cmluZyhvZmZzZXQsIG9mZnNldCA9IGVuZCk7XG4gICAgICAgIGlmICh0b2tlbiA9PT0gXCJcXFwiXCIgfHwgdG9rZW4gPT09IFwiJ1wiKVxuICAgICAgICAgICAgc3RyaW5nRGVsaW0gPSB0b2tlbjtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1c2hlcyBhIHRva2VuIGJhY2sgdG8gdGhlIHN0YWNrLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlbiBUb2tlblxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVzaCh0b2tlbikge1xuICAgICAgICBzdGFjay5wdXNoKHRva2VuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZWVrcyBmb3IgdGhlIG5leHQgdG9rZW4uXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBUb2tlbiBvciBgbnVsbGAgb24gZW9mXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGVlaygpIHtcbiAgICAgICAgaWYgKCFzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IG5leHQoKTtcbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFja1swXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTa2lwcyBhIHRva2VuLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHBlY3RlZCBFeHBlY3RlZCB0b2tlblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbmFsPWZhbHNlXSBXaGV0aGVyIHRoZSB0b2tlbiBpcyBvcHRpb25hbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgd2hlbiBza2lwcGVkLCBgZmFsc2VgIGlmIG5vdFxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBXaGVuIGEgcmVxdWlyZWQgdG9rZW4gaXMgbm90IHByZXNlbnRcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBza2lwKGV4cGVjdGVkLCBvcHRpb25hbCkge1xuICAgICAgICB2YXIgYWN0dWFsID0gcGVlaygpLFxuICAgICAgICAgICAgZXF1YWxzID0gYWN0dWFsID09PSBleHBlY3RlZDtcbiAgICAgICAgaWYgKGVxdWFscykge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25hbClcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwoXCJ0b2tlbiAnXCIgKyBhY3R1YWwgKyBcIicsICdcIiArIGV4cGVjdGVkICsgXCInIGV4cGVjdGVkXCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGNvbW1lbnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt0cmFpbGluZ0xpbmVdIExpbmUgbnVtYmVyIGlmIGxvb2tpbmcgZm9yIGEgdHJhaWxpbmcgY29tbWVudFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gQ29tbWVudCB0ZXh0XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY21udCh0cmFpbGluZ0xpbmUpIHtcbiAgICAgICAgdmFyIHJldCA9IG51bGw7XG4gICAgICAgIHZhciBjb21tZW50O1xuICAgICAgICBpZiAodHJhaWxpbmdMaW5lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1lbnQgPSBjb21tZW50c1tsaW5lIC0gMV07XG4gICAgICAgICAgICBkZWxldGUgY29tbWVudHNbbGluZSAtIDFdO1xuICAgICAgICAgICAgaWYgKGNvbW1lbnQgJiYgKGFsdGVybmF0ZUNvbW1lbnRNb2RlIHx8IGNvbW1lbnQudHlwZSA9PT0gXCIqXCIgfHwgY29tbWVudC5saW5lRW1wdHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gY29tbWVudC5sZWFkaW5nID8gY29tbWVudC50ZXh0IDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAobGFzdENvbW1lbnRMaW5lIDwgdHJhaWxpbmdMaW5lKSB7XG4gICAgICAgICAgICAgICAgcGVlaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tbWVudCA9IGNvbW1lbnRzW3RyYWlsaW5nTGluZV07XG4gICAgICAgICAgICBkZWxldGUgY29tbWVudHNbdHJhaWxpbmdMaW5lXTtcbiAgICAgICAgICAgIGlmIChjb21tZW50ICYmICFjb21tZW50LmxpbmVFbXB0eSAmJiAoYWx0ZXJuYXRlQ29tbWVudE1vZGUgfHwgY29tbWVudC50eXBlID09PSBcIi9cIikpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBjb21tZW50LmxlYWRpbmcgPyBudWxsIDogY29tbWVudC50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICAgIG5leHQ6IG5leHQsXG4gICAgICAgIHBlZWs6IHBlZWssXG4gICAgICAgIHB1c2g6IHB1c2gsXG4gICAgICAgIHNraXA6IHNraXAsXG4gICAgICAgIGNtbnQ6IGNtbnRcbiAgICB9LCBcImxpbmVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZTsgfVxuICAgIH0pO1xuICAgIC8qIGVzbGludC1lbmFibGUgY2FsbGJhY2stcmV0dXJuICovXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gVHlwZTtcblxuLy8gZXh0ZW5kcyBOYW1lc3BhY2VcbnZhciBOYW1lc3BhY2UgPSByZXF1aXJlKFwiLi9uYW1lc3BhY2VcIik7XG4oKFR5cGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOYW1lc3BhY2UucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBUeXBlKS5jbGFzc05hbWUgPSBcIlR5cGVcIjtcblxudmFyIEVudW0gICAgICA9IHJlcXVpcmUoXCIuL2VudW1cIiksXG4gICAgT25lT2YgICAgID0gcmVxdWlyZShcIi4vb25lb2ZcIiksXG4gICAgRmllbGQgICAgID0gcmVxdWlyZShcIi4vZmllbGRcIiksXG4gICAgTWFwRmllbGQgID0gcmVxdWlyZShcIi4vbWFwZmllbGRcIiksXG4gICAgU2VydmljZSAgID0gcmVxdWlyZShcIi4vc2VydmljZVwiKSxcbiAgICBNZXNzYWdlICAgPSByZXF1aXJlKFwiLi9tZXNzYWdlXCIpLFxuICAgIFJlYWRlciAgICA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKSxcbiAgICBXcml0ZXIgICAgPSByZXF1aXJlKFwiLi93cml0ZXJcIiksXG4gICAgdXRpbCAgICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKSxcbiAgICBlbmNvZGVyICAgPSByZXF1aXJlKFwiLi9lbmNvZGVyXCIpLFxuICAgIGRlY29kZXIgICA9IHJlcXVpcmUoXCIuL2RlY29kZXJcIiksXG4gICAgdmVyaWZpZXIgID0gcmVxdWlyZShcIi4vdmVyaWZpZXJcIiksXG4gICAgY29udmVydGVyID0gcmVxdWlyZShcIi4vY29udmVydGVyXCIpLFxuICAgIHdyYXBwZXJzICA9IHJlcXVpcmUoXCIuL3dyYXBwZXJzXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcmVmbGVjdGVkIG1lc3NhZ2UgdHlwZSBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgUmVmbGVjdGVkIG1lc3NhZ2UgdHlwZS5cbiAqIEBleHRlbmRzIE5hbWVzcGFjZUJhc2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTWVzc2FnZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRGVjbGFyZWQgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBUeXBlKG5hbWUsIG9wdGlvbnMpIHtcbiAgICBOYW1lc3BhY2UuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIE1lc3NhZ2UgZmllbGRzLlxuICAgICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxGaWVsZD59XG4gICAgICovXG4gICAgdGhpcy5maWVsZHMgPSB7fTsgIC8vIHRvSlNPTiwgbWFya2VyXG5cbiAgICAvKipcbiAgICAgKiBPbmVvZnMgZGVjbGFyZWQgd2l0aGluIHRoaXMgbmFtZXNwYWNlLCBpZiBhbnkuXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLE9uZU9mPn1cbiAgICAgKi9cbiAgICB0aGlzLm9uZW9mcyA9IHVuZGVmaW5lZDsgLy8gdG9KU09OXG5cbiAgICAvKipcbiAgICAgKiBFeHRlbnNpb24gcmFuZ2VzLCBpZiBhbnkuXG4gICAgICogQHR5cGUge251bWJlcltdW119XG4gICAgICovXG4gICAgdGhpcy5leHRlbnNpb25zID0gdW5kZWZpbmVkOyAvLyB0b0pTT05cblxuICAgIC8qKlxuICAgICAqIFJlc2VydmVkIHJhbmdlcywgaWYgYW55LlxuICAgICAqIEB0eXBlIHtBcnJheS48bnVtYmVyW118c3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc2VydmVkID0gdW5kZWZpbmVkOyAvLyB0b0pTT05cblxuICAgIC8qP1xuICAgICAqIFdoZXRoZXIgdGhpcyB0eXBlIGlzIGEgbGVnYWN5IGdyb3VwLlxuICAgICAqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLmdyb3VwID0gdW5kZWZpbmVkOyAvLyB0b0pTT05cblxuICAgIC8qKlxuICAgICAqIENhY2hlZCBmaWVsZHMgYnkgaWQuXG4gICAgICogQHR5cGUge09iamVjdC48bnVtYmVyLEZpZWxkPnxudWxsfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZmllbGRzQnlJZCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZWQgZmllbGRzIGFzIGFuIGFycmF5LlxuICAgICAqIEB0eXBlIHtGaWVsZFtdfG51bGx9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9maWVsZHNBcnJheSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZWQgb25lb2ZzIGFzIGFuIGFycmF5LlxuICAgICAqIEB0eXBlIHtPbmVPZltdfG51bGx9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9vbmVvZnNBcnJheSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZWQgY29uc3RydWN0b3IuXG4gICAgICogQHR5cGUge0NvbnN0cnVjdG9yPHt9Pn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2N0b3IgPSBudWxsO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhUeXBlLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogTWVzc2FnZSBmaWVsZHMgYnkgaWQuXG4gICAgICogQG5hbWUgVHlwZSNmaWVsZHNCeUlkXG4gICAgICogQHR5cGUge09iamVjdC48bnVtYmVyLEZpZWxkPn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBmaWVsZHNCeUlkOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKHRoaXMuX2ZpZWxkc0J5SWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpZWxkc0J5SWQ7XG5cbiAgICAgICAgICAgIHRoaXMuX2ZpZWxkc0J5SWQgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIG5hbWVzID0gT2JqZWN0LmtleXModGhpcy5maWVsZHMpLCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5maWVsZHNbbmFtZXNbaV1dLFxuICAgICAgICAgICAgICAgICAgICBpZCA9IGZpZWxkLmlkO1xuXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZpZWxkc0J5SWRbaWRdKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBpZCBcIiArIGlkICsgXCIgaW4gXCIgKyB0aGlzKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpZWxkc0J5SWRbaWRdID0gZmllbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmllbGRzQnlJZDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaWVsZHMgb2YgdGhpcyBtZXNzYWdlIGFzIGFuIGFycmF5IGZvciBpdGVyYXRpb24uXG4gICAgICogQG5hbWUgVHlwZSNmaWVsZHNBcnJheVxuICAgICAqIEB0eXBlIHtGaWVsZFtdfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGZpZWxkc0FycmF5OiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmllbGRzQXJyYXkgfHwgKHRoaXMuX2ZpZWxkc0FycmF5ID0gdXRpbC50b0FycmF5KHRoaXMuZmllbGRzKSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogT25lb2ZzIG9mIHRoaXMgbWVzc2FnZSBhcyBhbiBhcnJheSBmb3IgaXRlcmF0aW9uLlxuICAgICAqIEBuYW1lIFR5cGUjb25lb2ZzQXJyYXlcbiAgICAgKiBAdHlwZSB7T25lT2ZbXX1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBvbmVvZnNBcnJheToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29uZW9mc0FycmF5IHx8ICh0aGlzLl9vbmVvZnNBcnJheSA9IHV0aWwudG9BcnJheSh0aGlzLm9uZW9mcykpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSByZWdpc3RlcmVkIGNvbnN0cnVjdG9yLCBpZiBhbnkgcmVnaXN0ZXJlZCwgb3RoZXJ3aXNlIGEgZ2VuZXJpYyBjb25zdHJ1Y3Rvci5cbiAgICAgKiBBc3NpZ25pbmcgYSBmdW5jdGlvbiByZXBsYWNlcyB0aGUgaW50ZXJuYWwgY29uc3RydWN0b3IuIElmIHRoZSBmdW5jdGlvbiBkb2VzIG5vdCBleHRlbmQge0BsaW5rIE1lc3NhZ2V9IHlldCwgaXRzIHByb3RvdHlwZSB3aWxsIGJlIHNldHVwIGFjY29yZGluZ2x5IGFuZCBzdGF0aWMgbWV0aG9kcyB3aWxsIGJlIHBvcHVsYXRlZC4gSWYgaXQgYWxyZWFkeSBleHRlbmRzIHtAbGluayBNZXNzYWdlfSwgaXQgd2lsbCBqdXN0IHJlcGxhY2UgdGhlIGludGVybmFsIGNvbnN0cnVjdG9yLlxuICAgICAqIEBuYW1lIFR5cGUjY3RvclxuICAgICAqIEB0eXBlIHtDb25zdHJ1Y3Rvcjx7fT59XG4gICAgICovXG4gICAgY3Rvcjoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N0b3IgfHwgKHRoaXMuY3RvciA9IFR5cGUuZ2VuZXJhdGVDb25zdHJ1Y3Rvcih0aGlzKSgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbihjdG9yKSB7XG5cbiAgICAgICAgICAgIC8vIEVuc3VyZSBwcm9wZXIgcHJvdG90eXBlXG4gICAgICAgICAgICB2YXIgcHJvdG90eXBlID0gY3Rvci5wcm90b3R5cGU7XG4gICAgICAgICAgICBpZiAoIShwcm90b3R5cGUgaW5zdGFuY2VvZiBNZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgIChjdG9yLnByb3RvdHlwZSA9IG5ldyBNZXNzYWdlKCkpLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgICAgICAgICAgICAgICB1dGlsLm1lcmdlKGN0b3IucHJvdG90eXBlLCBwcm90b3R5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGFzc2VzIGFuZCBtZXNzYWdlcyByZWZlcmVuY2UgdGhlaXIgcmVmbGVjdGVkIHR5cGVcbiAgICAgICAgICAgIGN0b3IuJHR5cGUgPSBjdG9yLnByb3RvdHlwZS4kdHlwZSA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIE1peCBpbiBzdGF0aWMgbWV0aG9kc1xuICAgICAgICAgICAgdXRpbC5tZXJnZShjdG9yLCBNZXNzYWdlLCB0cnVlKTtcblxuICAgICAgICAgICAgdGhpcy5fY3RvciA9IGN0b3I7XG5cbiAgICAgICAgICAgIC8vIE1lc3NhZ2VzIGhhdmUgbm9uLWVudW1lcmFibGUgZGVmYXVsdCB2YWx1ZXMgb24gdGhlaXIgcHJvdG90eXBlXG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IC8qIGluaXRpYWxpemVzICovIHRoaXMuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgdGhpcy5fZmllbGRzQXJyYXlbaV0ucmVzb2x2ZSgpOyAvLyBlbnN1cmVzIGEgcHJvcGVyIHZhbHVlXG5cbiAgICAgICAgICAgIC8vIE1lc3NhZ2VzIGhhdmUgbm9uLWVudW1lcmFibGUgZ2V0dGVycyBhbmQgc2V0dGVycyBmb3IgZWFjaCB2aXJ0dWFsIG9uZW9mIGZpZWxkXG4gICAgICAgICAgICB2YXIgY3RvclByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAvKiBpbml0aWFsaXplcyAqLyB0aGlzLm9uZW9mc0FycmF5Lmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGN0b3JQcm9wZXJ0aWVzW3RoaXMuX29uZW9mc0FycmF5W2ldLnJlc29sdmUoKS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiB1dGlsLm9uZU9mR2V0dGVyKHRoaXMuX29uZW9mc0FycmF5W2ldLm9uZW9mKSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiB1dGlsLm9uZU9mU2V0dGVyKHRoaXMuX29uZW9mc0FycmF5W2ldLm9uZW9mKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaSlcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjdG9yLnByb3RvdHlwZSwgY3RvclByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBzcGVjaWZpZWQgdHlwZS5cbiAqIEBwYXJhbSB7VHlwZX0gbXR5cGUgTWVzc2FnZSB0eXBlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICovXG5UeXBlLmdlbmVyYXRlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBnZW5lcmF0ZUNvbnN0cnVjdG9yKG10eXBlKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbiAgICB2YXIgZ2VuID0gdXRpbC5jb2RlZ2VuKFtcInBcIl0sIG10eXBlLm5hbWUpO1xuICAgIC8vIGV4cGxpY2l0bHkgaW5pdGlhbGl6ZSBtdXRhYmxlIG9iamVjdC9hcnJheSBmaWVsZHMgc28gdGhhdCB0aGVzZSBhcmVuJ3QganVzdCBpbmhlcml0ZWQgZnJvbSB0aGUgcHJvdG90eXBlXG4gICAgZm9yICh2YXIgaSA9IDAsIGZpZWxkOyBpIDwgbXR5cGUuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmICgoZmllbGQgPSBtdHlwZS5fZmllbGRzQXJyYXlbaV0pLm1hcCkgZ2VuXG4gICAgICAgICAgICAoXCJ0aGlzJXM9e31cIiwgdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKSk7XG4gICAgICAgIGVsc2UgaWYgKGZpZWxkLnJlcGVhdGVkKSBnZW5cbiAgICAgICAgICAgIChcInRoaXMlcz1bXVwiLCB1dGlsLnNhZmVQcm9wKGZpZWxkLm5hbWUpKTtcbiAgICByZXR1cm4gZ2VuXG4gICAgKFwiaWYocClmb3IodmFyIGtzPU9iamVjdC5rZXlzKHApLGk9MDtpPGtzLmxlbmd0aDsrK2kpaWYocFtrc1tpXV0hPW51bGwpXCIpIC8vIG9taXQgdW5kZWZpbmVkIG9yIG51bGxcbiAgICAgICAgKFwidGhpc1trc1tpXV09cFtrc1tpXV1cIik7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xufTtcblxuZnVuY3Rpb24gY2xlYXJDYWNoZSh0eXBlKSB7XG4gICAgdHlwZS5fZmllbGRzQnlJZCA9IHR5cGUuX2ZpZWxkc0FycmF5ID0gdHlwZS5fb25lb2ZzQXJyYXkgPSBudWxsO1xuICAgIGRlbGV0ZSB0eXBlLmVuY29kZTtcbiAgICBkZWxldGUgdHlwZS5kZWNvZGU7XG4gICAgZGVsZXRlIHR5cGUudmVyaWZ5O1xuICAgIHJldHVybiB0eXBlO1xufVxuXG4vKipcbiAqIE1lc3NhZ2UgdHlwZSBkZXNjcmlwdG9yLlxuICogQGludGVyZmFjZSBJVHlwZVxuICogQGV4dGVuZHMgSU5hbWVzcGFjZVxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxJT25lT2Y+fSBbb25lb2ZzXSBPbmVvZiBkZXNjcmlwdG9yc1xuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxJRmllbGQ+fSBmaWVsZHMgRmllbGQgZGVzY3JpcHRvcnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyW11bXX0gW2V4dGVuc2lvbnNdIEV4dGVuc2lvbiByYW5nZXNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyW11bXX0gW3Jlc2VydmVkXSBSZXNlcnZlZCByYW5nZXNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2dyb3VwPWZhbHNlXSBXaGV0aGVyIGEgbGVnYWN5IGdyb3VwIG9yIG5vdFxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG1lc3NhZ2UgdHlwZSBmcm9tIGEgbWVzc2FnZSB0eXBlIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBNZXNzYWdlIG5hbWVcbiAqIEBwYXJhbSB7SVR5cGV9IGpzb24gTWVzc2FnZSB0eXBlIGRlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtUeXBlfSBDcmVhdGVkIG1lc3NhZ2UgdHlwZVxuICovXG5UeXBlLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xuICAgIHZhciB0eXBlID0gbmV3IFR5cGUobmFtZSwganNvbi5vcHRpb25zKTtcbiAgICB0eXBlLmV4dGVuc2lvbnMgPSBqc29uLmV4dGVuc2lvbnM7XG4gICAgdHlwZS5yZXNlcnZlZCA9IGpzb24ucmVzZXJ2ZWQ7XG4gICAgdmFyIG5hbWVzID0gT2JqZWN0LmtleXMoanNvbi5maWVsZHMpLFxuICAgICAgICBpID0gMDtcbiAgICBmb3IgKDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKVxuICAgICAgICB0eXBlLmFkZChcbiAgICAgICAgICAgICggdHlwZW9mIGpzb24uZmllbGRzW25hbWVzW2ldXS5rZXlUeXBlICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICA/IE1hcEZpZWxkLmZyb21KU09OXG4gICAgICAgICAgICA6IEZpZWxkLmZyb21KU09OICkobmFtZXNbaV0sIGpzb24uZmllbGRzW25hbWVzW2ldXSlcbiAgICAgICAgKTtcbiAgICBpZiAoanNvbi5vbmVvZnMpXG4gICAgICAgIGZvciAobmFtZXMgPSBPYmplY3Qua2V5cyhqc29uLm9uZW9mcyksIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB0eXBlLmFkZChPbmVPZi5mcm9tSlNPTihuYW1lc1tpXSwganNvbi5vbmVvZnNbbmFtZXNbaV1dKSk7XG4gICAgaWYgKGpzb24ubmVzdGVkKVxuICAgICAgICBmb3IgKG5hbWVzID0gT2JqZWN0LmtleXMoanNvbi5uZXN0ZWQpLCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgbmVzdGVkID0ganNvbi5uZXN0ZWRbbmFtZXNbaV1dO1xuICAgICAgICAgICAgdHlwZS5hZGQoIC8vIG1vc3QgdG8gbGVhc3QgbGlrZWx5XG4gICAgICAgICAgICAgICAgKCBuZXN0ZWQuaWQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gRmllbGQuZnJvbUpTT05cbiAgICAgICAgICAgICAgICA6IG5lc3RlZC5maWVsZHMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gVHlwZS5mcm9tSlNPTlxuICAgICAgICAgICAgICAgIDogbmVzdGVkLnZhbHVlcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBFbnVtLmZyb21KU09OXG4gICAgICAgICAgICAgICAgOiBuZXN0ZWQubWV0aG9kcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBTZXJ2aWNlLmZyb21KU09OXG4gICAgICAgICAgICAgICAgOiBOYW1lc3BhY2UuZnJvbUpTT04gKShuYW1lc1tpXSwgbmVzdGVkKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIGlmIChqc29uLmV4dGVuc2lvbnMgJiYganNvbi5leHRlbnNpb25zLmxlbmd0aClcbiAgICAgICAgdHlwZS5leHRlbnNpb25zID0ganNvbi5leHRlbnNpb25zO1xuICAgIGlmIChqc29uLnJlc2VydmVkICYmIGpzb24ucmVzZXJ2ZWQubGVuZ3RoKVxuICAgICAgICB0eXBlLnJlc2VydmVkID0ganNvbi5yZXNlcnZlZDtcbiAgICBpZiAoanNvbi5ncm91cClcbiAgICAgICAgdHlwZS5ncm91cCA9IHRydWU7XG4gICAgaWYgKGpzb24uY29tbWVudClcbiAgICAgICAgdHlwZS5jb21tZW50ID0ganNvbi5jb21tZW50O1xuICAgIHJldHVybiB0eXBlO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIG1lc3NhZ2UgdHlwZSB0byBhIG1lc3NhZ2UgdHlwZSBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7SVR5cGV9IE1lc3NhZ2UgdHlwZSBkZXNjcmlwdG9yXG4gKi9cblR5cGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XG4gICAgdmFyIGluaGVyaXRlZCA9IE5hbWVzcGFjZS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywgdG9KU09OT3B0aW9ucyk7XG4gICAgdmFyIGtlZXBDb21tZW50cyA9IHRvSlNPTk9wdGlvbnMgPyBCb29sZWFuKHRvSlNPTk9wdGlvbnMua2VlcENvbW1lbnRzKSA6IGZhbHNlO1xuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcbiAgICAgICAgXCJvcHRpb25zXCIgICAgLCBpbmhlcml0ZWQgJiYgaW5oZXJpdGVkLm9wdGlvbnMgfHwgdW5kZWZpbmVkLFxuICAgICAgICBcIm9uZW9mc1wiICAgICAsIE5hbWVzcGFjZS5hcnJheVRvSlNPTih0aGlzLm9uZW9mc0FycmF5LCB0b0pTT05PcHRpb25zKSxcbiAgICAgICAgXCJmaWVsZHNcIiAgICAgLCBOYW1lc3BhY2UuYXJyYXlUb0pTT04odGhpcy5maWVsZHNBcnJheS5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7IHJldHVybiAhb2JqLmRlY2xhcmluZ0ZpZWxkOyB9KSwgdG9KU09OT3B0aW9ucykgfHwge30sXG4gICAgICAgIFwiZXh0ZW5zaW9uc1wiICwgdGhpcy5leHRlbnNpb25zICYmIHRoaXMuZXh0ZW5zaW9ucy5sZW5ndGggPyB0aGlzLmV4dGVuc2lvbnMgOiB1bmRlZmluZWQsXG4gICAgICAgIFwicmVzZXJ2ZWRcIiAgICwgdGhpcy5yZXNlcnZlZCAmJiB0aGlzLnJlc2VydmVkLmxlbmd0aCA/IHRoaXMucmVzZXJ2ZWQgOiB1bmRlZmluZWQsXG4gICAgICAgIFwiZ3JvdXBcIiAgICAgICwgdGhpcy5ncm91cCB8fCB1bmRlZmluZWQsXG4gICAgICAgIFwibmVzdGVkXCIgICAgICwgaW5oZXJpdGVkICYmIGluaGVyaXRlZC5uZXN0ZWQgfHwgdW5kZWZpbmVkLFxuICAgICAgICBcImNvbW1lbnRcIiAgICAsIGtlZXBDb21tZW50cyA/IHRoaXMuY29tbWVudCA6IHVuZGVmaW5lZFxuICAgIF0pO1xufTtcblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuVHlwZS5wcm90b3R5cGUucmVzb2x2ZUFsbCA9IGZ1bmN0aW9uIHJlc29sdmVBbGwoKSB7XG4gICAgdmFyIGZpZWxkcyA9IHRoaXMuZmllbGRzQXJyYXksIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgZmllbGRzLmxlbmd0aClcbiAgICAgICAgZmllbGRzW2krK10ucmVzb2x2ZSgpO1xuICAgIHZhciBvbmVvZnMgPSB0aGlzLm9uZW9mc0FycmF5OyBpID0gMDtcbiAgICB3aGlsZSAoaSA8IG9uZW9mcy5sZW5ndGgpXG4gICAgICAgIG9uZW9mc1tpKytdLnJlc29sdmUoKTtcbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5yZXNvbHZlQWxsLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5UeXBlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmZpZWxkc1tuYW1lXVxuICAgICAgICB8fCB0aGlzLm9uZW9mcyAmJiB0aGlzLm9uZW9mc1tuYW1lXVxuICAgICAgICB8fCB0aGlzLm5lc3RlZCAmJiB0aGlzLm5lc3RlZFtuYW1lXVxuICAgICAgICB8fCBudWxsO1xufTtcblxuLyoqXG4gKiBBZGRzIGEgbmVzdGVkIG9iamVjdCB0byB0aGlzIHR5cGUuXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IG9iamVjdCBOZXN0ZWQgb2JqZWN0IHRvIGFkZFxuICogQHJldHVybnMge1R5cGV9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgbmVzdGVkIG9iamVjdCB3aXRoIHRoaXMgbmFtZSBvciwgaWYgYSBmaWVsZCwgd2hlbiB0aGVyZSBpcyBhbHJlYWR5IGEgZmllbGQgd2l0aCB0aGlzIGlkXG4gKi9cblR5cGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChvYmplY3QpIHtcblxuICAgIGlmICh0aGlzLmdldChvYmplY3QubmFtZSkpXG4gICAgICAgIHRocm93IEVycm9yKFwiZHVwbGljYXRlIG5hbWUgJ1wiICsgb2JqZWN0Lm5hbWUgKyBcIicgaW4gXCIgKyB0aGlzKTtcblxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBGaWVsZCAmJiBvYmplY3QuZXh0ZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTk9URTogRXh0ZW5zaW9uIGZpZWxkcyBhcmVuJ3QgYWN0dWFsIGZpZWxkcyBvbiB0aGUgZGVjbGFyaW5nIHR5cGUsIGJ1dCBuZXN0ZWQgb2JqZWN0cy5cbiAgICAgICAgLy8gVGhlIHJvb3Qgb2JqZWN0IHRha2VzIGNhcmUgb2YgYWRkaW5nIGRpc3RpbmN0IHNpc3Rlci1maWVsZHMgdG8gdGhlIHJlc3BlY3RpdmUgZXh0ZW5kZWRcbiAgICAgICAgLy8gdHlwZSBpbnN0ZWFkLlxuXG4gICAgICAgIC8vIGF2b2lkcyBjYWxsaW5nIHRoZSBnZXR0ZXIgaWYgbm90IGFic29sdXRlbHkgbmVjZXNzYXJ5IGJlY2F1c2UgaXQncyBjYWxsZWQgcXVpdGUgZnJlcXVlbnRseVxuICAgICAgICBpZiAodGhpcy5fZmllbGRzQnlJZCA/IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHRoaXMuX2ZpZWxkc0J5SWRbb2JqZWN0LmlkXSA6IHRoaXMuZmllbGRzQnlJZFtvYmplY3QuaWRdKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJkdXBsaWNhdGUgaWQgXCIgKyBvYmplY3QuaWQgKyBcIiBpbiBcIiArIHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5pc1Jlc2VydmVkSWQob2JqZWN0LmlkKSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiaWQgXCIgKyBvYmplY3QuaWQgKyBcIiBpcyByZXNlcnZlZCBpbiBcIiArIHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5pc1Jlc2VydmVkTmFtZShvYmplY3QubmFtZSkpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIm5hbWUgJ1wiICsgb2JqZWN0Lm5hbWUgKyBcIicgaXMgcmVzZXJ2ZWQgaW4gXCIgKyB0aGlzKTtcblxuICAgICAgICBpZiAob2JqZWN0LnBhcmVudClcbiAgICAgICAgICAgIG9iamVjdC5wYXJlbnQucmVtb3ZlKG9iamVjdCk7XG4gICAgICAgIHRoaXMuZmllbGRzW29iamVjdC5uYW1lXSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0Lm1lc3NhZ2UgPSB0aGlzO1xuICAgICAgICBvYmplY3Qub25BZGQodGhpcyk7XG4gICAgICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xuICAgIH1cbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgT25lT2YpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9uZW9mcylcbiAgICAgICAgICAgIHRoaXMub25lb2ZzID0ge307XG4gICAgICAgIHRoaXMub25lb2ZzW29iamVjdC5uYW1lXSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0Lm9uQWRkKHRoaXMpO1xuICAgICAgICByZXR1cm4gY2xlYXJDYWNoZSh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIE5hbWVzcGFjZS5wcm90b3R5cGUuYWRkLmNhbGwodGhpcywgb2JqZWN0KTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIG5lc3RlZCBvYmplY3QgZnJvbSB0aGlzIHR5cGUuXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IG9iamVjdCBOZXN0ZWQgb2JqZWN0IHRvIHJlbW92ZVxuICogQHJldHVybnMge1R5cGV9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgb2JqZWN0YCBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyB0eXBlXG4gKi9cblR5cGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgRmllbGQgJiYgb2JqZWN0LmV4dGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIFNlZSBUeXBlI2FkZCBmb3IgdGhlIHJlYXNvbiB3aHkgZXh0ZW5zaW9uIGZpZWxkcyBhcmUgZXhjbHVkZWQgaGVyZS5cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCF0aGlzLmZpZWxkcyB8fCB0aGlzLmZpZWxkc1tvYmplY3QubmFtZV0gIT09IG9iamVjdClcbiAgICAgICAgICAgIHRocm93IEVycm9yKG9iamVjdCArIFwiIGlzIG5vdCBhIG1lbWJlciBvZiBcIiArIHRoaXMpO1xuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmZpZWxkc1tvYmplY3QubmFtZV07XG4gICAgICAgIG9iamVjdC5wYXJlbnQgPSBudWxsO1xuICAgICAgICBvYmplY3Qub25SZW1vdmUodGhpcyk7XG4gICAgICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xuICAgIH1cbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgT25lT2YpIHtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCF0aGlzLm9uZW9mcyB8fCB0aGlzLm9uZW9mc1tvYmplY3QubmFtZV0gIT09IG9iamVjdClcbiAgICAgICAgICAgIHRocm93IEVycm9yKG9iamVjdCArIFwiIGlzIG5vdCBhIG1lbWJlciBvZiBcIiArIHRoaXMpO1xuXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9uZW9mc1tvYmplY3QubmFtZV07XG4gICAgICAgIG9iamVjdC5wYXJlbnQgPSBudWxsO1xuICAgICAgICBvYmplY3Qub25SZW1vdmUodGhpcyk7XG4gICAgICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5yZW1vdmUuY2FsbCh0aGlzLCBvYmplY3QpO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIGlkIGlzIHJlc2VydmVkLlxuICogQHBhcmFtIHtudW1iZXJ9IGlkIElkIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgcmVzZXJ2ZWQsIG90aGVyd2lzZSBgZmFsc2VgXG4gKi9cblR5cGUucHJvdG90eXBlLmlzUmVzZXJ2ZWRJZCA9IGZ1bmN0aW9uIGlzUmVzZXJ2ZWRJZChpZCkge1xuICAgIHJldHVybiBOYW1lc3BhY2UuaXNSZXNlcnZlZElkKHRoaXMucmVzZXJ2ZWQsIGlkKTtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBuYW1lIGlzIHJlc2VydmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHJlc2VydmVkLCBvdGhlcndpc2UgYGZhbHNlYFxuICovXG5UeXBlLnByb3RvdHlwZS5pc1Jlc2VydmVkTmFtZSA9IGZ1bmN0aW9uIGlzUmVzZXJ2ZWROYW1lKG5hbWUpIHtcbiAgICByZXR1cm4gTmFtZXNwYWNlLmlzUmVzZXJ2ZWROYW1lKHRoaXMucmVzZXJ2ZWQsIG5hbWUpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1lc3NhZ2Ugb2YgdGhpcyB0eXBlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICogQHJldHVybnMge01lc3NhZ2U8e30+fSBNZXNzYWdlIGluc3RhbmNlXG4gKi9cblR5cGUucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmN0b3IocHJvcGVydGllcyk7XG59O1xuXG4vKipcbiAqIFNldHMgdXAge0BsaW5rIFR5cGUjZW5jb2RlfGVuY29kZX0sIHtAbGluayBUeXBlI2RlY29kZXxkZWNvZGV9IGFuZCB7QGxpbmsgVHlwZSN2ZXJpZnl8dmVyaWZ5fS5cbiAqIEByZXR1cm5zIHtUeXBlfSBgdGhpc2BcbiAqL1xuVHlwZS5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAvLyBTZXRzIHVwIGV2ZXJ5dGhpbmcgYXQgb25jZSBzbyB0aGF0IHRoZSBwcm90b3R5cGUgY2hhaW4gZG9lcyBub3QgaGF2ZSB0byBiZSByZS1ldmFsdWF0ZWRcbiAgICAvLyBtdWx0aXBsZSB0aW1lcyAoVjgsIHNvZnQtZGVvcHQgcHJvdG90eXBlLWNoZWNrKS5cblxuICAgIHZhciBmdWxsTmFtZSA9IHRoaXMuZnVsbE5hbWUsXG4gICAgICAgIHR5cGVzICAgID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAvKiBpbml0aWFsaXplcyAqLyB0aGlzLmZpZWxkc0FycmF5Lmxlbmd0aDsgKytpKVxuICAgICAgICB0eXBlcy5wdXNoKHRoaXMuX2ZpZWxkc0FycmF5W2ldLnJlc29sdmUoKS5yZXNvbHZlZFR5cGUpO1xuXG4gICAgLy8gUmVwbGFjZSBzZXR1cCBtZXRob2RzIHdpdGggdHlwZS1zcGVjaWZpYyBnZW5lcmF0ZWQgZnVuY3Rpb25zXG4gICAgdGhpcy5lbmNvZGUgPSBlbmNvZGVyKHRoaXMpKHtcbiAgICAgICAgV3JpdGVyIDogV3JpdGVyLFxuICAgICAgICB0eXBlcyAgOiB0eXBlcyxcbiAgICAgICAgdXRpbCAgIDogdXRpbFxuICAgIH0pO1xuICAgIHRoaXMuZGVjb2RlID0gZGVjb2Rlcih0aGlzKSh7XG4gICAgICAgIFJlYWRlciA6IFJlYWRlcixcbiAgICAgICAgdHlwZXMgIDogdHlwZXMsXG4gICAgICAgIHV0aWwgICA6IHV0aWxcbiAgICB9KTtcbiAgICB0aGlzLnZlcmlmeSA9IHZlcmlmaWVyKHRoaXMpKHtcbiAgICAgICAgdHlwZXMgOiB0eXBlcyxcbiAgICAgICAgdXRpbCAgOiB1dGlsXG4gICAgfSk7XG4gICAgdGhpcy5mcm9tT2JqZWN0ID0gY29udmVydGVyLmZyb21PYmplY3QodGhpcykoe1xuICAgICAgICB0eXBlcyA6IHR5cGVzLFxuICAgICAgICB1dGlsICA6IHV0aWxcbiAgICB9KTtcbiAgICB0aGlzLnRvT2JqZWN0ID0gY29udmVydGVyLnRvT2JqZWN0KHRoaXMpKHtcbiAgICAgICAgdHlwZXMgOiB0eXBlcyxcbiAgICAgICAgdXRpbCAgOiB1dGlsXG4gICAgfSk7XG5cbiAgICAvLyBJbmplY3QgY3VzdG9tIHdyYXBwZXJzIGZvciBjb21tb24gdHlwZXNcbiAgICB2YXIgd3JhcHBlciA9IHdyYXBwZXJzW2Z1bGxOYW1lXTtcbiAgICBpZiAod3JhcHBlcikge1xuICAgICAgICB2YXIgb3JpZ2luYWxUaGlzID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICAgICAgLy8gaWYgKHdyYXBwZXIuZnJvbU9iamVjdCkge1xuICAgICAgICAgICAgb3JpZ2luYWxUaGlzLmZyb21PYmplY3QgPSB0aGlzLmZyb21PYmplY3Q7XG4gICAgICAgICAgICB0aGlzLmZyb21PYmplY3QgPSB3cmFwcGVyLmZyb21PYmplY3QuYmluZChvcmlnaW5hbFRoaXMpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGlmICh3cmFwcGVyLnRvT2JqZWN0KSB7XG4gICAgICAgICAgICBvcmlnaW5hbFRoaXMudG9PYmplY3QgPSB0aGlzLnRvT2JqZWN0O1xuICAgICAgICAgICAgdGhpcy50b09iamVjdCA9IHdyYXBwZXIudG9PYmplY3QuYmluZChvcmlnaW5hbFRoaXMpO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEVuY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHlwZSN2ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7TWVzc2FnZTx7fT58T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgTWVzc2FnZSBpbnN0YW5jZSBvciBwbGFpbiBvYmplY3RcbiAqIEBwYXJhbSB7V3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gKiBAcmV0dXJucyB7V3JpdGVyfSB3cml0ZXJcbiAqL1xuVHlwZS5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlX3NldHVwKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgIHJldHVybiB0aGlzLnNldHVwKCkuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcik7IC8vIG92ZXJyaWRlcyB0aGlzIG1ldGhvZFxufTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUgcHJlY2VlZGVkIGJ5IGl0cyBieXRlIGxlbmd0aCBhcyBhIHZhcmludC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHlwZSN2ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7TWVzc2FnZTx7fT58T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgTWVzc2FnZSBpbnN0YW5jZSBvciBwbGFpbiBvYmplY3RcbiAqIEBwYXJhbSB7V3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gKiBAcmV0dXJucyB7V3JpdGVyfSB3cml0ZXJcbiAqL1xuVHlwZS5wcm90b3R5cGUuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIgJiYgd3JpdGVyLmxlbiA/IHdyaXRlci5mb3JrKCkgOiB3cml0ZXIpLmxkZWxpbSgpO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUuXG4gKiBAcGFyYW0ge1JlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIExlbmd0aCBvZiB0aGUgbWVzc2FnZSwgaWYga25vd24gYmVmb3JlaGFuZFxuICogQHJldHVybnMge01lc3NhZ2U8e30+fSBEZWNvZGVkIG1lc3NhZ2VcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gKiBAdGhyb3dzIHt1dGlsLlByb3RvY29sRXJyb3I8e30+fSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAqL1xuVHlwZS5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlX3NldHVwKHJlYWRlciwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dXAoKS5kZWNvZGUocmVhZGVyLCBsZW5ndGgpOyAvLyBvdmVycmlkZXMgdGhpcyBtZXRob2Rcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlIHByZWNlZWRlZCBieSBpdHMgYnl0ZSBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAcGFyYW0ge1JlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICogQHJldHVybnMge01lc3NhZ2U8e30+fSBEZWNvZGVkIG1lc3NhZ2VcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gKiBAdGhyb3dzIHt1dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICovXG5UeXBlLnByb3RvdHlwZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgUmVhZGVyKSlcbiAgICAgICAgcmVhZGVyID0gUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG59O1xuXG4vKipcbiAqIFZlcmlmaWVzIHRoYXQgZmllbGQgdmFsdWVzIGFyZSB2YWxpZCBhbmQgdGhhdCByZXF1aXJlZCBmaWVsZHMgYXJlIHByZXNlbnQuXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAqIEByZXR1cm5zIHtudWxsfHN0cmluZ30gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gKi9cblR5cGUucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeV9zZXR1cChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dXAoKS52ZXJpZnkobWVzc2FnZSk7IC8vIG92ZXJyaWRlcyB0aGlzIG1ldGhvZFxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1lc3NhZ2Ugb2YgdGhpcyB0eXBlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBvYmplY3QgUGxhaW4gb2JqZWN0IHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtNZXNzYWdlPHt9Pn0gTWVzc2FnZSBpbnN0YW5jZVxuICovXG5UeXBlLnByb3RvdHlwZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5zZXR1cCgpLmZyb21PYmplY3Qob2JqZWN0KTtcbn07XG5cbi8qKlxuICogQ29udmVyc2lvbiBvcHRpb25zIGFzIHVzZWQgYnkge0BsaW5rIFR5cGUjdG9PYmplY3R9IGFuZCB7QGxpbmsgTWVzc2FnZS50b09iamVjdH0uXG4gKiBAaW50ZXJmYWNlIElDb252ZXJzaW9uT3B0aW9uc1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2xvbmdzXSBMb25nIGNvbnZlcnNpb24gdHlwZS5cbiAqIFZhbGlkIHZhbHVlcyBhcmUgYFN0cmluZ2AgYW5kIGBOdW1iZXJgICh0aGUgZ2xvYmFsIHR5cGVzKS5cbiAqIERlZmF1bHRzIHRvIGNvcHkgdGhlIHByZXNlbnQgdmFsdWUsIHdoaWNoIGlzIGEgcG9zc2libHkgdW5zYWZlIG51bWJlciB3aXRob3V0IGFuZCBhIHtAbGluayBMb25nfSB3aXRoIGEgbG9uZyBsaWJyYXJ5LlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2VudW1zXSBFbnVtIHZhbHVlIGNvbnZlcnNpb24gdHlwZS5cbiAqIE9ubHkgdmFsaWQgdmFsdWUgaXMgYFN0cmluZ2AgKHRoZSBnbG9iYWwgdHlwZSkuXG4gKiBEZWZhdWx0cyB0byBjb3B5IHRoZSBwcmVzZW50IHZhbHVlLCB3aGljaCBpcyB0aGUgbnVtZXJpYyBpZC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtieXRlc10gQnl0ZXMgdmFsdWUgY29udmVyc2lvbiB0eXBlLlxuICogVmFsaWQgdmFsdWVzIGFyZSBgQXJyYXlgIGFuZCAoYSBiYXNlNjQgZW5jb2RlZCkgYFN0cmluZ2AgKHRoZSBnbG9iYWwgdHlwZXMpLlxuICogRGVmYXVsdHMgdG8gY29weSB0aGUgcHJlc2VudCB2YWx1ZSwgd2hpY2ggdXN1YWxseSBpcyBhIEJ1ZmZlciB1bmRlciBub2RlIGFuZCBhbiBVaW50OEFycmF5IGluIHRoZSBicm93c2VyLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbZGVmYXVsdHM9ZmFsc2VdIEFsc28gc2V0cyBkZWZhdWx0IHZhbHVlcyBvbiB0aGUgcmVzdWx0aW5nIG9iamVjdFxuICogQHByb3BlcnR5IHtib29sZWFufSBbYXJyYXlzPWZhbHNlXSBTZXRzIGVtcHR5IGFycmF5cyBmb3IgbWlzc2luZyByZXBlYXRlZCBmaWVsZHMgZXZlbiBpZiBgZGVmYXVsdHM9ZmFsc2VgXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtvYmplY3RzPWZhbHNlXSBTZXRzIGVtcHR5IG9iamVjdHMgZm9yIG1pc3NpbmcgbWFwIGZpZWxkcyBldmVuIGlmIGBkZWZhdWx0cz1mYWxzZWBcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW29uZW9mcz1mYWxzZV0gSW5jbHVkZXMgdmlydHVhbCBvbmVvZiBwcm9wZXJ0aWVzIHNldCB0byB0aGUgcHJlc2VudCBmaWVsZCdzIG5hbWUsIGlmIGFueVxuICogQHByb3BlcnR5IHtib29sZWFufSBbanNvbj1mYWxzZV0gUGVyZm9ybXMgYWRkaXRpb25hbCBKU09OIGNvbXBhdGliaWxpdHkgY29udmVyc2lvbnMsIGkuZS4gTmFOIGFuZCBJbmZpbml0eSB0byBzdHJpbmdzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBtZXNzYWdlIG9mIHRoaXMgdHlwZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICogQHBhcmFtIHtNZXNzYWdlPHt9Pn0gbWVzc2FnZSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge0lDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAqL1xuVHlwZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dXAoKS50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogRGVjb3JhdG9yIGZ1bmN0aW9uIGFzIHJldHVybmVkIGJ5IHtAbGluayBUeXBlLmR9IChUeXBlU2NyaXB0KS5cbiAqIEB0eXBlZGVmIFR5cGVEZWNvcmF0b3JcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7Q29uc3RydWN0b3I8VD59IHRhcmdldCBUYXJnZXQgY29uc3RydWN0b3JcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqL1xuXG4vKipcbiAqIFR5cGUgZGVjb3JhdG9yIChUeXBlU2NyaXB0KS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZU5hbWVdIFR5cGUgbmFtZSwgZGVmYXVsdHMgdG8gdGhlIGNvbnN0cnVjdG9yJ3MgbmFtZVxuICogQHJldHVybnMge1R5cGVEZWNvcmF0b3I8VD59IERlY29yYXRvciBmdW5jdGlvblxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKi9cblR5cGUuZCA9IGZ1bmN0aW9uIGRlY29yYXRlVHlwZSh0eXBlTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiB0eXBlRGVjb3JhdG9yKHRhcmdldCkge1xuICAgICAgICB1dGlsLmRlY29yYXRlVHlwZSh0YXJnZXQsIHR5cGVOYW1lKTtcbiAgICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvbW1vbiB0eXBlIGNvbnN0YW50cy5cbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIHR5cGVzID0gZXhwb3J0cztcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG52YXIgcyA9IFtcbiAgICBcImRvdWJsZVwiLCAgIC8vIDBcbiAgICBcImZsb2F0XCIsICAgIC8vIDFcbiAgICBcImludDMyXCIsICAgIC8vIDJcbiAgICBcInVpbnQzMlwiLCAgIC8vIDNcbiAgICBcInNpbnQzMlwiLCAgIC8vIDRcbiAgICBcImZpeGVkMzJcIiwgIC8vIDVcbiAgICBcInNmaXhlZDMyXCIsIC8vIDZcbiAgICBcImludDY0XCIsICAgIC8vIDdcbiAgICBcInVpbnQ2NFwiLCAgIC8vIDhcbiAgICBcInNpbnQ2NFwiLCAgIC8vIDlcbiAgICBcImZpeGVkNjRcIiwgIC8vIDEwXG4gICAgXCJzZml4ZWQ2NFwiLCAvLyAxMVxuICAgIFwiYm9vbFwiLCAgICAgLy8gMTJcbiAgICBcInN0cmluZ1wiLCAgIC8vIDEzXG4gICAgXCJieXRlc1wiICAgICAvLyAxNFxuXTtcblxuZnVuY3Rpb24gYmFrZSh2YWx1ZXMsIG9mZnNldCkge1xuICAgIHZhciBpID0gMCwgbyA9IHt9O1xuICAgIG9mZnNldCB8PSAwO1xuICAgIHdoaWxlIChpIDwgdmFsdWVzLmxlbmd0aCkgb1tzW2kgKyBvZmZzZXRdXSA9IHZhbHVlc1tpKytdO1xuICAgIHJldHVybiBvO1xufVxuXG4vKipcbiAqIEJhc2ljIHR5cGUgd2lyZSB0eXBlcy5cbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fVxuICogQGNvbnN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gZG91YmxlPTEgRml4ZWQ2NCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmbG9hdD01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50MzI9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDMyPTUgRml4ZWQzMiB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gYm9vbD0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdHJpbmc9MiBMZGVsaW0gd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gYnl0ZXM9MiBMZGVsaW0gd2lyZSB0eXBlXG4gKi9cbnR5cGVzLmJhc2ljID0gYmFrZShbXG4gICAgLyogZG91YmxlICAgKi8gMSxcbiAgICAvKiBmbG9hdCAgICAqLyA1LFxuICAgIC8qIGludDMyICAgICovIDAsXG4gICAgLyogdWludDMyICAgKi8gMCxcbiAgICAvKiBzaW50MzIgICAqLyAwLFxuICAgIC8qIGZpeGVkMzIgICovIDUsXG4gICAgLyogc2ZpeGVkMzIgKi8gNSxcbiAgICAvKiBpbnQ2NCAgICAqLyAwLFxuICAgIC8qIHVpbnQ2NCAgICovIDAsXG4gICAgLyogc2ludDY0ICAgKi8gMCxcbiAgICAvKiBmaXhlZDY0ICAqLyAxLFxuICAgIC8qIHNmaXhlZDY0ICovIDEsXG4gICAgLyogYm9vbCAgICAgKi8gMCxcbiAgICAvKiBzdHJpbmcgICAqLyAyLFxuICAgIC8qIGJ5dGVzICAgICovIDJcbl0pO1xuXG4vKipcbiAqIEJhc2ljIHR5cGUgZGVmYXVsdHMuXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj59XG4gKiBAY29uc3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkb3VibGU9MCBEb3VibGUgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZsb2F0PTAgRmxvYXQgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDMyPTAgSW50MzIgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQzMj0wIFVpbnQzMiBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDMyPTAgU2ludDMyIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDMyPTAgRml4ZWQzMiBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkMzI9MCBTZml4ZWQzMiBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50NjQ9MCBJbnQ2NCBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDY0PTAgVWludDY0IGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50NjQ9MCBTaW50MzIgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkNjQ9MCBGaXhlZDY0IGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQ2ND0wIFNmaXhlZDY0IGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYm9vbD1mYWxzZSBCb29sIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdHJpbmc9XCJcIiBTdHJpbmcgZGVmYXVsdFxuICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPn0gYnl0ZXM9QXJyYXkoMCkgQnl0ZXMgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudWxsfSBtZXNzYWdlPW51bGwgTWVzc2FnZSBkZWZhdWx0XG4gKi9cbnR5cGVzLmRlZmF1bHRzID0gYmFrZShbXG4gICAgLyogZG91YmxlICAgKi8gMCxcbiAgICAvKiBmbG9hdCAgICAqLyAwLFxuICAgIC8qIGludDMyICAgICovIDAsXG4gICAgLyogdWludDMyICAgKi8gMCxcbiAgICAvKiBzaW50MzIgICAqLyAwLFxuICAgIC8qIGZpeGVkMzIgICovIDAsXG4gICAgLyogc2ZpeGVkMzIgKi8gMCxcbiAgICAvKiBpbnQ2NCAgICAqLyAwLFxuICAgIC8qIHVpbnQ2NCAgICovIDAsXG4gICAgLyogc2ludDY0ICAgKi8gMCxcbiAgICAvKiBmaXhlZDY0ICAqLyAwLFxuICAgIC8qIHNmaXhlZDY0ICovIDAsXG4gICAgLyogYm9vbCAgICAgKi8gZmFsc2UsXG4gICAgLyogc3RyaW5nICAgKi8gXCJcIixcbiAgICAvKiBieXRlcyAgICAqLyB1dGlsLmVtcHR5QXJyYXksXG4gICAgLyogbWVzc2FnZSAgKi8gbnVsbFxuXSk7XG5cbi8qKlxuICogQmFzaWMgbG9uZyB0eXBlIHdpcmUgdHlwZXMuXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsbnVtYmVyPn1cbiAqIEBjb25zdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxuICovXG50eXBlcy5sb25nID0gYmFrZShbXG4gICAgLyogaW50NjQgICAgKi8gMCxcbiAgICAvKiB1aW50NjQgICAqLyAwLFxuICAgIC8qIHNpbnQ2NCAgICovIDAsXG4gICAgLyogZml4ZWQ2NCAgKi8gMSxcbiAgICAvKiBzZml4ZWQ2NCAqLyAxXG5dLCA3KTtcblxuLyoqXG4gKiBBbGxvd2VkIHR5cGVzIGZvciBtYXAga2V5cyB3aXRoIHRoZWlyIGFzc29jaWF0ZWQgd2lyZSB0eXBlLlxuICogQHR5cGUge09iamVjdC48c3RyaW5nLG51bWJlcj59XG4gKiBAY29uc3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50MzI9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkMzI9NSBGaXhlZDMyIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDMyPTUgRml4ZWQzMiB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBib29sPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHN0cmluZz0yIExkZWxpbSB3aXJlIHR5cGVcbiAqL1xudHlwZXMubWFwS2V5ID0gYmFrZShbXG4gICAgLyogaW50MzIgICAgKi8gMCxcbiAgICAvKiB1aW50MzIgICAqLyAwLFxuICAgIC8qIHNpbnQzMiAgICovIDAsXG4gICAgLyogZml4ZWQzMiAgKi8gNSxcbiAgICAvKiBzZml4ZWQzMiAqLyA1LFxuICAgIC8qIGludDY0ICAgICovIDAsXG4gICAgLyogdWludDY0ICAgKi8gMCxcbiAgICAvKiBzaW50NjQgICAqLyAwLFxuICAgIC8qIGZpeGVkNjQgICovIDEsXG4gICAgLyogc2ZpeGVkNjQgKi8gMSxcbiAgICAvKiBib29sICAgICAqLyAwLFxuICAgIC8qIHN0cmluZyAgICovIDJcbl0sIDIpO1xuXG4vKipcbiAqIEFsbG93ZWQgdHlwZXMgZm9yIHBhY2tlZCByZXBlYXRlZCBmaWVsZHMgd2l0aCB0aGVpciBhc3NvY2lhdGVkIHdpcmUgdHlwZS5cbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fVxuICogQGNvbnN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gZG91YmxlPTEgRml4ZWQ2NCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmbG9hdD01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50MzI9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDMyPTUgRml4ZWQzMiB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gYm9vbD0wIFZhcmludCB3aXJlIHR5cGVcbiAqL1xudHlwZXMucGFja2VkID0gYmFrZShbXG4gICAgLyogZG91YmxlICAgKi8gMSxcbiAgICAvKiBmbG9hdCAgICAqLyA1LFxuICAgIC8qIGludDMyICAgICovIDAsXG4gICAgLyogdWludDMyICAgKi8gMCxcbiAgICAvKiBzaW50MzIgICAqLyAwLFxuICAgIC8qIGZpeGVkMzIgICovIDUsXG4gICAgLyogc2ZpeGVkMzIgKi8gNSxcbiAgICAvKiBpbnQ2NCAgICAqLyAwLFxuICAgIC8qIHVpbnQ2NCAgICovIDAsXG4gICAgLyogc2ludDY0ICAgKi8gMCxcbiAgICAvKiBmaXhlZDY0ICAqLyAxLFxuICAgIC8qIHNmaXhlZDY0ICovIDEsXG4gICAgLyogYm9vbCAgICAgKi8gMFxuXSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBWYXJpb3VzIHV0aWxpdHkgZnVuY3Rpb25zLlxuICogQG5hbWVzcGFjZVxuICovXG52YXIgdXRpbCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG52YXIgcm9vdHMgPSByZXF1aXJlKFwiLi9yb290c1wiKTtcblxudmFyIFR5cGUsIC8vIGN5Y2xpY1xuICAgIEVudW07XG5cbnV0aWwuY29kZWdlbiA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9jb2RlZ2VuXCIpO1xudXRpbC5mZXRjaCAgID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2ZldGNoXCIpO1xudXRpbC5wYXRoICAgID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL3BhdGhcIik7XG5cbi8qKlxuICogTm9kZSdzIGZzIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj59XG4gKi9cbnV0aWwuZnMgPSB1dGlsLmlucXVpcmUoXCJmc1wiKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBvYmplY3QncyB2YWx1ZXMgdG8gYW4gYXJyYXkuXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBvYmplY3QgT2JqZWN0IHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtBcnJheS48Kj59IENvbnZlcnRlZCBhcnJheVxuICovXG51dGlsLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KG9iamVjdCkge1xuICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgdmFyIGtleXMgID0gT2JqZWN0LmtleXMob2JqZWN0KSxcbiAgICAgICAgICAgIGFycmF5ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwga2V5cy5sZW5ndGgpXG4gICAgICAgICAgICBhcnJheVtpbmRleF0gPSBvYmplY3Rba2V5c1tpbmRleCsrXV07XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBvZiBrZXlzIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZWlyIHJlc3BlY3RpdmUgdmFsdWUgdG8gYW4gb2JqZWN0LCBvbWl0dGluZyB1bmRlZmluZWQgdmFsdWVzLlxuICogQHBhcmFtIHtBcnJheS48Kj59IGFycmF5IEFycmF5IHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gQ29udmVydGVkIG9iamVjdFxuICovXG51dGlsLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QoYXJyYXkpIHtcbiAgICB2YXIgb2JqZWN0ID0ge30sXG4gICAgICAgIGluZGV4ICA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBhcnJheVtpbmRleCsrXSxcbiAgICAgICAgICAgIHZhbCA9IGFycmF5W2luZGV4KytdO1xuICAgICAgICBpZiAodmFsICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbn07XG5cbnZhciBzYWZlUHJvcEJhY2tzbGFzaFJlID0gL1xcXFwvZyxcbiAgICBzYWZlUHJvcFF1b3RlUmUgICAgID0gL1wiL2c7XG5cbi8qKlxuICogVGVzdHMgd2hldGhlciB0aGUgc3BlY2lmaWVkIG5hbWUgaXMgYSByZXNlcnZlZCB3b3JkIGluIEpTLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHJlc2VydmVkLCBvdGhlcndpc2UgYGZhbHNlYFxuICovXG51dGlsLmlzUmVzZXJ2ZWQgPSBmdW5jdGlvbiBpc1Jlc2VydmVkKG5hbWUpIHtcbiAgICByZXR1cm4gL14oPzpkb3xpZnxpbnxmb3J8bGV0fG5ld3x0cnl8dmFyfGNhc2V8ZWxzZXxlbnVtfGV2YWx8ZmFsc2V8bnVsbHx0aGlzfHRydWV8dm9pZHx3aXRofGJyZWFrfGNhdGNofGNsYXNzfGNvbnN0fHN1cGVyfHRocm93fHdoaWxlfHlpZWxkfGRlbGV0ZXxleHBvcnR8aW1wb3J0fHB1YmxpY3xyZXR1cm58c3RhdGljfHN3aXRjaHx0eXBlb2Z8ZGVmYXVsdHxleHRlbmRzfGZpbmFsbHl8cGFja2FnZXxwcml2YXRlfGNvbnRpbnVlfGRlYnVnZ2VyfGZ1bmN0aW9ufGFyZ3VtZW50c3xpbnRlcmZhY2V8cHJvdGVjdGVkfGltcGxlbWVudHN8aW5zdGFuY2VvZikkLy50ZXN0KG5hbWUpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc2FmZSBwcm9wZXJ0eSBhY2Nlc3NvciBmb3IgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgbmFtZVxuICogQHJldHVybnMge3N0cmluZ30gU2FmZSBhY2Nlc3NvclxuICovXG51dGlsLnNhZmVQcm9wID0gZnVuY3Rpb24gc2FmZVByb3AocHJvcCkge1xuICAgIGlmICghL15bJFxcd19dKyQvLnRlc3QocHJvcCkgfHwgdXRpbC5pc1Jlc2VydmVkKHByb3ApKVxuICAgICAgICByZXR1cm4gXCJbXFxcIlwiICsgcHJvcC5yZXBsYWNlKHNhZmVQcm9wQmFja3NsYXNoUmUsIFwiXFxcXFxcXFxcIikucmVwbGFjZShzYWZlUHJvcFF1b3RlUmUsIFwiXFxcXFxcXCJcIikgKyBcIlxcXCJdXCI7XG4gICAgcmV0dXJuIFwiLlwiICsgcHJvcDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBhIHN0cmluZyB0byB1cHBlciBjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gY29udmVydFxuICogQHJldHVybnMge3N0cmluZ30gQ29udmVydGVkIHN0cmluZ1xuICovXG51dGlsLnVjRmlyc3QgPSBmdW5jdGlvbiB1Y0ZpcnN0KHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKDEpO1xufTtcblxudmFyIGNhbWVsQ2FzZVJlID0gL18oW2Etel0pL2c7XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgdG8gY2FtZWwgY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbnZlcnRlZCBzdHJpbmdcbiAqL1xudXRpbC5jYW1lbENhc2UgPSBmdW5jdGlvbiBjYW1lbENhc2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMCwgMSlcbiAgICAgICAgICsgc3RyLnN1YnN0cmluZygxKVxuICAgICAgICAgICAgICAgLnJlcGxhY2UoY2FtZWxDYXNlUmUsIGZ1bmN0aW9uKCQwLCAkMSkgeyByZXR1cm4gJDEudG9VcHBlckNhc2UoKTsgfSk7XG59O1xuXG4vKipcbiAqIENvbXBhcmVzIHJlZmxlY3RlZCBmaWVsZHMgYnkgaWQuXG4gKiBAcGFyYW0ge0ZpZWxkfSBhIEZpcnN0IGZpZWxkXG4gKiBAcGFyYW0ge0ZpZWxkfSBiIFNlY29uZCBmaWVsZFxuICogQHJldHVybnMge251bWJlcn0gQ29tcGFyaXNvbiB2YWx1ZVxuICovXG51dGlsLmNvbXBhcmVGaWVsZHNCeUlkID0gZnVuY3Rpb24gY29tcGFyZUZpZWxkc0J5SWQoYSwgYikge1xuICAgIHJldHVybiBhLmlkIC0gYi5pZDtcbn07XG5cbi8qKlxuICogRGVjb3JhdG9yIGhlbHBlciBmb3IgdHlwZXMgKFR5cGVTY3JpcHQpLlxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUPn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlTmFtZV0gVHlwZSBuYW1lLCBkZWZhdWx0cyB0byB0aGUgY29uc3RydWN0b3IncyBuYW1lXG4gKiBAcmV0dXJucyB7VHlwZX0gUmVmbGVjdGVkIHR5cGVcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHByb3BlcnR5IHtSb290fSByb290IERlY29yYXRvcnMgcm9vdFxuICovXG51dGlsLmRlY29yYXRlVHlwZSA9IGZ1bmN0aW9uIGRlY29yYXRlVHlwZShjdG9yLCB0eXBlTmFtZSkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGN0b3IuJHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVOYW1lICYmIGN0b3IuJHR5cGUubmFtZSAhPT0gdHlwZU5hbWUpIHtcbiAgICAgICAgICAgIHV0aWwuZGVjb3JhdGVSb290LnJlbW92ZShjdG9yLiR0eXBlKTtcbiAgICAgICAgICAgIGN0b3IuJHR5cGUubmFtZSA9IHR5cGVOYW1lO1xuICAgICAgICAgICAgdXRpbC5kZWNvcmF0ZVJvb3QuYWRkKGN0b3IuJHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdG9yLiR0eXBlO1xuICAgIH1cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKCFUeXBlKVxuICAgICAgICBUeXBlID0gcmVxdWlyZShcIi4vdHlwZVwiKTtcblxuICAgIHZhciB0eXBlID0gbmV3IFR5cGUodHlwZU5hbWUgfHwgY3Rvci5uYW1lKTtcbiAgICB1dGlsLmRlY29yYXRlUm9vdC5hZGQodHlwZSk7XG4gICAgdHlwZS5jdG9yID0gY3RvcjsgLy8gc2V0cyB1cCAuZW5jb2RlLCAuZGVjb2RlIGV0Yy5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3RvciwgXCIkdHlwZVwiLCB7IHZhbHVlOiB0eXBlLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3Rvci5wcm90b3R5cGUsIFwiJHR5cGVcIiwgeyB2YWx1ZTogdHlwZSwgZW51bWVyYWJsZTogZmFsc2UgfSk7XG4gICAgcmV0dXJuIHR5cGU7XG59O1xuXG52YXIgZGVjb3JhdGVFbnVtSW5kZXggPSAwO1xuXG4vKipcbiAqIERlY29yYXRvciBoZWxwZXIgZm9yIGVudW1zIChUeXBlU2NyaXB0KS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgRW51bSBvYmplY3RcbiAqIEByZXR1cm5zIHtFbnVtfSBSZWZsZWN0ZWQgZW51bVxuICovXG51dGlsLmRlY29yYXRlRW51bSA9IGZ1bmN0aW9uIGRlY29yYXRlRW51bShvYmplY3QpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChvYmplY3QuJHR5cGUpXG4gICAgICAgIHJldHVybiBvYmplY3QuJHR5cGU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICghRW51bSlcbiAgICAgICAgRW51bSA9IHJlcXVpcmUoXCIuL2VudW1cIik7XG5cbiAgICB2YXIgZW5tID0gbmV3IEVudW0oXCJFbnVtXCIgKyBkZWNvcmF0ZUVudW1JbmRleCsrLCBvYmplY3QpO1xuICAgIHV0aWwuZGVjb3JhdGVSb290LmFkZChlbm0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIFwiJHR5cGVcIiwgeyB2YWx1ZTogZW5tLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTtcbiAgICByZXR1cm4gZW5tO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgYnkgcHJvcGVydHkgcGF0aC4gSWYgYSB2YWx1ZSBhbHJlYWR5IGV4aXN0cywgaXQgaXMgdHVybmVkIHRvIGFuIGFycmF5XG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkc3QgRGVzdGluYXRpb24gb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBkb3QgJy4nIGRlbGltaXRlZCBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSB0aGUgdmFsdWUgdG8gc2V0XG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IERlc3RpbmF0aW9uIG9iamVjdFxuICovXG51dGlsLnNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkoZHN0LCBwYXRoLCB2YWx1ZSkge1xuICAgIGZ1bmN0aW9uIHNldFByb3AoZHN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydCA9IHBhdGguc2hpZnQoKTtcbiAgICAgICAgaWYgKHBhcnQgPT09IFwiX19wcm90b19fXCIgfHwgcGFydCA9PT0gXCJwcm90b3R5cGVcIikge1xuICAgICAgICAgIHJldHVybiBkc3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZHN0W3BhcnRdID0gc2V0UHJvcChkc3RbcGFydF0gfHwge30sIHBhdGgsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBwcmV2VmFsdWUgPSBkc3RbcGFydF07XG4gICAgICAgICAgICBpZiAocHJldlZhbHVlKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gW10uY29uY2F0KHByZXZWYWx1ZSkuY29uY2F0KHZhbHVlKTtcbiAgICAgICAgICAgIGRzdFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkc3Q7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkc3QgIT09IFwib2JqZWN0XCIpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImRzdCBtdXN0IGJlIGFuIG9iamVjdFwiKTtcbiAgICBpZiAoIXBhdGgpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInBhdGggbXVzdCBiZSBzcGVjaWZpZWRcIik7XG5cbiAgICBwYXRoID0gcGF0aC5zcGxpdChcIi5cIik7XG4gICAgcmV0dXJuIHNldFByb3AoZHN0LCBwYXRoLCB2YWx1ZSk7XG59O1xuXG4vKipcbiAqIERlY29yYXRvciByb290IChUeXBlU2NyaXB0KS5cbiAqIEBuYW1lIHV0aWwuZGVjb3JhdGVSb290XG4gKiBAdHlwZSB7Um9vdH1cbiAqIEByZWFkb25seVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkodXRpbCwgXCJkZWNvcmF0ZVJvb3RcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByb290c1tcImRlY29yYXRlZFwiXSB8fCAocm9vdHNbXCJkZWNvcmF0ZWRcIl0gPSBuZXcgKHJlcXVpcmUoXCIuL3Jvb3RcIikpKCkpO1xuICAgIH1cbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IExvbmdCaXRzO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL21pbmltYWxcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzLlxuICogQGNsYXNzZGVzYyBIZWxwZXIgY2xhc3MgZm9yIHdvcmtpbmcgd2l0aCB0aGUgbG93IGFuZCBoaWdoIGJpdHMgb2YgYSA2NCBiaXQgdmFsdWUuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gbG8gTG93IDMyIGJpdHMsIHVuc2lnbmVkXG4gKiBAcGFyYW0ge251bWJlcn0gaGkgSGlnaCAzMiBiaXRzLCB1bnNpZ25lZFxuICovXG5mdW5jdGlvbiBMb25nQml0cyhsbywgaGkpIHtcblxuICAgIC8vIG5vdGUgdGhhdCB0aGUgY2FzdHMgYmVsb3cgYXJlIHRoZW9yZXRpY2FsbHkgdW5uZWNlc3NhcnkgYXMgb2YgdG9kYXksIGJ1dCBvbGRlciBzdGF0aWNhbGx5XG4gICAgLy8gZ2VuZXJhdGVkIGNvbnZlcnRlciBjb2RlIG1pZ2h0IHN0aWxsIGNhbGwgdGhlIGN0b3Igd2l0aCBzaWduZWQgMzJiaXRzLiBrZXB0IGZvciBjb21wYXQuXG5cbiAgICAvKipcbiAgICAgKiBMb3cgYml0cy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubG8gPSBsbyA+Pj4gMDtcblxuICAgIC8qKlxuICAgICAqIEhpZ2ggYml0cy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuaGkgPSBoaSA+Pj4gMDtcbn1cblxuLyoqXG4gKiBaZXJvIGJpdHMuXG4gKiBAbWVtYmVyb2YgdXRpbC5Mb25nQml0c1xuICogQHR5cGUge3V0aWwuTG9uZ0JpdHN9XG4gKi9cbnZhciB6ZXJvID0gTG9uZ0JpdHMuemVybyA9IG5ldyBMb25nQml0cygwLCAwKTtcblxuemVyby50b051bWJlciA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbnplcm8uenpFbmNvZGUgPSB6ZXJvLnp6RGVjb2RlID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9O1xuemVyby5sZW5ndGggPSBmdW5jdGlvbigpIHsgcmV0dXJuIDE7IH07XG5cbi8qKlxuICogWmVybyBoYXNoLlxuICogQG1lbWJlcm9mIHV0aWwuTG9uZ0JpdHNcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbnZhciB6ZXJvSGFzaCA9IExvbmdCaXRzLnplcm9IYXNoID0gXCJcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcIjtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMgZnJvbSB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZVxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IEluc3RhbmNlXG4gKi9cbkxvbmdCaXRzLmZyb21OdW1iZXIgPSBmdW5jdGlvbiBmcm9tTnVtYmVyKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSAwKVxuICAgICAgICByZXR1cm4gemVybztcbiAgICB2YXIgc2lnbiA9IHZhbHVlIDwgMDtcbiAgICBpZiAoc2lnbilcbiAgICAgICAgdmFsdWUgPSAtdmFsdWU7XG4gICAgdmFyIGxvID0gdmFsdWUgPj4+IDAsXG4gICAgICAgIGhpID0gKHZhbHVlIC0gbG8pIC8gNDI5NDk2NzI5NiA+Pj4gMDtcbiAgICBpZiAoc2lnbikge1xuICAgICAgICBoaSA9IH5oaSA+Pj4gMDtcbiAgICAgICAgbG8gPSB+bG8gPj4+IDA7XG4gICAgICAgIGlmICgrK2xvID4gNDI5NDk2NzI5NSkge1xuICAgICAgICAgICAgbG8gPSAwO1xuICAgICAgICAgICAgaWYgKCsraGkgPiA0Mjk0OTY3Mjk1KVxuICAgICAgICAgICAgICAgIGhpID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IExvbmdCaXRzKGxvLCBoaSk7XG59O1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIGEgbnVtYmVyLCBsb25nIG9yIHN0cmluZy5cbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZVxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IEluc3RhbmNlXG4gKi9cbkxvbmdCaXRzLmZyb20gPSBmdW5jdGlvbiBmcm9tKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgcmV0dXJuIExvbmdCaXRzLmZyb21OdW1iZXIodmFsdWUpO1xuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAodXRpbC5Mb25nKVxuICAgICAgICAgICAgdmFsdWUgPSB1dGlsLkxvbmcuZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBMb25nQml0cy5mcm9tTnVtYmVyKHBhcnNlSW50KHZhbHVlLCAxMCkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUubG93IHx8IHZhbHVlLmhpZ2ggPyBuZXcgTG9uZ0JpdHModmFsdWUubG93ID4+PiAwLCB2YWx1ZS5oaWdoID4+PiAwKSA6IHplcm87XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgbG9uZyBiaXRzIHRvIGEgcG9zc2libHkgdW5zYWZlIEphdmFTY3JpcHQgbnVtYmVyLlxuICogQHBhcmFtIHtib29sZWFufSBbdW5zaWduZWQ9ZmFsc2VdIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBQb3NzaWJseSB1bnNhZmUgbnVtYmVyXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyKHVuc2lnbmVkKSB7XG4gICAgaWYgKCF1bnNpZ25lZCAmJiB0aGlzLmhpID4+PiAzMSkge1xuICAgICAgICB2YXIgbG8gPSB+dGhpcy5sbyArIDEgPj4+IDAsXG4gICAgICAgICAgICBoaSA9IH50aGlzLmhpICAgICA+Pj4gMDtcbiAgICAgICAgaWYgKCFsbylcbiAgICAgICAgICAgIGhpID0gaGkgKyAxID4+PiAwO1xuICAgICAgICByZXR1cm4gLShsbyArIGhpICogNDI5NDk2NzI5Nik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxvICsgdGhpcy5oaSAqIDQyOTQ5NjcyOTY7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgbG9uZyBiaXRzIHRvIGEgbG9uZy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICogQHJldHVybnMge0xvbmd9IExvbmdcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnRvTG9uZyA9IGZ1bmN0aW9uIHRvTG9uZyh1bnNpZ25lZCkge1xuICAgIHJldHVybiB1dGlsLkxvbmdcbiAgICAgICAgPyBuZXcgdXRpbC5Mb25nKHRoaXMubG8gfCAwLCB0aGlzLmhpIHwgMCwgQm9vbGVhbih1bnNpZ25lZCkpXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIDogeyBsb3c6IHRoaXMubG8gfCAwLCBoaWdoOiB0aGlzLmhpIHwgMCwgdW5zaWduZWQ6IEJvb2xlYW4odW5zaWduZWQpIH07XG59O1xuXG52YXIgY2hhckNvZGVBdCA9IFN0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdDtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMgZnJvbSB0aGUgc3BlY2lmaWVkIDggY2hhcmFjdGVycyBsb25nIGhhc2guXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaCBIYXNoXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gQml0c1xuICovXG5Mb25nQml0cy5mcm9tSGFzaCA9IGZ1bmN0aW9uIGZyb21IYXNoKGhhc2gpIHtcbiAgICBpZiAoaGFzaCA9PT0gemVyb0hhc2gpXG4gICAgICAgIHJldHVybiB6ZXJvO1xuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMoXG4gICAgICAgICggY2hhckNvZGVBdC5jYWxsKGhhc2gsIDApXG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDEpIDw8IDhcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMikgPDwgMTZcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMykgPDwgMjQpID4+PiAwXG4gICAgLFxuICAgICAgICAoIGNoYXJDb2RlQXQuY2FsbChoYXNoLCA0KVxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA1KSA8PCA4XG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDYpIDw8IDE2XG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDcpIDw8IDI0KSA+Pj4gMFxuICAgICk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgbG9uZyBiaXRzIHRvIGEgOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEhhc2hcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnRvSGFzaCA9IGZ1bmN0aW9uIHRvSGFzaCgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShcbiAgICAgICAgdGhpcy5sbyAgICAgICAgJiAyNTUsXG4gICAgICAgIHRoaXMubG8gPj4+IDggICYgMjU1LFxuICAgICAgICB0aGlzLmxvID4+PiAxNiAmIDI1NSxcbiAgICAgICAgdGhpcy5sbyA+Pj4gMjQgICAgICAsXG4gICAgICAgIHRoaXMuaGkgICAgICAgICYgMjU1LFxuICAgICAgICB0aGlzLmhpID4+PiA4ICAmIDI1NSxcbiAgICAgICAgdGhpcy5oaSA+Pj4gMTYgJiAyNTUsXG4gICAgICAgIHRoaXMuaGkgPj4+IDI0XG4gICAgKTtcbn07XG5cbi8qKlxuICogWmlnLXphZyBlbmNvZGVzIHRoaXMgbG9uZyBiaXRzLlxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IGB0aGlzYFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUuenpFbmNvZGUgPSBmdW5jdGlvbiB6ekVuY29kZSgpIHtcbiAgICB2YXIgbWFzayA9ICAgdGhpcy5oaSA+PiAzMTtcbiAgICB0aGlzLmhpICA9ICgodGhpcy5oaSA8PCAxIHwgdGhpcy5sbyA+Pj4gMzEpIF4gbWFzaykgPj4+IDA7XG4gICAgdGhpcy5sbyAgPSAoIHRoaXMubG8gPDwgMSAgICAgICAgICAgICAgICAgICBeIG1hc2spID4+PiAwO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBaaWctemFnIGRlY29kZXMgdGhpcyBsb25nIGJpdHMuXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gYHRoaXNgXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS56ekRlY29kZSA9IGZ1bmN0aW9uIHp6RGVjb2RlKCkge1xuICAgIHZhciBtYXNrID0gLSh0aGlzLmxvICYgMSk7XG4gICAgdGhpcy5sbyAgPSAoKHRoaXMubG8gPj4+IDEgfCB0aGlzLmhpIDw8IDMxKSBeIG1hc2spID4+PiAwO1xuICAgIHRoaXMuaGkgID0gKCB0aGlzLmhpID4+PiAxICAgICAgICAgICAgICAgICAgXiBtYXNrKSA+Pj4gMDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIHRoaXMgbG9uZ2JpdHMgd2hlbiBlbmNvZGVkIGFzIGEgdmFyaW50LlxuICogQHJldHVybnMge251bWJlcn0gTGVuZ3RoXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiBsZW5ndGgoKSB7XG4gICAgdmFyIHBhcnQwID0gIHRoaXMubG8sXG4gICAgICAgIHBhcnQxID0gKHRoaXMubG8gPj4+IDI4IHwgdGhpcy5oaSA8PCA0KSA+Pj4gMCxcbiAgICAgICAgcGFydDIgPSAgdGhpcy5oaSA+Pj4gMjQ7XG4gICAgcmV0dXJuIHBhcnQyID09PSAwXG4gICAgICAgICA/IHBhcnQxID09PSAwXG4gICAgICAgICAgID8gcGFydDAgPCAxNjM4NFxuICAgICAgICAgICAgID8gcGFydDAgPCAxMjggPyAxIDogMlxuICAgICAgICAgICAgIDogcGFydDAgPCAyMDk3MTUyID8gMyA6IDRcbiAgICAgICAgICAgOiBwYXJ0MSA8IDE2Mzg0XG4gICAgICAgICAgICAgPyBwYXJ0MSA8IDEyOCA/IDUgOiA2XG4gICAgICAgICAgICAgOiBwYXJ0MSA8IDIwOTcxNTIgPyA3IDogOFxuICAgICAgICAgOiBwYXJ0MiA8IDEyOCA/IDkgOiAxMDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciB1dGlsID0gZXhwb3J0cztcblxuLy8gdXNlZCB0byByZXR1cm4gYSBQcm9taXNlIHdoZXJlIGNhbGxiYWNrIGlzIG9taXR0ZWRcbnV0aWwuYXNQcm9taXNlID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2FzcHJvbWlzZVwiKTtcblxuLy8gY29udmVydHMgdG8gLyBmcm9tIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbnV0aWwuYmFzZTY0ID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2Jhc2U2NFwiKTtcblxuLy8gYmFzZSBjbGFzcyBvZiBycGMuU2VydmljZVxudXRpbC5FdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvZXZlbnRlbWl0dGVyXCIpO1xuXG4vLyBmbG9hdCBoYW5kbGluZyBhY2Nyb3NzIGJyb3dzZXJzXG51dGlsLmZsb2F0ID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2Zsb2F0XCIpO1xuXG4vLyByZXF1aXJlcyBtb2R1bGVzIG9wdGlvbmFsbHkgYW5kIGhpZGVzIHRoZSBjYWxsIGZyb20gYnVuZGxlcnNcbnV0aWwuaW5xdWlyZSA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9pbnF1aXJlXCIpO1xuXG4vLyBjb252ZXJ0cyB0byAvIGZyb20gdXRmOCBlbmNvZGVkIHN0cmluZ3NcbnV0aWwudXRmOCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy91dGY4XCIpO1xuXG4vLyBwcm92aWRlcyBhIG5vZGUtbGlrZSBidWZmZXIgcG9vbCBpbiB0aGUgYnJvd3NlclxudXRpbC5wb29sID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL3Bvb2xcIik7XG5cbi8vIHV0aWxpdHkgdG8gd29yayB3aXRoIHRoZSBsb3cgYW5kIGhpZ2ggYml0cyBvZiBhIDY0IGJpdCB2YWx1ZVxudXRpbC5Mb25nQml0cyA9IHJlcXVpcmUoXCIuL2xvbmdiaXRzXCIpO1xuXG4vKipcbiAqIFdoZXRoZXIgcnVubmluZyB3aXRoaW4gbm9kZSBvciBub3QuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbnV0aWwuaXNOb2RlID0gQm9vbGVhbih0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsLnByb2Nlc3NcbiAgICAgICAgICAgICAgICAgICAmJiBnbG9iYWwucHJvY2Vzcy52ZXJzaW9uc1xuICAgICAgICAgICAgICAgICAgICYmIGdsb2JhbC5wcm9jZXNzLnZlcnNpb25zLm5vZGUpO1xuXG4vKipcbiAqIEdsb2JhbCBvYmplY3QgcmVmZXJlbmNlLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnV0aWwuZ2xvYmFsID0gdXRpbC5pc05vZGUgJiYgZ2xvYmFsXG4gICAgICAgICAgIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93XG4gICAgICAgICAgIHx8IHR5cGVvZiBzZWxmICAgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZlxuICAgICAgICAgICB8fCB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXG4vKipcbiAqIEFuIGltbXVhYmxlIGVtcHR5IGFycmF5LlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtBcnJheS48Kj59XG4gKiBAY29uc3RcbiAqL1xudXRpbC5lbXB0eUFycmF5ID0gT2JqZWN0LmZyZWV6ZSA/IE9iamVjdC5mcmVlemUoW10pIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gW107IC8vIHVzZWQgb24gcHJvdG90eXBlc1xuXG4vKipcbiAqIEFuIGltbXV0YWJsZSBlbXB0eSBvYmplY3QuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQGNvbnN0XG4gKi9cbnV0aWwuZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplID8gT2JqZWN0LmZyZWV6ZSh7fSkgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7fTsgLy8gdXNlZCBvbiBwcm90b3R5cGVzXG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBpbnRlZ2VyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGFuIGludGVnZXJcbiAqL1xudXRpbC5pc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIHN0cmluZy5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBzdHJpbmdcbiAqL1xudXRpbC5pc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIG5vbi1udWxsIG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBub24tbnVsbCBvYmplY3RcbiAqL1xudXRpbC5pc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcHJvcGVydHkgb24gYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudC5cbiAqIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIHV0aWwuaXNTZXR9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFBsYWluIG9iamVjdCBvciBtZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xudXRpbC5pc3NldCA9XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcHJvcGVydHkgb24gYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogUGxhaW4gb2JqZWN0IG9yIG1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IG5hbWVcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgY29uc2lkZXJlZCB0byBiZSBwcmVzZW50LCBvdGhlcndpc2UgYGZhbHNlYFxuICovXG51dGlsLmlzU2V0ID0gZnVuY3Rpb24gaXNTZXQob2JqLCBwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEsIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA6IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgpID4gMDtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEFueSBjb21wYXRpYmxlIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgYSBtaW5pbWFsIHN0YW5kLWFsb25lIGRlZmluaXRpb24gb2YgYSBCdWZmZXIgaW5zdGFuY2UuIFRoZSBhY3R1YWwgdHlwZSBpcyB0aGF0IGV4cG9ydGVkIGJ5IG5vZGUncyB0eXBpbmdzLlxuICogQGludGVyZmFjZSBCdWZmZXJcbiAqIEBleHRlbmRzIFVpbnQ4QXJyYXlcbiAqL1xuXG4vKipcbiAqIE5vZGUncyBCdWZmZXIgY2xhc3MgaWYgYXZhaWxhYmxlLlxuICogQHR5cGUge0NvbnN0cnVjdG9yPEJ1ZmZlcj59XG4gKi9cbnV0aWwuQnVmZmVyID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBCdWZmZXIgPSB1dGlsLmlucXVpcmUoXCJidWZmZXJcIikuQnVmZmVyO1xuICAgICAgICAvLyByZWZ1c2UgdG8gdXNlIG5vbi1ub2RlIGJ1ZmZlcnMgaWYgbm90IGV4cGxpY2l0bHkgYXNzaWduZWQgKHBlcmYgcmVhc29ucyk6XG4gICAgICAgIHJldHVybiBCdWZmZXIucHJvdG90eXBlLnV0ZjhXcml0ZSA/IEJ1ZmZlciA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59KSgpO1xuXG4vLyBJbnRlcm5hbCBhbGlhcyBvZiBvciBwb2x5ZnVsbCBmb3IgQnVmZmVyLmZyb20uXG51dGlsLl9CdWZmZXJfZnJvbSA9IG51bGw7XG5cbi8vIEludGVybmFsIGFsaWFzIG9mIG9yIHBvbHlmaWxsIGZvciBCdWZmZXIuYWxsb2NVbnNhZmUuXG51dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUgPSBudWxsO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYnVmZmVyIG9mIHdoYXRldmVyIHR5cGUgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfG51bWJlcltdfSBbc2l6ZU9yQXJyYXk9MF0gQnVmZmVyIHNpemUgb3IgbnVtYmVyIGFycmF5XG4gKiBAcmV0dXJucyB7VWludDhBcnJheXxCdWZmZXJ9IEJ1ZmZlclxuICovXG51dGlsLm5ld0J1ZmZlciA9IGZ1bmN0aW9uIG5ld0J1ZmZlcihzaXplT3JBcnJheSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHR5cGVvZiBzaXplT3JBcnJheSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IHV0aWwuQnVmZmVyXG4gICAgICAgICAgICA/IHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZShzaXplT3JBcnJheSlcbiAgICAgICAgICAgIDogbmV3IHV0aWwuQXJyYXkoc2l6ZU9yQXJyYXkpXG4gICAgICAgIDogdXRpbC5CdWZmZXJcbiAgICAgICAgICAgID8gdXRpbC5fQnVmZmVyX2Zyb20oc2l6ZU9yQXJyYXkpXG4gICAgICAgICAgICA6IHR5cGVvZiBVaW50OEFycmF5ID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgPyBzaXplT3JBcnJheVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoc2l6ZU9yQXJyYXkpO1xufTtcblxuLyoqXG4gKiBBcnJheSBpbXBsZW1lbnRhdGlvbiB1c2VkIGluIHRoZSBicm93c2VyLiBgVWludDhBcnJheWAgaWYgc3VwcG9ydGVkLCBvdGhlcndpc2UgYEFycmF5YC5cbiAqIEB0eXBlIHtDb25zdHJ1Y3RvcjxVaW50OEFycmF5Pn1cbiAqL1xudXRpbC5BcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiID8gVWludDhBcnJheSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA6IEFycmF5O1xuXG4vKipcbiAqIEFueSBjb21wYXRpYmxlIExvbmcgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIGEgbWluaW1hbCBzdGFuZC1hbG9uZSBkZWZpbml0aW9uIG9mIGEgTG9uZyBpbnN0YW5jZS4gVGhlIGFjdHVhbCB0eXBlIGlzIHRoYXQgZXhwb3J0ZWQgYnkgbG9uZy5qcy5cbiAqIEBpbnRlcmZhY2UgTG9uZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGxvdyBMb3cgYml0c1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGhpZ2ggSGlnaCBiaXRzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XG4gKi9cblxuLyoqXG4gKiBMb25nLmpzJ3MgTG9uZyBjbGFzcyBpZiBhdmFpbGFibGUuXG4gKiBAdHlwZSB7Q29uc3RydWN0b3I8TG9uZz59XG4gKi9cbnV0aWwuTG9uZyA9IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuZ2xvYmFsLmRjb2RlSU8gJiYgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdXRpbC5nbG9iYWwuZGNvZGVJTy5Mb25nXG4gICAgICAgICB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1dGlsLmdsb2JhbC5Mb25nXG4gICAgICAgICB8fCB1dGlsLmlucXVpcmUoXCJsb25nXCIpO1xuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHZlcmlmeSAyIGJpdCAoYGJvb2xgKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXkyUmUgPSAvXnRydWV8ZmFsc2V8MHwxJC87XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gdmVyaWZ5IDMyIGJpdCAoYGludDMyYCBldGMuKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXkzMlJlID0gL14tPyg/OjB8WzEtOV1bMC05XSopJC87XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gdmVyaWZ5IDY0IGJpdCAoYGludDY0YCBldGMuKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXk2NFJlID0gL14oPzpbXFxcXHgwMC1cXFxceGZmXXs4fXwtPyg/OjB8WzEtOV1bMC05XSopKSQvO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtYmVyIG9yIGxvbmcgdG8gYW4gOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaCBzdHJpbmcuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIYXNoXG4gKi9cbnV0aWwubG9uZ1RvSGFzaCA9IGZ1bmN0aW9uIGxvbmdUb0hhc2godmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyB1dGlsLkxvbmdCaXRzLmZyb20odmFsdWUpLnRvSGFzaCgpXG4gICAgICAgIDogdXRpbC5Mb25nQml0cy56ZXJvSGFzaDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYW4gOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaCBzdHJpbmcgdG8gYSBsb25nIG9yIG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoIEhhc2hcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICogQHJldHVybnMge0xvbmd8bnVtYmVyfSBPcmlnaW5hbCB2YWx1ZVxuICovXG51dGlsLmxvbmdGcm9tSGFzaCA9IGZ1bmN0aW9uIGxvbmdGcm9tSGFzaChoYXNoLCB1bnNpZ25lZCkge1xuICAgIHZhciBiaXRzID0gdXRpbC5Mb25nQml0cy5mcm9tSGFzaChoYXNoKTtcbiAgICBpZiAodXRpbC5Mb25nKVxuICAgICAgICByZXR1cm4gdXRpbC5Mb25nLmZyb21CaXRzKGJpdHMubG8sIGJpdHMuaGksIHVuc2lnbmVkKTtcbiAgICByZXR1cm4gYml0cy50b051bWJlcihCb29sZWFuKHVuc2lnbmVkKSk7XG59O1xuXG4vKipcbiAqIE1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc291cmNlIG9iamVjdCBpbnRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZHN0IERlc3RpbmF0aW9uIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gc3JjIFNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lmTm90U2V0PWZhbHNlXSBNZXJnZXMgb25seSBpZiB0aGUga2V5IGlzIG5vdCBhbHJlYWR5IHNldFxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBEZXN0aW5hdGlvbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoZHN0LCBzcmMsIGlmTm90U2V0KSB7IC8vIHVzZWQgYnkgY29udmVydGVyc1xuICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcmMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmIChkc3Rba2V5c1tpXV0gPT09IHVuZGVmaW5lZCB8fCAhaWZOb3RTZXQpXG4gICAgICAgICAgICBkc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XG4gICAgcmV0dXJuIGRzdDtcbn1cblxudXRpbC5tZXJnZSA9IG1lcmdlO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmcgdG8gbG93ZXIgY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbnZlcnRlZCBzdHJpbmdcbiAqL1xudXRpbC5sY0ZpcnN0ID0gZnVuY3Rpb24gbGNGaXJzdChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGN1c3RvbSBlcnJvciBjb25zdHJ1Y3Rvci5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFcnJvciBuYW1lXG4gKiBAcmV0dXJucyB7Q29uc3RydWN0b3I8RXJyb3I+fSBDdXN0b20gZXJyb3IgY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gbmV3RXJyb3IobmFtZSkge1xuXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXJyb3IobWVzc2FnZSwgcHJvcGVydGllcykge1xuXG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDdXN0b21FcnJvcikpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEN1c3RvbUVycm9yKG1lc3NhZ2UsIHByb3BlcnRpZXMpO1xuXG4gICAgICAgIC8vIEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgICAgIC8vIF4ganVzdCByZXR1cm5zIGEgbmV3IGVycm9yIGluc3RhbmNlIGJlY2F1c2UgdGhlIGN0b3IgY2FuIGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uXG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWVzc2FnZVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtZXNzYWdlOyB9IH0pO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgLy8gbm9kZVxuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ3VzdG9tRXJyb3IpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdGFja1wiLCB7IHZhbHVlOiBuZXcgRXJyb3IoKS5zdGFjayB8fCBcIlwiIH0pO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgbWVyZ2UodGhpcywgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgQ3VzdG9tRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgIHZhbHVlOiBDdXN0b21FcnJvcixcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgeyByZXR1cm4gbmFtZTsgfSxcbiAgICAgICAgICAgIHNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAvLyBjb25maWd1cmFibGU6IGZhbHNlIHdvdWxkIGFjY3VyYXRlbHkgcHJlc2VydmUgdGhlIGJlaGF2aW9yIG9mXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwsIGJ1dCBJJ20gZ3Vlc3NpbmcgdGhhdCB3YXMgbm90IGludGVudGlvbmFsLlxuICAgICAgICAgICAgLy8gRm9yIGFuIGFjdHVhbCBlcnJvciBzdWJjbGFzcywgdGhpcyBwcm9wZXJ0eSB3b3VsZFxuICAgICAgICAgICAgLy8gYmUgY29uZmlndXJhYmxlLlxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB0b1N0cmluZzoge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkgeyByZXR1cm4gdGhpcy5uYW1lICsgXCI6IFwiICsgdGhpcy5tZXNzYWdlOyB9LFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBDdXN0b21FcnJvcjtcbn1cblxudXRpbC5uZXdFcnJvciA9IG5ld0Vycm9yO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcHJvdG9jb2wgZXJyb3IuXG4gKiBAY2xhc3NkZXNjIEVycm9yIHN1YmNsYXNzIGluZGljYXRpbmcgYSBwcm90b2NvbCBzcGVjaWZjIGVycm9yLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3Byb3BlcnRpZXNdIEFkZGl0aW9uYWwgcHJvcGVydGllc1xuICogQGV4YW1wbGVcbiAqIHRyeSB7XG4gKiAgICAgTXlNZXNzYWdlLmRlY29kZShzb21lQnVmZmVyKTsgLy8gdGhyb3dzIGlmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICogfSBjYXRjaCAoZSkge1xuICogICAgIGlmIChlIGluc3RhbmNlb2YgUHJvdG9jb2xFcnJvciAmJiBlLmluc3RhbmNlKVxuICogICAgICAgICBjb25zb2xlLmxvZyhcImRlY29kZWQgc28gZmFyOiBcIiArIEpTT04uc3RyaW5naWZ5KGUuaW5zdGFuY2UpKTtcbiAqIH1cbiAqL1xudXRpbC5Qcm90b2NvbEVycm9yID0gbmV3RXJyb3IoXCJQcm90b2NvbEVycm9yXCIpO1xuXG4vKipcbiAqIFNvIGZhciBkZWNvZGVkIG1lc3NhZ2UgaW5zdGFuY2UuXG4gKiBAbmFtZSB1dGlsLlByb3RvY29sRXJyb3IjaW5zdGFuY2VcbiAqIEB0eXBlIHtNZXNzYWdlPFQ+fVxuICovXG5cbi8qKlxuICogQSBPbmVPZiBnZXR0ZXIgYXMgcmV0dXJuZWQgYnkge0BsaW5rIHV0aWwub25lT2ZHZXR0ZXJ9LlxuICogQHR5cGVkZWYgT25lT2ZHZXR0ZXJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBTZXQgZmllbGQgbmFtZSwgaWYgYW55XG4gKi9cblxuLyoqXG4gKiBCdWlsZHMgYSBnZXR0ZXIgZm9yIGEgb25lb2YncyBwcmVzZW50IGZpZWxkIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBmaWVsZE5hbWVzIEZpZWxkIG5hbWVzXG4gKiBAcmV0dXJucyB7T25lT2ZHZXR0ZXJ9IFVuYm91bmQgZ2V0dGVyXG4gKi9cbnV0aWwub25lT2ZHZXR0ZXIgPSBmdW5jdGlvbiBnZXRPbmVPZihmaWVsZE5hbWVzKSB7XG4gICAgdmFyIGZpZWxkTWFwID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZE5hbWVzLmxlbmd0aDsgKytpKVxuICAgICAgICBmaWVsZE1hcFtmaWVsZE5hbWVzW2ldXSA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gU2V0IGZpZWxkIG5hbWUsIGlmIGFueVxuICAgICAqIEB0aGlzIE9iamVjdFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpLCBpID0ga2V5cy5sZW5ndGggLSAxOyBpID4gLTE7IC0taSlcbiAgICAgICAgICAgIGlmIChmaWVsZE1hcFtrZXlzW2ldXSA9PT0gMSAmJiB0aGlzW2tleXNbaV1dICE9PSB1bmRlZmluZWQgJiYgdGhpc1trZXlzW2ldXSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5c1tpXTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBBIE9uZU9mIHNldHRlciBhcyByZXR1cm5lZCBieSB7QGxpbmsgdXRpbC5vbmVPZlNldHRlcn0uXG4gKiBAdHlwZWRlZiBPbmVPZlNldHRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSB2YWx1ZSBGaWVsZCBuYW1lXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbi8qKlxuICogQnVpbGRzIGEgc2V0dGVyIGZvciBhIG9uZW9mJ3MgcHJlc2VudCBmaWVsZCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gZmllbGROYW1lcyBGaWVsZCBuYW1lc1xuICogQHJldHVybnMge09uZU9mU2V0dGVyfSBVbmJvdW5kIHNldHRlclxuICovXG51dGlsLm9uZU9mU2V0dGVyID0gZnVuY3Rpb24gc2V0T25lT2YoZmllbGROYW1lcykge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmllbGQgbmFtZVxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQHRoaXMgT2JqZWN0XG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGROYW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWVzW2ldICE9PSBuYW1lKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2ZpZWxkTmFtZXNbaV1dO1xuICAgIH07XG59O1xuXG4vKipcbiAqIERlZmF1bHQgY29udmVyc2lvbiBvcHRpb25zIHVzZWQgZm9yIHtAbGluayBNZXNzYWdlI3RvSlNPTn0gaW1wbGVtZW50YXRpb25zLlxuICpcbiAqIFRoZXNlIG9wdGlvbnMgYXJlIGNsb3NlIHRvIHByb3RvMydzIEpTT04gbWFwcGluZyB3aXRoIHRoZSBleGNlcHRpb24gdGhhdCBpbnRlcm5hbCB0eXBlcyBsaWtlIEFueSBhcmUgaGFuZGxlZCBqdXN0IGxpa2UgbWVzc2FnZXMuIE1vcmUgcHJlY2lzZWx5OlxuICpcbiAqIC0gTG9uZ3MgYmVjb21lIHN0cmluZ3NcbiAqIC0gRW51bXMgYmVjb21lIHN0cmluZyBrZXlzXG4gKiAtIEJ5dGVzIGJlY29tZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKiAtIChTdWItKU1lc3NhZ2VzIGJlY29tZSBwbGFpbiBvYmplY3RzXG4gKiAtIE1hcHMgYmVjb21lIHBsYWluIG9iamVjdHMgd2l0aCBhbGwgc3RyaW5nIGtleXNcbiAqIC0gUmVwZWF0ZWQgZmllbGRzIGJlY29tZSBhcnJheXNcbiAqIC0gTmFOIGFuZCBJbmZpbml0eSBmb3IgZmxvYXQgYW5kIGRvdWJsZSBmaWVsZHMgYmVjb21lIHN0cmluZ3NcbiAqXG4gKiBAdHlwZSB7SUNvbnZlcnNpb25PcHRpb25zfVxuICogQHNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzL2RvY3MvcHJvdG8zP2hsPWVuI2pzb25cbiAqL1xudXRpbC50b0pTT05PcHRpb25zID0ge1xuICAgIGxvbmdzOiBTdHJpbmcsXG4gICAgZW51bXM6IFN0cmluZyxcbiAgICBieXRlczogU3RyaW5nLFxuICAgIGpzb246IHRydWVcbn07XG5cbi8vIFNldHMgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudCAoY2FsbGVkIGluIGluZGV4LW1pbmltYWwpXG51dGlsLl9jb25maWd1cmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgQnVmZmVyID0gdXRpbC5CdWZmZXI7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFCdWZmZXIpIHtcbiAgICAgICAgdXRpbC5fQnVmZmVyX2Zyb20gPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGJlY2F1c2Ugbm9kZSA0LnggYnVmZmVycyBhcmUgaW5jb21wYXRpYmxlICYgaW1tdXRhYmxlXG4gICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy9wcm90b2J1Zi5qcy9wdWxsLzY2NVxuICAgIHV0aWwuX0J1ZmZlcl9mcm9tID0gQnVmZmVyLmZyb20gIT09IFVpbnQ4QXJyYXkuZnJvbSAmJiBCdWZmZXIuZnJvbSB8fFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBmdW5jdGlvbiBCdWZmZXJfZnJvbSh2YWx1ZSwgZW5jb2RpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyKHZhbHVlLCBlbmNvZGluZyk7XG4gICAgICAgIH07XG4gICAgdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gQnVmZmVyLmFsbG9jVW5zYWZlIHx8XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGZ1bmN0aW9uIEJ1ZmZlcl9hbGxvY1Vuc2FmZShzaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcihzaXplKTtcbiAgICAgICAgfTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gdmVyaWZpZXI7XG5cbnZhciBFbnVtICAgICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbmZ1bmN0aW9uIGludmFsaWQoZmllbGQsIGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIGZpZWxkLm5hbWUgKyBcIjogXCIgKyBleHBlY3RlZCArIChmaWVsZC5yZXBlYXRlZCAmJiBleHBlY3RlZCAhPT0gXCJhcnJheVwiID8gXCJbXVwiIDogZmllbGQubWFwICYmIGV4cGVjdGVkICE9PSBcIm9iamVjdFwiID8gXCJ7azpcIitmaWVsZC5rZXlUeXBlK1wifVwiIDogXCJcIikgKyBcIiBleHBlY3RlZFwiO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBhcnRpYWwgdmFsdWUgdmVyaWZpZXIuXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBSZWZsZWN0ZWQgZmllbGRcbiAqIEBwYXJhbSB7bnVtYmVyfSBmaWVsZEluZGV4IEZpZWxkIGluZGV4XG4gKiBAcGFyYW0ge3N0cmluZ30gcmVmIFZhcmlhYmxlIHJlZmVyZW5jZVxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gZ2VuVmVyaWZ5VmFsdWUoZ2VuLCBmaWVsZCwgZmllbGRJbmRleCwgcmVmKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbiAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlKSB7XG4gICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSB7IGdlblxuICAgICAgICAgICAgKFwic3dpdGNoKCVzKXtcIiwgcmVmKVxuICAgICAgICAgICAgICAgIChcImRlZmF1bHQ6XCIpXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiZW51bSB2YWx1ZVwiKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMoZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlcyksIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7ICsraikgZ2VuXG4gICAgICAgICAgICAgICAgKFwiY2FzZSAlaTpcIiwgZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlc1trZXlzW2pdXSk7XG4gICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAgICAgKFwiYnJlYWtcIilcbiAgICAgICAgICAgIChcIn1cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZW5cbiAgICAgICAgICAgIChcIntcIilcbiAgICAgICAgICAgICAgICAoXCJ2YXIgZT10eXBlc1slaV0udmVyaWZ5KCVzKTtcIiwgZmllbGRJbmRleCwgcmVmKVxuICAgICAgICAgICAgICAgIChcImlmKGUpXCIpXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqK2VcIiwgZmllbGQubmFtZSArIFwiLlwiKVxuICAgICAgICAgICAgKFwifVwiKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgICAgICBjYXNlIFwidWludDMyXCI6XG4gICAgICAgICAgICBjYXNlIFwic2ludDMyXCI6XG4gICAgICAgICAgICBjYXNlIFwiZml4ZWQzMlwiOlxuICAgICAgICAgICAgY2FzZSBcInNmaXhlZDMyXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKCF1dGlsLmlzSW50ZWdlciglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJpbnRlZ2VyXCIpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJpbnQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInVpbnQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInNpbnQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcImZpeGVkNjRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzZml4ZWQ2NFwiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJpZighdXRpbC5pc0ludGVnZXIoJXMpJiYhKCVzJiZ1dGlsLmlzSW50ZWdlciglcy5sb3cpJiZ1dGlsLmlzSW50ZWdlciglcy5oaWdoKSkpXCIsIHJlZiwgcmVmLCByZWYsIHJlZilcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJpbnRlZ2VyfExvbmdcIikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImZsb2F0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZG91YmxlXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKHR5cGVvZiAlcyE9PVxcXCJudW1iZXJcXFwiKVwiLCByZWYpXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwibnVtYmVyXCIpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJib29sXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKHR5cGVvZiAlcyE9PVxcXCJib29sZWFuXFxcIilcIiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImJvb2xlYW5cIikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJpZighdXRpbC5pc1N0cmluZyglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJzdHJpbmdcIikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJ5dGVzXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKCEoJXMmJnR5cGVvZiAlcy5sZW5ndGg9PT1cXFwibnVtYmVyXFxcInx8dXRpbC5pc1N0cmluZyglcykpKVwiLCByZWYsIHJlZiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImJ1ZmZlclwiKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGdlbjtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGFydGlhbCBrZXkgdmVyaWZpZXIuXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBSZWZsZWN0ZWQgZmllbGRcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWYgVmFyaWFibGUgcmVmZXJlbmNlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiBnZW5WZXJpZnlLZXkoZ2VuLCBmaWVsZCwgcmVmKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbiAgICBzd2l0Y2ggKGZpZWxkLmtleVR5cGUpIHtcbiAgICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgIGNhc2UgXCJ1aW50MzJcIjpcbiAgICAgICAgY2FzZSBcInNpbnQzMlwiOlxuICAgICAgICBjYXNlIFwiZml4ZWQzMlwiOlxuICAgICAgICBjYXNlIFwic2ZpeGVkMzJcIjogZ2VuXG4gICAgICAgICAgICAoXCJpZighdXRpbC5rZXkzMlJlLnRlc3QoJXMpKVwiLCByZWYpXG4gICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJpbnRlZ2VyIGtleVwiKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgIGNhc2UgXCJ1aW50NjRcIjpcbiAgICAgICAgY2FzZSBcInNpbnQ2NFwiOlxuICAgICAgICBjYXNlIFwiZml4ZWQ2NFwiOlxuICAgICAgICBjYXNlIFwic2ZpeGVkNjRcIjogZ2VuXG4gICAgICAgICAgICAoXCJpZighdXRpbC5rZXk2NFJlLnRlc3QoJXMpKVwiLCByZWYpIC8vIHNlZSBjb21tZW50IGFib3ZlOiB4IGlzIG9rLCBkIGlzIG5vdFxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiaW50ZWdlcnxMb25nIGtleVwiKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJvb2xcIjogZ2VuXG4gICAgICAgICAgICAoXCJpZighdXRpbC5rZXkyUmUudGVzdCglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImJvb2xlYW4ga2V5XCIpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gZ2VuO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB2ZXJpZmllciBzcGVjaWZpYyB0byB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UgdHlwZS5cbiAqIEBwYXJhbSB7VHlwZX0gbXR5cGUgTWVzc2FnZSB0eXBlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiB2ZXJpZmllcihtdHlwZSkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXG5cbiAgICB2YXIgZ2VuID0gdXRpbC5jb2RlZ2VuKFtcIm1cIl0sIG10eXBlLm5hbWUgKyBcIiR2ZXJpZnlcIilcbiAgICAoXCJpZih0eXBlb2YgbSE9PVxcXCJvYmplY3RcXFwifHxtPT09bnVsbClcIilcbiAgICAgICAgKFwicmV0dXJuJWpcIiwgXCJvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgdmFyIG9uZW9mcyA9IG10eXBlLm9uZW9mc0FycmF5LFxuICAgICAgICBzZWVuRmlyc3RGaWVsZCA9IHt9O1xuICAgIGlmIChvbmVvZnMubGVuZ3RoKSBnZW5cbiAgICAoXCJ2YXIgcD17fVwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gbXR5cGUuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGZpZWxkID0gbXR5cGUuX2ZpZWxkc0FycmF5W2ldLnJlc29sdmUoKSxcbiAgICAgICAgICAgIHJlZiAgID0gXCJtXCIgKyB1dGlsLnNhZmVQcm9wKGZpZWxkLm5hbWUpO1xuXG4gICAgICAgIGlmIChmaWVsZC5vcHRpb25hbCkgZ2VuXG4gICAgICAgIChcImlmKCVzIT1udWxsJiZtLmhhc093blByb3BlcnR5KCVqKSl7XCIsIHJlZiwgZmllbGQubmFtZSk7IC8vICE9PSB1bmRlZmluZWQgJiYgIT09IG51bGxcblxuICAgICAgICAvLyBtYXAgZmllbGRzXG4gICAgICAgIGlmIChmaWVsZC5tYXApIHsgZ2VuXG4gICAgICAgICAgICAoXCJpZighdXRpbC5pc09iamVjdCglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcIm9iamVjdFwiKSlcbiAgICAgICAgICAgIChcInZhciBrPU9iamVjdC5rZXlzKCVzKVwiLCByZWYpXG4gICAgICAgICAgICAoXCJmb3IodmFyIGk9MDtpPGsubGVuZ3RoOysraSl7XCIpO1xuICAgICAgICAgICAgICAgIGdlblZlcmlmeUtleShnZW4sIGZpZWxkLCBcImtbaV1cIik7XG4gICAgICAgICAgICAgICAgZ2VuVmVyaWZ5VmFsdWUoZ2VuLCBmaWVsZCwgaSwgcmVmICsgXCJba1tpXV1cIilcbiAgICAgICAgICAgIChcIn1cIik7XG5cbiAgICAgICAgLy8gcmVwZWF0ZWQgZmllbGRzXG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIHsgZ2VuXG4gICAgICAgICAgICAoXCJpZighQXJyYXkuaXNBcnJheSglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImFycmF5XCIpKVxuICAgICAgICAgICAgKFwiZm9yKHZhciBpPTA7aTwlcy5sZW5ndGg7KytpKXtcIiwgcmVmKTtcbiAgICAgICAgICAgICAgICBnZW5WZXJpZnlWYWx1ZShnZW4sIGZpZWxkLCBpLCByZWYgKyBcIltpXVwiKVxuICAgICAgICAgICAgKFwifVwiKTtcblxuICAgICAgICAvLyByZXF1aXJlZCBvciBwcmVzZW50IGZpZWxkc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZpZWxkLnBhcnRPZikge1xuICAgICAgICAgICAgICAgIHZhciBvbmVvZlByb3AgPSB1dGlsLnNhZmVQcm9wKGZpZWxkLnBhcnRPZi5uYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VlbkZpcnN0RmllbGRbZmllbGQucGFydE9mLm5hbWVdID09PSAxKSBnZW5cbiAgICAgICAgICAgIChcImlmKHAlcz09PTEpXCIsIG9uZW9mUHJvcClcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBmaWVsZC5wYXJ0T2YubmFtZSArIFwiOiBtdWx0aXBsZSB2YWx1ZXNcIik7XG4gICAgICAgICAgICAgICAgc2VlbkZpcnN0RmllbGRbZmllbGQucGFydE9mLm5hbWVdID0gMTtcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgIChcInAlcz0xXCIsIG9uZW9mUHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZW5WZXJpZnlWYWx1ZShnZW4sIGZpZWxkLCBpLCByZWYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZC5vcHRpb25hbCkgZ2VuXG4gICAgICAgIChcIn1cIik7XG4gICAgfVxuICAgIHJldHVybiBnZW5cbiAgICAoXCJyZXR1cm4gbnVsbFwiKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogV3JhcHBlcnMgZm9yIGNvbW1vbiB0eXBlcy5cbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxJV3JhcHBlcj59XG4gKiBAY29uc3RcbiAqL1xudmFyIHdyYXBwZXJzID0gZXhwb3J0cztcblxudmFyIE1lc3NhZ2UgPSByZXF1aXJlKFwiLi9tZXNzYWdlXCIpO1xuXG4vKipcbiAqIEZyb20gb2JqZWN0IGNvbnZlcnRlciBwYXJ0IG9mIGFuIHtAbGluayBJV3JhcHBlcn0uXG4gKiBAdHlwZWRlZiBXcmFwcGVyRnJvbU9iamVjdENvbnZlcnRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gb2JqZWN0IFBsYWluIG9iamVjdFxuICogQHJldHVybnMge01lc3NhZ2U8e30+fSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAdGhpcyBUeXBlXG4gKi9cblxuLyoqXG4gKiBUbyBvYmplY3QgY29udmVydGVyIHBhcnQgb2YgYW4ge0BsaW5rIElXcmFwcGVyfS5cbiAqIEB0eXBlZGVmIFdyYXBwZXJUb09iamVjdENvbnZlcnRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtNZXNzYWdlPHt9Pn0gbWVzc2FnZSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge0lDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAqIEB0aGlzIFR5cGVcbiAqL1xuXG4vKipcbiAqIENvbW1vbiB0eXBlIHdyYXBwZXIgcGFydCBvZiB7QGxpbmsgd3JhcHBlcnN9LlxuICogQGludGVyZmFjZSBJV3JhcHBlclxuICogQHByb3BlcnR5IHtXcmFwcGVyRnJvbU9iamVjdENvbnZlcnRlcn0gW2Zyb21PYmplY3RdIEZyb20gb2JqZWN0IGNvbnZlcnRlclxuICogQHByb3BlcnR5IHtXcmFwcGVyVG9PYmplY3RDb252ZXJ0ZXJ9IFt0b09iamVjdF0gVG8gb2JqZWN0IGNvbnZlcnRlclxuICovXG5cbi8vIEN1c3RvbSB3cmFwcGVyIGZvciBBbnlcbndyYXBwZXJzW1wiLmdvb2dsZS5wcm90b2J1Zi5BbnlcIl0gPSB7XG5cbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbihvYmplY3QpIHtcblxuICAgICAgICAvLyB1bndyYXAgdmFsdWUgdHlwZSBpZiBtYXBwZWRcbiAgICAgICAgaWYgKG9iamVjdCAmJiBvYmplY3RbXCJAdHlwZVwiXSkge1xuICAgICAgICAgICAgIC8vIE9ubHkgdXNlIGZ1bGx5IHF1YWxpZmllZCB0eXBlIG5hbWUgYWZ0ZXIgdGhlIGxhc3QgJy8nXG4gICAgICAgICAgICB2YXIgbmFtZSA9IG9iamVjdFtcIkB0eXBlXCJdLnN1YnN0cmluZyhvYmplY3RbXCJAdHlwZVwiXS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5sb29rdXAobmFtZSk7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyB0eXBlX3VybCBkb2VzIG5vdCBhY2NlcHQgbGVhZGluZyBcIi5cIlxuICAgICAgICAgICAgICAgIHZhciB0eXBlX3VybCA9IG9iamVjdFtcIkB0eXBlXCJdLmNoYXJBdCgwKSA9PT0gXCIuXCIgP1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RbXCJAdHlwZVwiXS5zbGljZSgxKSA6IG9iamVjdFtcIkB0eXBlXCJdO1xuICAgICAgICAgICAgICAgIC8vIHR5cGVfdXJsIHByZWZpeCBpcyBvcHRpb25hbCwgYnV0IHBhdGggc2VwZXJhdG9yIGlzIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVfdXJsLmluZGV4T2YoXCIvXCIpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlX3VybCA9IFwiL1wiICsgdHlwZV91cmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVfdXJsOiB0eXBlX3VybCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHR5cGUuZW5jb2RlKHR5cGUuZnJvbU9iamVjdChvYmplY3QpKS5maW5pc2goKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbU9iamVjdChvYmplY3QpO1xuICAgIH0sXG5cbiAgICB0b09iamVjdDogZnVuY3Rpb24obWVzc2FnZSwgb3B0aW9ucykge1xuXG4gICAgICAgIC8vIERlZmF1bHQgcHJlZml4XG4gICAgICAgIHZhciBnb29nbGVBcGkgPSBcInR5cGUuZ29vZ2xlYXBpcy5jb20vXCI7XG4gICAgICAgIHZhciBwcmVmaXggPSBcIlwiO1xuICAgICAgICB2YXIgbmFtZSA9IFwiXCI7XG5cbiAgICAgICAgLy8gZGVjb2RlIHZhbHVlIGlmIHJlcXVlc3RlZCBhbmQgdW5tYXBwZWRcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5qc29uICYmIG1lc3NhZ2UudHlwZV91cmwgJiYgbWVzc2FnZS52YWx1ZSkge1xuICAgICAgICAgICAgLy8gT25seSB1c2UgZnVsbHkgcXVhbGlmaWVkIHR5cGUgbmFtZSBhZnRlciB0aGUgbGFzdCAnLydcbiAgICAgICAgICAgIG5hbWUgPSBtZXNzYWdlLnR5cGVfdXJsLnN1YnN0cmluZyhtZXNzYWdlLnR5cGVfdXJsLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgICAgICAgICAgLy8gU2VwYXJhdGUgdGhlIHByZWZpeCB1c2VkXG4gICAgICAgICAgICBwcmVmaXggPSBtZXNzYWdlLnR5cGVfdXJsLnN1YnN0cmluZygwLCBtZXNzYWdlLnR5cGVfdXJsLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmxvb2t1cChuYW1lKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAodHlwZSlcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gdHlwZS5kZWNvZGUobWVzc2FnZS52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3cmFwIHZhbHVlIGlmIHVubWFwcGVkXG4gICAgICAgIGlmICghKG1lc3NhZ2UgaW5zdGFuY2VvZiB0aGlzLmN0b3IpICYmIG1lc3NhZ2UgaW5zdGFuY2VvZiBNZXNzYWdlKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gbWVzc2FnZS4kdHlwZS50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlTmFtZSA9IG1lc3NhZ2UuJHR5cGUuZnVsbE5hbWVbMF0gPT09IFwiLlwiID9cbiAgICAgICAgICAgICAgICBtZXNzYWdlLiR0eXBlLmZ1bGxOYW1lLnNsaWNlKDEpIDogbWVzc2FnZS4kdHlwZS5mdWxsTmFtZTtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gdHlwZS5nb29nbGVhcGlzLmNvbSBwcmVmaXggaWYgbm8gcHJlZml4IGlzIHVzZWRcbiAgICAgICAgICAgIGlmIChwcmVmaXggPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBnb29nbGVBcGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuYW1lID0gcHJlZml4ICsgbWVzc2FnZU5hbWU7XG4gICAgICAgICAgICBvYmplY3RbXCJAdHlwZVwiXSA9IG5hbWU7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBXcml0ZXI7XG5cbnZhciB1dGlsICAgICAgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbnZhciBCdWZmZXJXcml0ZXI7IC8vIGN5Y2xpY1xuXG52YXIgTG9uZ0JpdHMgID0gdXRpbC5Mb25nQml0cyxcbiAgICBiYXNlNjQgICAgPSB1dGlsLmJhc2U2NCxcbiAgICB1dGY4ICAgICAgPSB1dGlsLnV0Zjg7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyB3cml0ZXIgb3BlcmF0aW9uIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBTY2hlZHVsZWQgd3JpdGVyIG9wZXJhdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBVaW50OEFycmF5LCBudW1iZXIpfSBmbiBGdW5jdGlvbiB0byBjYWxsXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuIFZhbHVlIGJ5dGUgbGVuZ3RoXG4gKiBAcGFyYW0geyp9IHZhbCBWYWx1ZSB0byB3cml0ZVxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiBPcChmbiwgbGVuLCB2YWwpIHtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRvIGNhbGwuXG4gICAgICogQHR5cGUge2Z1bmN0aW9uKFVpbnQ4QXJyYXksIG51bWJlciwgKil9XG4gICAgICovXG4gICAgdGhpcy5mbiA9IGZuO1xuXG4gICAgLyoqXG4gICAgICogVmFsdWUgYnl0ZSBsZW5ndGguXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxlbiA9IGxlbjtcblxuICAgIC8qKlxuICAgICAqIE5leHQgb3BlcmF0aW9uLlxuICAgICAqIEB0eXBlIHtXcml0ZXIuT3B8dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMubmV4dCA9IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFZhbHVlIHRvIHdyaXRlLlxuICAgICAqIEB0eXBlIHsqfVxuICAgICAqL1xuICAgIHRoaXMudmFsID0gdmFsOyAvLyB0eXBlIHZhcmllc1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gbm9vcCgpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHktZnVuY3Rpb25cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHdyaXRlciBzdGF0ZSBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgQ29waWVkIHdyaXRlciBzdGF0ZS5cbiAqIEBtZW1iZXJvZiBXcml0ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtXcml0ZXJ9IHdyaXRlciBXcml0ZXIgdG8gY29weSBzdGF0ZSBmcm9tXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIFN0YXRlKHdyaXRlcikge1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBoZWFkLlxuICAgICAqIEB0eXBlIHtXcml0ZXIuT3B9XG4gICAgICovXG4gICAgdGhpcy5oZWFkID0gd3JpdGVyLmhlYWQ7XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHRhaWwuXG4gICAgICogQHR5cGUge1dyaXRlci5PcH1cbiAgICAgKi9cbiAgICB0aGlzLnRhaWwgPSB3cml0ZXIudGFpbDtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgYnVmZmVyIGxlbmd0aC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGVuID0gd3JpdGVyLmxlbjtcblxuICAgIC8qKlxuICAgICAqIE5leHQgc3RhdGUuXG4gICAgICogQHR5cGUge1N0YXRlfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5uZXh0ID0gd3JpdGVyLnN0YXRlcztcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHdyaXRlciBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgd3JpdGVyIHVzaW5nIGBVaW50OEFycmF5YCBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSBgQXJyYXlgLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFdyaXRlcigpIHtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgbGVuZ3RoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSAwO1xuXG4gICAgLyoqXG4gICAgICogT3BlcmF0aW9ucyBoZWFkLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5oZWFkID0gbmV3IE9wKG5vb3AsIDAsIDApO1xuXG4gICAgLyoqXG4gICAgICogT3BlcmF0aW9ucyB0YWlsXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLnRhaWwgPSB0aGlzLmhlYWQ7XG5cbiAgICAvKipcbiAgICAgKiBMaW5rZWQgZm9ya2VkIHN0YXRlcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fG51bGx9XG4gICAgICovXG4gICAgdGhpcy5zdGF0ZXMgPSBudWxsO1xuXG4gICAgLy8gV2hlbiBhIHZhbHVlIGlzIHdyaXR0ZW4sIHRoZSB3cml0ZXIgY2FsY3VsYXRlcyBpdHMgYnl0ZSBsZW5ndGggYW5kIHB1dHMgaXQgaW50byBhIGxpbmtlZFxuICAgIC8vIGxpc3Qgb2Ygb3BlcmF0aW9ucyB0byBwZXJmb3JtIHdoZW4gZmluaXNoKCkgaXMgY2FsbGVkLiBUaGlzIGJvdGggYWxsb3dzIHVzIHRvIGFsbG9jYXRlXG4gICAgLy8gYnVmZmVycyBvZiB0aGUgZXhhY3QgcmVxdWlyZWQgc2l6ZSBhbmQgcmVkdWNlcyB0aGUgYW1vdW50IG9mIHdvcmsgd2UgaGF2ZSB0byBkbyBjb21wYXJlZFxuICAgIC8vIHRvIGZpcnN0IGNhbGN1bGF0aW5nIG92ZXIgb2JqZWN0cyBhbmQgdGhlbiBlbmNvZGluZyBvdmVyIG9iamVjdHMuIEluIG91ciBjYXNlLCB0aGUgZW5jb2RpbmdcbiAgICAvLyBwYXJ0IGlzIGp1c3QgYSBsaW5rZWQgbGlzdCB3YWxrIGNhbGxpbmcgb3BlcmF0aW9ucyB3aXRoIGFscmVhZHkgcHJlcGFyZWQgdmFsdWVzLlxufVxuXG52YXIgY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHJldHVybiB1dGlsLkJ1ZmZlclxuICAgICAgICA/IGZ1bmN0aW9uIGNyZWF0ZV9idWZmZXJfc2V0dXAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKFdyaXRlci5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGVfYnVmZmVyKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyV3JpdGVyKCk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIDogZnVuY3Rpb24gY3JlYXRlX2FycmF5KCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXcml0ZXIoKTtcbiAgICAgICAgfTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB3cml0ZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJXcml0ZXJ8V3JpdGVyfSBBIHtAbGluayBCdWZmZXJXcml0ZXJ9IHdoZW4gQnVmZmVycyBhcmUgc3VwcG9ydGVkLCBvdGhlcndpc2UgYSB7QGxpbmsgV3JpdGVyfVxuICovXG5Xcml0ZXIuY3JlYXRlID0gY3JlYXRlKCk7XG5cbi8qKlxuICogQWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgc2l6ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIEJ1ZmZlciBzaXplXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyXG4gKi9cbldyaXRlci5hbGxvYyA9IGZ1bmN0aW9uIGFsbG9jKHNpemUpIHtcbiAgICByZXR1cm4gbmV3IHV0aWwuQXJyYXkoc2l6ZSk7XG59O1xuXG4vLyBVc2UgVWludDhBcnJheSBidWZmZXIgcG9vbCBpbiB0aGUgYnJvd3NlciwganVzdCBsaWtlIG5vZGUgZG9lcyB3aXRoIGJ1ZmZlcnNcbi8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5pZiAodXRpbC5BcnJheSAhPT0gQXJyYXkpXG4gICAgV3JpdGVyLmFsbG9jID0gdXRpbC5wb29sKFdyaXRlci5hbGxvYywgdXRpbC5BcnJheS5wcm90b3R5cGUuc3ViYXJyYXkpO1xuXG4vKipcbiAqIFB1c2hlcyBhIG5ldyBvcGVyYXRpb24gdG8gdGhlIHF1ZXVlLlxuICogQHBhcmFtIHtmdW5jdGlvbihVaW50OEFycmF5LCBudW1iZXIsICopfSBmbiBGdW5jdGlvbiB0byBjYWxsXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuIFZhbHVlIGJ5dGUgbGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEBwcml2YXRlXG4gKi9cbldyaXRlci5wcm90b3R5cGUuX3B1c2ggPSBmdW5jdGlvbiBwdXNoKGZuLCBsZW4sIHZhbCkge1xuICAgIHRoaXMudGFpbCA9IHRoaXMudGFpbC5uZXh0ID0gbmV3IE9wKGZuLCBsZW4sIHZhbCk7XG4gICAgdGhpcy5sZW4gKz0gbGVuO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gd3JpdGVCeXRlKHZhbCwgYnVmLCBwb3MpIHtcbiAgICBidWZbcG9zXSA9IHZhbCAmIDI1NTtcbn1cblxuZnVuY3Rpb24gd3JpdGVWYXJpbnQzMih2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgd2hpbGUgKHZhbCA+IDEyNykge1xuICAgICAgICBidWZbcG9zKytdID0gdmFsICYgMTI3IHwgMTI4O1xuICAgICAgICB2YWwgPj4+PSA3O1xuICAgIH1cbiAgICBidWZbcG9zXSA9IHZhbDtcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHZhcmludCB3cml0ZXIgb3BlcmF0aW9uIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBTY2hlZHVsZWQgdmFyaW50IHdyaXRlciBvcGVyYXRpb24uXG4gKiBAZXh0ZW5kcyBPcFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuIFZhbHVlIGJ5dGUgbGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIFZhcmludE9wKGxlbiwgdmFsKSB7XG4gICAgdGhpcy5sZW4gPSBsZW47XG4gICAgdGhpcy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudmFsID0gdmFsO1xufVxuXG5WYXJpbnRPcC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE9wLnByb3RvdHlwZSk7XG5WYXJpbnRPcC5wcm90b3R5cGUuZm4gPSB3cml0ZVZhcmludDMyO1xuXG4vKipcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUgYXMgYSB2YXJpbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnVpbnQzMiA9IGZ1bmN0aW9uIHdyaXRlX3VpbnQzMih2YWx1ZSkge1xuICAgIC8vIGhlcmUsIHRoZSBjYWxsIHRvIHRoaXMucHVzaCBoYXMgYmVlbiBpbmxpbmVkIGFuZCBhIHZhcmludCBzcGVjaWZpYyBPcCBzdWJjbGFzcyBpcyB1c2VkLlxuICAgIC8vIHVpbnQzMiBpcyBieSBmYXIgdGhlIG1vc3QgZnJlcXVlbnRseSB1c2VkIG9wZXJhdGlvbiBhbmQgYmVuZWZpdHMgc2lnbmlmaWNhbnRseSBmcm9tIHRoaXMuXG4gICAgdGhpcy5sZW4gKz0gKHRoaXMudGFpbCA9IHRoaXMudGFpbC5uZXh0ID0gbmV3IFZhcmludE9wKFxuICAgICAgICAodmFsdWUgPSB2YWx1ZSA+Pj4gMClcbiAgICAgICAgICAgICAgICA8IDEyOCAgICAgICA/IDFcbiAgICAgICAgOiB2YWx1ZSA8IDE2Mzg0ICAgICA/IDJcbiAgICAgICAgOiB2YWx1ZSA8IDIwOTcxNTIgICA/IDNcbiAgICAgICAgOiB2YWx1ZSA8IDI2ODQzNTQ1NiA/IDRcbiAgICAgICAgOiAgICAgICAgICAgICAgICAgICAgIDUsXG4gICAgdmFsdWUpKS5sZW47XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHNpZ25lZCAzMiBiaXQgdmFsdWUgYXMgYSB2YXJpbnQuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuaW50MzIgPSBmdW5jdGlvbiB3cml0ZV9pbnQzMih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA8IDBcbiAgICAgICAgPyB0aGlzLl9wdXNoKHdyaXRlVmFyaW50NjQsIDEwLCBMb25nQml0cy5mcm9tTnVtYmVyKHZhbHVlKSkgLy8gMTAgYnl0ZXMgcGVyIHNwZWNcbiAgICAgICAgOiB0aGlzLnVpbnQzMih2YWx1ZSk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludCwgemlnLXphZyBlbmNvZGVkLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5zaW50MzIgPSBmdW5jdGlvbiB3cml0ZV9zaW50MzIodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy51aW50MzIoKHZhbHVlIDw8IDEgXiB2YWx1ZSA+PiAzMSkgPj4+IDApO1xufTtcblxuZnVuY3Rpb24gd3JpdGVWYXJpbnQ2NCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgd2hpbGUgKHZhbC5oaSkge1xuICAgICAgICBidWZbcG9zKytdID0gdmFsLmxvICYgMTI3IHwgMTI4O1xuICAgICAgICB2YWwubG8gPSAodmFsLmxvID4+PiA3IHwgdmFsLmhpIDw8IDI1KSA+Pj4gMDtcbiAgICAgICAgdmFsLmhpID4+Pj0gNztcbiAgICB9XG4gICAgd2hpbGUgKHZhbC5sbyA+IDEyNykge1xuICAgICAgICBidWZbcG9zKytdID0gdmFsLmxvICYgMTI3IHwgMTI4O1xuICAgICAgICB2YWwubG8gPSB2YWwubG8gPj4+IDc7XG4gICAgfVxuICAgIGJ1Zltwb3MrK10gPSB2YWwubG87XG59XG5cbi8qKlxuICogV3JpdGVzIGFuIHVuc2lnbmVkIDY0IGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGB2YWx1ZWAgaXMgYSBzdHJpbmcgYW5kIG5vIGxvbmcgbGlicmFyeSBpcyBwcmVzZW50LlxuICovXG5Xcml0ZXIucHJvdG90eXBlLnVpbnQ2NCA9IGZ1bmN0aW9uIHdyaXRlX3VpbnQ2NCh2YWx1ZSkge1xuICAgIHZhciBiaXRzID0gTG9uZ0JpdHMuZnJvbSh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgYml0cy5sZW5ndGgoKSwgYml0cyk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgYSB2YXJpbnQuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGB2YWx1ZWAgaXMgYSBzdHJpbmcgYW5kIG5vIGxvbmcgbGlicmFyeSBpcyBwcmVzZW50LlxuICovXG5Xcml0ZXIucHJvdG90eXBlLmludDY0ID0gV3JpdGVyLnByb3RvdHlwZS51aW50NjQ7XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDY0IGJpdCB2YWx1ZSBhcyBhIHZhcmludCwgemlnLXphZyBlbmNvZGVkLlxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUuc2ludDY0ID0gZnVuY3Rpb24gd3JpdGVfc2ludDY0KHZhbHVlKSB7XG4gICAgdmFyIGJpdHMgPSBMb25nQml0cy5mcm9tKHZhbHVlKS56ekVuY29kZSgpO1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHdyaXRlVmFyaW50NjQsIGJpdHMubGVuZ3RoKCksIGJpdHMpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBib29saXNoIHZhbHVlIGFzIGEgdmFyaW50LlxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuYm9vbCA9IGZ1bmN0aW9uIHdyaXRlX2Jvb2wodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUJ5dGUsIDEsIHZhbHVlID8gMSA6IDApO1xufTtcblxuZnVuY3Rpb24gd3JpdGVGaXhlZDMyKHZhbCwgYnVmLCBwb3MpIHtcbiAgICBidWZbcG9zICAgIF0gPSAgdmFsICAgICAgICAgJiAyNTU7XG4gICAgYnVmW3BvcyArIDFdID0gIHZhbCA+Pj4gOCAgICYgMjU1O1xuICAgIGJ1Zltwb3MgKyAyXSA9ICB2YWwgPj4+IDE2ICAmIDI1NTtcbiAgICBidWZbcG9zICsgM10gPSAgdmFsID4+PiAyNDtcbn1cblxuLyoqXG4gKiBXcml0ZXMgYW4gdW5zaWduZWQgMzIgYml0IHZhbHVlIGFzIGZpeGVkIDMyIGJpdHMuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZpeGVkMzIgPSBmdW5jdGlvbiB3cml0ZV9maXhlZDMyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVGaXhlZDMyLCA0LCB2YWx1ZSA+Pj4gMCk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHNpZ25lZCAzMiBiaXQgdmFsdWUgYXMgZml4ZWQgMzIgYml0cy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5zZml4ZWQzMiA9IFdyaXRlci5wcm90b3R5cGUuZml4ZWQzMjtcblxuLyoqXG4gKiBXcml0ZXMgYW4gdW5zaWduZWQgNjQgYml0IHZhbHVlIGFzIGZpeGVkIDY0IGJpdHMuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfHN0cmluZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgdmFsdWVgIGlzIGEgc3RyaW5nIGFuZCBubyBsb25nIGxpYnJhcnkgaXMgcHJlc2VudC5cbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5maXhlZDY0ID0gZnVuY3Rpb24gd3JpdGVfZml4ZWQ2NCh2YWx1ZSkge1xuICAgIHZhciBiaXRzID0gTG9uZ0JpdHMuZnJvbSh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVGaXhlZDMyLCA0LCBiaXRzLmxvKS5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIGJpdHMuaGkpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBzaWduZWQgNjQgYml0IHZhbHVlIGFzIGZpeGVkIDY0IGJpdHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGB2YWx1ZWAgaXMgYSBzdHJpbmcgYW5kIG5vIGxvbmcgbGlicmFyeSBpcyBwcmVzZW50LlxuICovXG5Xcml0ZXIucHJvdG90eXBlLnNmaXhlZDY0ID0gV3JpdGVyLnByb3RvdHlwZS5maXhlZDY0O1xuXG4vKipcbiAqIFdyaXRlcyBhIGZsb2F0ICgzMiBiaXQpLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZsb2F0ID0gZnVuY3Rpb24gd3JpdGVfZmxvYXQodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh1dGlsLmZsb2F0LndyaXRlRmxvYXRMRSwgNCwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBkb3VibGUgKDY0IGJpdCBmbG9hdCkuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZG91YmxlID0gZnVuY3Rpb24gd3JpdGVfZG91YmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2godXRpbC5mbG9hdC53cml0ZURvdWJsZUxFLCA4LCB2YWx1ZSk7XG59O1xuXG52YXIgd3JpdGVCeXRlcyA9IHV0aWwuQXJyYXkucHJvdG90eXBlLnNldFxuICAgID8gZnVuY3Rpb24gd3JpdGVCeXRlc19zZXQodmFsLCBidWYsIHBvcykge1xuICAgICAgICBidWYuc2V0KHZhbCwgcG9zKTsgLy8gYWxzbyB3b3JrcyBmb3IgcGxhaW4gYXJyYXkgdmFsdWVzXG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgOiBmdW5jdGlvbiB3cml0ZUJ5dGVzX2Zvcih2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgYnVmW3BvcyArIGldID0gdmFsW2ldO1xuICAgIH07XG5cbi8qKlxuICogV3JpdGVzIGEgc2VxdWVuY2Ugb2YgYnl0ZXMuXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8c3RyaW5nfSB2YWx1ZSBCdWZmZXIgb3IgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5ieXRlcyA9IGZ1bmN0aW9uIHdyaXRlX2J5dGVzKHZhbHVlKSB7XG4gICAgdmFyIGxlbiA9IHZhbHVlLmxlbmd0aCA+Pj4gMDtcbiAgICBpZiAoIWxlbilcbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVCeXRlLCAxLCAwKTtcbiAgICBpZiAodXRpbC5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGJ1ZiA9IFdyaXRlci5hbGxvYyhsZW4gPSBiYXNlNjQubGVuZ3RoKHZhbHVlKSk7XG4gICAgICAgIGJhc2U2NC5kZWNvZGUodmFsdWUsIGJ1ZiwgMCk7XG4gICAgICAgIHZhbHVlID0gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy51aW50MzIobGVuKS5fcHVzaCh3cml0ZUJ5dGVzLCBsZW4sIHZhbHVlKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiB3cml0ZV9zdHJpbmcodmFsdWUpIHtcbiAgICB2YXIgbGVuID0gdXRmOC5sZW5ndGgodmFsdWUpO1xuICAgIHJldHVybiBsZW5cbiAgICAgICAgPyB0aGlzLnVpbnQzMihsZW4pLl9wdXNoKHV0Zjgud3JpdGUsIGxlbiwgdmFsdWUpXG4gICAgICAgIDogdGhpcy5fcHVzaCh3cml0ZUJ5dGUsIDEsIDApO1xufTtcblxuLyoqXG4gKiBGb3JrcyB0aGlzIHdyaXRlcidzIHN0YXRlIGJ5IHB1c2hpbmcgaXQgdG8gYSBzdGFjay5cbiAqIENhbGxpbmcge0BsaW5rIFdyaXRlciNyZXNldHxyZXNldH0gb3Ige0BsaW5rIFdyaXRlciNsZGVsaW18bGRlbGltfSByZXNldHMgdGhlIHdyaXRlciB0byB0aGUgcHJldmlvdXMgc3RhdGUuXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5mb3JrID0gZnVuY3Rpb24gZm9yaygpIHtcbiAgICB0aGlzLnN0YXRlcyA9IG5ldyBTdGF0ZSh0aGlzKTtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBuZXcgT3Aobm9vcCwgMCwgMCk7XG4gICAgdGhpcy5sZW4gPSAwO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXNldHMgdGhpcyBpbnN0YW5jZSB0byB0aGUgbGFzdCBzdGF0ZS5cbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGVzKSB7XG4gICAgICAgIHRoaXMuaGVhZCAgID0gdGhpcy5zdGF0ZXMuaGVhZDtcbiAgICAgICAgdGhpcy50YWlsICAgPSB0aGlzLnN0YXRlcy50YWlsO1xuICAgICAgICB0aGlzLmxlbiAgICA9IHRoaXMuc3RhdGVzLmxlbjtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSB0aGlzLnN0YXRlcy5uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5ldyBPcChub29wLCAwLCAwKTtcbiAgICAgICAgdGhpcy5sZW4gID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlc2V0cyB0byB0aGUgbGFzdCBzdGF0ZSBhbmQgYXBwZW5kcyB0aGUgZm9yayBzdGF0ZSdzIGN1cnJlbnQgd3JpdGUgbGVuZ3RoIGFzIGEgdmFyaW50IGZvbGxvd2VkIGJ5IGl0cyBvcGVyYXRpb25zLlxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUubGRlbGltID0gZnVuY3Rpb24gbGRlbGltKCkge1xuICAgIHZhciBoZWFkID0gdGhpcy5oZWFkLFxuICAgICAgICB0YWlsID0gdGhpcy50YWlsLFxuICAgICAgICBsZW4gID0gdGhpcy5sZW47XG4gICAgdGhpcy5yZXNldCgpLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pIHtcbiAgICAgICAgdGhpcy50YWlsLm5leHQgPSBoZWFkLm5leHQ7IC8vIHNraXAgbm9vcFxuICAgICAgICB0aGlzLnRhaWwgPSB0YWlsO1xuICAgICAgICB0aGlzLmxlbiArPSBsZW47XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBGaW5pc2hlcyB0aGUgd3JpdGUgb3BlcmF0aW9uLlxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9IEZpbmlzaGVkIGJ1ZmZlclxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICB2YXIgaGVhZCA9IHRoaXMuaGVhZC5uZXh0LCAvLyBza2lwIG5vb3BcbiAgICAgICAgYnVmICA9IHRoaXMuY29uc3RydWN0b3IuYWxsb2ModGhpcy5sZW4pLFxuICAgICAgICBwb3MgID0gMDtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgICBoZWFkLmZuKGhlYWQudmFsLCBidWYsIHBvcyk7XG4gICAgICAgIHBvcyArPSBoZWFkLmxlbjtcbiAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICB9XG4gICAgLy8gdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICByZXR1cm4gYnVmO1xufTtcblxuV3JpdGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbihCdWZmZXJXcml0ZXJfKSB7XG4gICAgQnVmZmVyV3JpdGVyID0gQnVmZmVyV3JpdGVyXztcbiAgICBXcml0ZXIuY3JlYXRlID0gY3JlYXRlKCk7XG4gICAgQnVmZmVyV3JpdGVyLl9jb25maWd1cmUoKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyV3JpdGVyO1xuXG4vLyBleHRlbmRzIFdyaXRlclxudmFyIFdyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcbihCdWZmZXJXcml0ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShXcml0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBCdWZmZXJXcml0ZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHdyaXRlciBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgd3JpdGVyIHVzaW5nIG5vZGUgYnVmZmVycy5cbiAqIEBleHRlbmRzIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlcldyaXRlcigpIHtcbiAgICBXcml0ZXIuY2FsbCh0aGlzKTtcbn1cblxuQnVmZmVyV3JpdGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgc2l6ZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IEJ1ZmZlclxuICAgICAqL1xuICAgIEJ1ZmZlcldyaXRlci5hbGxvYyA9IHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZTtcblxuICAgIEJ1ZmZlcldyaXRlci53cml0ZUJ5dGVzQnVmZmVyID0gdXRpbC5CdWZmZXIgJiYgdXRpbC5CdWZmZXIucHJvdG90eXBlIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiB1dGlsLkJ1ZmZlci5wcm90b3R5cGUuc2V0Lm5hbWUgPT09IFwic2V0XCJcbiAgICAgICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgICAgYnVmLnNldCh2YWwsIHBvcyk7IC8vIGZhc3RlciB0aGFuIGNvcHkgKHJlcXVpcmVzIG5vZGUgPj0gNCB3aGVyZSBCdWZmZXJzIGV4dGVuZCBVaW50OEFycmF5IGFuZCBzZXQgaXMgcHJvcGVybHkgaW5oZXJpdGVkKVxuICAgICAgICAgIC8vIGFsc28gd29ya3MgZm9yIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIDogZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9jb3B5KHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgICBpZiAodmFsLmNvcHkpIC8vIEJ1ZmZlciB2YWx1ZXNcbiAgICAgICAgICAgIHZhbC5jb3B5KGJ1ZiwgcG9zLCAwLCB2YWwubGVuZ3RoKTtcbiAgICAgICAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDspIC8vIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgYnVmW3BvcysrXSA9IHZhbFtpKytdO1xuICAgICAgICB9O1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gd3JpdGVfYnl0ZXNfYnVmZmVyKHZhbHVlKSB7XG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKVxuICAgICAgICB2YWx1ZSA9IHV0aWwuX0J1ZmZlcl9mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xuICAgIHRoaXMudWludDMyKGxlbik7XG4gICAgaWYgKGxlbilcbiAgICAgICAgdGhpcy5fcHVzaChCdWZmZXJXcml0ZXIud3JpdGVCeXRlc0J1ZmZlciwgbGVuLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVN0cmluZ0J1ZmZlcih2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgaWYgKHZhbC5sZW5ndGggPCA0MCkgLy8gcGxhaW4ganMgaXMgZmFzdGVyIGZvciBzaG9ydCBzdHJpbmdzIChwcm9iYWJseSBkdWUgdG8gcmVkdW5kYW50IGFzc2VydGlvbnMpXG4gICAgICAgIHV0aWwudXRmOC53cml0ZSh2YWwsIGJ1ZiwgcG9zKTtcbiAgICBlbHNlIGlmIChidWYudXRmOFdyaXRlKVxuICAgICAgICBidWYudXRmOFdyaXRlKHZhbCwgcG9zKTtcbiAgICBlbHNlXG4gICAgICAgIGJ1Zi53cml0ZSh2YWwsIHBvcyk7XG59XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gd3JpdGVfc3RyaW5nX2J1ZmZlcih2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB1dGlsLkJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pXG4gICAgICAgIHRoaXMuX3B1c2god3JpdGVTdHJpbmdCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAbmFtZSBCdWZmZXJXcml0ZXIjZmluaXNoXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IEZpbmlzaGVkIGJ1ZmZlclxuICovXG5cbkJ1ZmZlcldyaXRlci5fY29uZmlndXJlKCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFzUHJvbWlzZSIsImZuIiwiY3R4IiwicGFyYW1zIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJvZmZzZXQiLCJpbmRleCIsInBlbmRpbmciLCJQcm9taXNlIiwiZXhlY3V0b3IiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FsbGJhY2siLCJlcnIiLCJhcHBseSIsImJhc2U2NCIsInN0cmluZyIsInAiLCJuIiwiY2hhckF0IiwiTWF0aCIsImNlaWwiLCJiNjQiLCJzNjQiLCJpIiwiZW5jb2RlIiwiYnVmZmVyIiwic3RhcnQiLCJlbmQiLCJ0IiwicGFydHMiLCJjaHVuayIsImoiLCJiIiwicHVzaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInNsaWNlIiwiam9pbiIsImludmFsaWRFbmNvZGluZyIsImRlY29kZSIsImMiLCJjaGFyQ29kZUF0IiwidW5kZWZpbmVkIiwiRXJyb3IiLCJ0ZXN0IiwiY29kZWdlbiIsImZ1bmN0aW9uUGFyYW1zIiwiZnVuY3Rpb25OYW1lIiwiYm9keSIsIkNvZGVnZW4iLCJmb3JtYXRTdHJpbmdPclNjb3BlIiwic291cmNlIiwidG9TdHJpbmciLCJ2ZXJib3NlIiwiY29uc29sZSIsImxvZyIsInNjb3BlS2V5cyIsIk9iamVjdCIsImtleXMiLCJzY29wZVBhcmFtcyIsInNjb3BlVmFsdWVzIiwic2NvcGVPZmZzZXQiLCJGdW5jdGlvbiIsImZvcm1hdFBhcmFtcyIsImZvcm1hdE9mZnNldCIsInJlcGxhY2UiLCIkMCIsIiQxIiwidmFsdWUiLCJOdW1iZXIiLCJmbG9vciIsIkpTT04iLCJzdHJpbmdpZnkiLCJmdW5jdGlvbk5hbWVPdmVycmlkZSIsIkV2ZW50RW1pdHRlciIsInRoaXMiLCJfbGlzdGVuZXJzIiwicHJvdG90eXBlIiwib24iLCJldnQiLCJvZmYiLCJsaXN0ZW5lcnMiLCJzcGxpY2UiLCJlbWl0IiwiYXJncyIsImZldGNoIiwiZnMiLCJpbnF1aXJlIiwiZmlsZW5hbWUiLCJvcHRpb25zIiwieGhyIiwicmVhZEZpbGUiLCJmZXRjaFJlYWRGaWxlQ2FsbGJhY2siLCJjb250ZW50cyIsIlhNTEh0dHBSZXF1ZXN0IiwiYmluYXJ5IiwiZmV0Y2hfeGhyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwiZmV0Y2hPblJlYWR5U3RhdGVDaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJVaW50OEFycmF5Iiwib3ZlcnJpZGVNaW1lVHlwZSIsInJlc3BvbnNlVHlwZSIsIm9wZW4iLCJzZW5kIiwiZmFjdG9yeSIsIkZsb2F0MzJBcnJheSIsImYzMiIsImY4YiIsImxlIiwid3JpdGVGbG9hdF9mMzJfY3B5IiwidmFsIiwiYnVmIiwicG9zIiwid3JpdGVGbG9hdF9mMzJfcmV2IiwicmVhZEZsb2F0X2YzMl9jcHkiLCJyZWFkRmxvYXRfZjMyX3JldiIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJ3cml0ZUZsb2F0X2llZWU3NTQiLCJ3cml0ZVVpbnQiLCJzaWduIiwiaXNOYU4iLCJyb3VuZCIsImV4cG9uZW50IiwiTE4yIiwicG93IiwicmVhZEZsb2F0X2llZWU3NTQiLCJyZWFkVWludCIsInVpbnQiLCJtYW50aXNzYSIsIk5hTiIsIkluZmluaXR5IiwiYmluZCIsIndyaXRlVWludExFIiwid3JpdGVVaW50QkUiLCJyZWFkVWludExFIiwicmVhZFVpbnRCRSIsIkZsb2F0NjRBcnJheSIsImY2NCIsIndyaXRlRG91YmxlX2Y2NF9jcHkiLCJ3cml0ZURvdWJsZV9mNjRfcmV2IiwicmVhZERvdWJsZV9mNjRfY3B5IiwicmVhZERvdWJsZV9mNjRfcmV2Iiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZURvdWJsZV9pZWVlNzU0Iiwib2ZmMCIsIm9mZjEiLCJyZWFkRG91YmxlX2llZWU3NTQiLCJsbyIsImhpIiwibW9kdWxlTmFtZSIsIm1vZCIsImV2YWwiLCJlIiwicGF0aCIsImlzQWJzb2x1dGUiLCJub3JtYWxpemUiLCJzcGxpdCIsImFic29sdXRlIiwicHJlZml4Iiwic2hpZnQiLCJvcmlnaW5QYXRoIiwiaW5jbHVkZVBhdGgiLCJhbHJlYWR5Tm9ybWFsaXplZCIsInBvb2wiLCJhbGxvYyIsInNpemUiLCJTSVpFIiwiTUFYIiwic2xhYiIsInBvb2xfYWxsb2MiLCJjYWxsIiwidXRmOCIsInV0ZjhfbGVuZ3RoIiwibGVuIiwicmVhZCIsInV0ZjhfcmVhZCIsIndyaXRlIiwidXRmOF93cml0ZSIsImMxIiwiYzIiLCJjb21tb24iLCJ0aW1lVHlwZSIsImNvbW1vblJlIiwibmFtZSIsImpzb24iLCJuZXN0ZWQiLCJnb29nbGUiLCJwcm90b2J1ZiIsIkFueSIsImZpZWxkcyIsInR5cGVfdXJsIiwidHlwZSIsImlkIiwiRHVyYXRpb24iLCJzZWNvbmRzIiwibmFub3MiLCJUaW1lc3RhbXAiLCJFbXB0eSIsIlN0cnVjdCIsImtleVR5cGUiLCJWYWx1ZSIsIm9uZW9mcyIsImtpbmQiLCJvbmVvZiIsIm51bGxWYWx1ZSIsIm51bWJlclZhbHVlIiwic3RyaW5nVmFsdWUiLCJib29sVmFsdWUiLCJzdHJ1Y3RWYWx1ZSIsImxpc3RWYWx1ZSIsIk51bGxWYWx1ZSIsInZhbHVlcyIsIk5VTExfVkFMVUUiLCJMaXN0VmFsdWUiLCJydWxlIiwiRG91YmxlVmFsdWUiLCJGbG9hdFZhbHVlIiwiSW50NjRWYWx1ZSIsIlVJbnQ2NFZhbHVlIiwiSW50MzJWYWx1ZSIsIlVJbnQzMlZhbHVlIiwiQm9vbFZhbHVlIiwiU3RyaW5nVmFsdWUiLCJCeXRlc1ZhbHVlIiwiRmllbGRNYXNrIiwicGF0aHMiLCJnZXQiLCJmaWxlIiwiY29udmVydGVyIiwiRW51bSIsInV0aWwiLCJnZW5WYWx1ZVBhcnRpYWxfZnJvbU9iamVjdCIsImdlbiIsImZpZWxkIiwiZmllbGRJbmRleCIsInByb3AiLCJkZWZhdWx0QWxyZWFkeUVtaXR0ZWQiLCJyZXNvbHZlZFR5cGUiLCJ0eXBlRGVmYXVsdCIsInJlcGVhdGVkIiwiZnVsbE5hbWUiLCJpc1Vuc2lnbmVkIiwiZ2VuVmFsdWVQYXJ0aWFsX3RvT2JqZWN0IiwiZnJvbU9iamVjdCIsIm10eXBlIiwiZmllbGRzQXJyYXkiLCJzYWZlUHJvcCIsIm1hcCIsInRvT2JqZWN0Iiwic29ydCIsImNvbXBhcmVGaWVsZHNCeUlkIiwicmVwZWF0ZWRGaWVsZHMiLCJtYXBGaWVsZHMiLCJub3JtYWxGaWVsZHMiLCJwYXJ0T2YiLCJ2YWx1ZXNCeUlkIiwibG9uZyIsImxvdyIsImhpZ2giLCJ1bnNpZ25lZCIsInRvTnVtYmVyIiwiYnl0ZXMiLCJhcnJheURlZmF1bHQiLCJoYXNLczIiLCJfZmllbGRzQXJyYXkiLCJpbmRleE9mIiwiZGVjb2RlciIsImZpbHRlciIsImdyb3VwIiwicmVmIiwidHlwZXMiLCJkZWZhdWx0cyIsImJhc2ljIiwicGFja2VkIiwicmZpZWxkIiwicmVxdWlyZWQiLCJtaXNzaW5nIiwiZW5jb2RlciIsIndpcmVUeXBlIiwibWFwS2V5IiwiZ2VuVHlwZVBhcnRpYWwiLCJvcHRpb25hbCIsIlJlZmxlY3Rpb25PYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImNsYXNzTmFtZSIsIk5hbWVzcGFjZSIsImNvbW1lbnQiLCJjb21tZW50cyIsInZhbHVlc09wdGlvbnMiLCJUeXBlRXJyb3IiLCJyZXNlcnZlZCIsImZyb21KU09OIiwiZW5tIiwidG9KU09OIiwidG9KU09OT3B0aW9ucyIsImtlZXBDb21tZW50cyIsIkJvb2xlYW4iLCJhZGQiLCJpc1N0cmluZyIsImlzSW50ZWdlciIsImlzUmVzZXJ2ZWRJZCIsImlzUmVzZXJ2ZWROYW1lIiwiYWxsb3dfYWxpYXMiLCJyZW1vdmUiLCJGaWVsZCIsIlR5cGUiLCJydWxlUmUiLCJleHRlbmQiLCJpc09iamVjdCIsInRvTG93ZXJDYXNlIiwibWVzc2FnZSIsImRlZmF1bHRWYWx1ZSIsIkxvbmciLCJleHRlbnNpb25GaWVsZCIsImRlY2xhcmluZ0ZpZWxkIiwiX3BhY2tlZCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3B0aW9uIiwic2V0T3B0aW9uIiwiaWZOb3RTZXQiLCJyZXNvbHZlZCIsInBhcmVudCIsImxvb2t1cFR5cGVPckVudW0iLCJwcm90bzNfb3B0aW9uYWwiLCJmcm9tTnVtYmVyIiwiZnJlZXplIiwibmV3QnVmZmVyIiwiZW1wdHlPYmplY3QiLCJlbXB0eUFycmF5IiwiY3RvciIsImQiLCJkZWNvcmF0ZUZpZWxkIiwiZmllbGRJZCIsImZpZWxkVHlwZSIsImZpZWxkUnVsZSIsImRlY29yYXRlVHlwZSIsImRlY29yYXRlRW51bSIsImZpZWxkRGVjb3JhdG9yIiwiZmllbGROYW1lIiwiX2NvbmZpZ3VyZSIsImNvbmZpZ3VyZSIsIlR5cGVfIiwiYnVpbGQiLCJsb2FkIiwicm9vdCIsIlJvb3QiLCJsb2FkU3luYyIsInZlcmlmaWVyIiwiT25lT2YiLCJNYXBGaWVsZCIsIlNlcnZpY2UiLCJNZXRob2QiLCJNZXNzYWdlIiwid3JhcHBlcnMiLCJXcml0ZXIiLCJCdWZmZXJXcml0ZXIiLCJSZWFkZXIiLCJCdWZmZXJSZWFkZXIiLCJycGMiLCJyb290cyIsInRva2VuaXplIiwicGFyc2UiLCJyZXNvbHZlZEtleVR5cGUiLCJkZWNvcmF0ZU1hcEZpZWxkIiwiZmllbGRLZXlUeXBlIiwiZmllbGRWYWx1ZVR5cGUiLCJtYXBGaWVsZERlY29yYXRvciIsInByb3BlcnRpZXMiLCIkdHlwZSIsIndyaXRlciIsImVuY29kZURlbGltaXRlZCIsInJlYWRlciIsImRlY29kZURlbGltaXRlZCIsInZlcmlmeSIsIm9iamVjdCIsInJlcXVlc3RUeXBlIiwicmVxdWVzdFN0cmVhbSIsInJlc3BvbnNlU3RyZWFtIiwicGFyc2VkT3B0aW9ucyIsInJlc29sdmVkUmVxdWVzdFR5cGUiLCJyZXNvbHZlZFJlc3BvbnNlVHlwZSIsImxvb2t1cFR5cGUiLCJhcnJheVRvSlNPTiIsImFycmF5Iiwib2JqIiwiX25lc3RlZEFycmF5IiwiY2xlYXJDYWNoZSIsIm5hbWVzcGFjZSIsImFkZEpTT04iLCJ0b0FycmF5IiwibmVzdGVkQXJyYXkiLCJuZXN0ZWRKc29uIiwibmFtZXMiLCJtZXRob2RzIiwiZ2V0RW51bSIsInByZXYiLCJzZXRPcHRpb25zIiwib25BZGQiLCJvblJlbW92ZSIsImRlZmluZSIsImlzQXJyYXkiLCJwdHIiLCJwYXJ0IiwicmVzb2x2ZUFsbCIsImxvb2t1cCIsImZpbHRlclR5cGVzIiwicGFyZW50QWxyZWFkeUNoZWNrZWQiLCJmb3VuZCIsImxvb2t1cEVudW0iLCJsb29rdXBTZXJ2aWNlIiwiU2VydmljZV8iLCJFbnVtXyIsImRlZmluZVByb3BlcnRpZXMiLCJ1bnNoaWZ0IiwiX2hhbmRsZUFkZCIsIl9oYW5kbGVSZW1vdmUiLCJzZXRQYXJzZWRPcHRpb24iLCJwcm9wTmFtZSIsIm9wdCIsImZpbmQiLCJoYXNPd25Qcm9wZXJ0eSIsIm5ld1ZhbHVlIiwic2V0UHJvcGVydHkiLCJuZXdPcHQiLCJSb290XyIsImZpZWxkTmFtZXMiLCJhZGRGaWVsZHNUb1BhcmVudCIsImRlY29yYXRlT25lT2YiLCJvbmVPZkRlY29yYXRvciIsIm9uZW9mTmFtZSIsIm9uZU9mR2V0dGVyIiwic2V0Iiwib25lT2ZTZXR0ZXIiLCJrZWVwQ2FzZSIsImJhc2UxMFJlIiwiYmFzZTEwTmVnUmUiLCJiYXNlMTZSZSIsImJhc2UxNk5lZ1JlIiwiYmFzZThSZSIsImJhc2U4TmVnUmUiLCJudW1iZXJSZSIsIm5hbWVSZSIsInR5cGVSZWZSZSIsImZxVHlwZVJlZlJlIiwicGtnIiwiaW1wb3J0cyIsIndlYWtJbXBvcnRzIiwic3ludGF4IiwidG9rZW4iLCJwcmVmZXJUcmFpbGluZ0NvbW1lbnQiLCJ0biIsImFsdGVybmF0ZUNvbW1lbnRNb2RlIiwibmV4dCIsInBlZWsiLCJza2lwIiwiY21udCIsImhlYWQiLCJpc1Byb3RvMyIsImFwcGx5Q2FzZSIsImNhbWVsQ2FzZSIsImlsbGVnYWwiLCJpbnNpZGVUcnlDYXRjaCIsImxpbmUiLCJyZWFkU3RyaW5nIiwicmVhZFZhbHVlIiwiYWNjZXB0VHlwZVJlZiIsInBhcnNlTnVtYmVyIiwic3Vic3RyaW5nIiwicGFyc2VJbnQiLCJwYXJzZUZsb2F0IiwicmVhZFJhbmdlcyIsInRhcmdldCIsImFjY2VwdFN0cmluZ3MiLCJwYXJzZUlkIiwiYWNjZXB0TmVnYXRpdmUiLCJwYXJzZVBhY2thZ2UiLCJwYXJzZUltcG9ydCIsIndoaWNoSW1wb3J0cyIsInBhcnNlU3ludGF4IiwicGFyc2VDb21tb24iLCJwYXJzZU9wdGlvbiIsInBhcnNlVHlwZSIsInBhcnNlRW51bSIsInBhcnNlU2VydmljZSIsInNlcnZpY2UiLCJpZkJsb2NrIiwicGFyc2VTZXJ2aWNlX2Jsb2NrIiwicGFyc2VNZXRob2QiLCJjb21tZW50VGV4dCIsIm1ldGhvZCIsInBhcnNlTWV0aG9kX2Jsb2NrIiwicGFyc2VFeHRlbnNpb24iLCJyZWZlcmVuY2UiLCJwYXJzZUV4dGVuc2lvbl9ibG9jayIsInBhcnNlRmllbGQiLCJmbklmIiwiZm5FbHNlIiwidHJhaWxpbmdMaW5lIiwicGFyc2VUeXBlX2Jsb2NrIiwicGFyc2VNYXBGaWVsZCIsInZhbHVlVHlwZSIsInBhcnNlTWFwRmllbGRfYmxvY2siLCJwYXJzZU1hcEZpZWxkX2xpbmUiLCJwYXJzZUlubGluZU9wdGlvbnMiLCJwYXJzZU9uZU9mIiwicGFyc2VPbmVPZl9ibG9jayIsImV4dGVuc2lvbnMiLCJlbmRzV2l0aCIsInN0YXJ0c1dpdGgiLCJwYXJzZUZpZWxkX2Jsb2NrIiwicGFyc2VGaWVsZF9saW5lIiwicGFyc2VHcm91cCIsImxjRmlyc3QiLCJ1Y0ZpcnN0IiwicGFyc2VHcm91cF9ibG9jayIsInBhcnNlRW51bV9ibG9jayIsInBhcnNlRW51bVZhbHVlIiwiZHVtbXkiLCJwYXJzZUVudW1WYWx1ZV9ibG9jayIsInBhcnNlRW51bVZhbHVlX2xpbmUiLCJpc0N1c3RvbSIsIm9wdGlvbiIsInBhcnNlT3B0aW9uVmFsdWUiLCJvYmplY3RSZXN1bHQiLCJsYXN0VmFsdWUiLCJwcmV2VmFsdWUiLCJjb25jYXQiLCJzaW1wbGVWYWx1ZSIsIkxvbmdCaXRzIiwiaW5kZXhPdXRPZlJhbmdlIiwid3JpdGVMZW5ndGgiLCJSYW5nZUVycm9yIiwiY3JlYXRlX2FycmF5IiwiY3JlYXRlX3R5cGVkX2FycmF5IiwiQnVmZmVyIiwiY3JlYXRlX2J1ZmZlcl9zZXR1cCIsImNyZWF0ZV9idWZmZXIiLCJpc0J1ZmZlciIsInJlYWRMb25nVmFyaW50IiwiYml0cyIsInJlYWRGaXhlZDMyX2VuZCIsInJlYWRGaXhlZDY0IiwiX3NsaWNlIiwic3ViYXJyYXkiLCJ1aW50MzIiLCJyZWFkX3VpbnQzMl9zZXR1cCIsInJlYWRfdWludDMyIiwiaW50MzIiLCJyZWFkX2ludDMyIiwic2ludDMyIiwicmVhZF9zaW50MzIiLCJib29sIiwicmVhZF9ib29sIiwiZml4ZWQzMiIsInJlYWRfZml4ZWQzMiIsInNmaXhlZDMyIiwicmVhZF9zZml4ZWQzMiIsImZsb2F0IiwicmVhZF9mbG9hdCIsImRvdWJsZSIsInJlYWRfZG91YmxlIiwicmVhZF9ieXRlcyIsIm5hdGl2ZUJ1ZmZlciIsInJlYWRfc3RyaW5nIiwic2tpcFR5cGUiLCJCdWZmZXJSZWFkZXJfIiwibWVyZ2UiLCJpbnQ2NCIsInJlYWRfaW50NjQiLCJ1aW50NjQiLCJyZWFkX3VpbnQ2NCIsInNpbnQ2NCIsInJlYWRfc2ludDY0IiwienpEZWNvZGUiLCJmaXhlZDY0IiwicmVhZF9maXhlZDY0Iiwic2ZpeGVkNjQiLCJyZWFkX3NmaXhlZDY0IiwicmVhZF9zdHJpbmdfYnVmZmVyIiwidXRmOFNsaWNlIiwibWluIiwiZGVmZXJyZWQiLCJmaWxlcyIsIlNZTkMiLCJyZXNvbHZlUGF0aCIsInNlbGYiLCJzeW5jIiwiZmluaXNoIiwiY2IiLCJnZXRCdW5kbGVkRmlsZU5hbWUiLCJpZHgiLCJsYXN0SW5kZXhPZiIsImFsdG5hbWUiLCJwcm9jZXNzIiwicGFyc2VkIiwicXVldWVkIiwid2VhayIsInNldFRpbWVvdXQiLCJyZWFkRmlsZVN5bmMiLCJpc05vZGUiLCJleHBvc2VSZSIsInRyeUhhbmRsZUV4dGVuc2lvbiIsImV4dGVuZGVkVHlwZSIsInNpc3RlckZpZWxkIiwicGFyc2VfIiwiY29tbW9uXyIsInJwY0ltcGwiLCJyZXF1ZXN0RGVsaW1pdGVkIiwicmVzcG9uc2VEZWxpbWl0ZWQiLCJycGNDYWxsIiwicmVxdWVzdEN0b3IiLCJyZXNwb25zZUN0b3IiLCJyZXF1ZXN0IiwicnBjQ2FsbGJhY2siLCJlbmRlZEJ5UlBDIiwiX21ldGhvZHNBcnJheSIsImluaGVyaXRlZCIsIm1ldGhvZHNBcnJheSIsInJwY1NlcnZpY2UiLCJtZXRob2ROYW1lIiwiaXNSZXNlcnZlZCIsIm0iLCJxIiwicyIsImRlbGltUmUiLCJzdHJpbmdEb3VibGVSZSIsInN0cmluZ1NpbmdsZVJlIiwic2V0Q29tbWVudFJlIiwic2V0Q29tbWVudEFsdFJlIiwic2V0Q29tbWVudFNwbGl0UmUiLCJ3aGl0ZXNwYWNlUmUiLCJ1bmVzY2FwZVJlIiwidW5lc2NhcGVNYXAiLCJ1bmVzY2FwZSIsInN0ciIsImxhc3RDb21tZW50TGluZSIsInN0YWNrIiwic3RyaW5nRGVsaW0iLCJzdWJqZWN0Iiwic2V0Q29tbWVudCIsImlzTGVhZGluZyIsImxpbmVFbXB0eSIsImxlYWRpbmciLCJjb21tZW50T2Zmc2V0IiwibGluZXMiLCJ0cmltIiwidGV4dCIsImlzRG91YmxlU2xhc2hDb21tZW50TGluZSIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiZmluZEVuZE9mTGluZSIsImxpbmVUZXh0IiwiY3Vyc29yIiwicmUiLCJsYXN0SW5kZXgiLCJtYXRjaCIsImV4ZWMiLCJyZXBlYXQiLCJjdXJyIiwiaXNEb2MiLCJpc0xlYWRpbmdDb21tZW50IiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJyZXQiLCJfZmllbGRzQnlJZCIsIl9vbmVvZnNBcnJheSIsIl9jdG9yIiwiZmllbGRzQnlJZCIsIm9uZW9mc0FycmF5IiwiZ2VuZXJhdGVDb25zdHJ1Y3RvciIsImN0b3JQcm9wZXJ0aWVzIiwic2V0dXAiLCJ3cmFwcGVyIiwib3JpZ2luYWxUaGlzIiwiZW5jb2RlX3NldHVwIiwiZm9yayIsImxkZWxpbSIsImRlY29kZV9zZXR1cCIsInZlcmlmeV9zZXR1cCIsInR5cGVOYW1lIiwidHlwZURlY29yYXRvciIsImJha2UiLCJvIiwia2V5Iiwic2FmZVByb3BCYWNrc2xhc2hSZSIsInNhZmVQcm9wUXVvdGVSZSIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlUmUiLCJhIiwiZGVjb3JhdGVSb290IiwiZW51bWVyYWJsZSIsImRlY29yYXRlRW51bUluZGV4IiwiZHN0Iiwic2V0UHJvcCIsInplcm8iLCJ6ekVuY29kZSIsInplcm9IYXNoIiwiZnJvbSIsImZyb21TdHJpbmciLCJ0b0xvbmciLCJmcm9tSGFzaCIsImhhc2giLCJ0b0hhc2giLCJtYXNrIiwicGFydDAiLCJwYXJ0MSIsInBhcnQyIiwic3JjIiwibmV3RXJyb3IiLCJDdXN0b21FcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJnIiwidmVyc2lvbnMiLCJub2RlIiwiZ2xvYmFsIiwid2luZG93IiwiaXNGaW5pdGUiLCJpc3NldCIsImlzU2V0IiwidXRmOFdyaXRlIiwiX0J1ZmZlcl9mcm9tIiwiX0J1ZmZlcl9hbGxvY1Vuc2FmZSIsInNpemVPckFycmF5IiwiZGNvZGVJTyIsImtleTJSZSIsImtleTMyUmUiLCJrZXk2NFJlIiwibG9uZ1RvSGFzaCIsImxvbmdGcm9tSGFzaCIsImZyb21CaXRzIiwiUHJvdG9jb2xFcnJvciIsImdldE9uZU9mIiwiZmllbGRNYXAiLCJzZXRPbmVPZiIsImxvbmdzIiwiZW51bXMiLCJCdWZmZXJfZnJvbSIsImVuY29kaW5nIiwiYWxsb2NVbnNhZmUiLCJCdWZmZXJfYWxsb2NVbnNhZmUiLCJzZWVuRmlyc3RGaWVsZCIsImludmFsaWQiLCJnZW5WZXJpZnlLZXkiLCJnZW5WZXJpZnlWYWx1ZSIsIm9uZW9mUHJvcCIsIk9wIiwibm9vcCIsIlN0YXRlIiwidGFpbCIsInN0YXRlcyIsIndyaXRlQnl0ZSIsIlZhcmludE9wIiwid3JpdGVWYXJpbnQ2NCIsIndyaXRlRml4ZWQzMiIsIl9wdXNoIiwid3JpdGVWYXJpbnQzMiIsIndyaXRlX3VpbnQzMiIsIndyaXRlX2ludDMyIiwid3JpdGVfc2ludDMyIiwid3JpdGVfdWludDY0Iiwid3JpdGVfc2ludDY0Iiwid3JpdGVfYm9vbCIsIndyaXRlX2ZpeGVkMzIiLCJ3cml0ZV9maXhlZDY0Iiwid3JpdGVfZmxvYXQiLCJ3cml0ZV9kb3VibGUiLCJ3cml0ZUJ5dGVzIiwid3JpdGVCeXRlc19zZXQiLCJ3cml0ZUJ5dGVzX2ZvciIsIndyaXRlX2J5dGVzIiwid3JpdGVfc3RyaW5nIiwicmVzZXQiLCJCdWZmZXJXcml0ZXJfIiwid3JpdGVTdHJpbmdCdWZmZXIiLCJ3cml0ZUJ5dGVzQnVmZmVyIiwid3JpdGVCeXRlc0J1ZmZlcl9zZXQiLCJ3cml0ZUJ5dGVzQnVmZmVyX2NvcHkiLCJjb3B5Iiwid3JpdGVfYnl0ZXNfYnVmZmVyIiwid3JpdGVfc3RyaW5nX2J1ZmZlciIsImJ5dGVMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9