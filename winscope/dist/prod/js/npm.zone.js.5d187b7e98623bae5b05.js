/*! For license information please see npm.zone.js.5d187b7e98623bae5b05.js.LICENSE.txt */
"use strict";(self.webpackChunkwinscope=self.webpackChunkwinscope||[]).push([[529],{8216:(e,t,n)=>{!function(e){const t=e.performance;function mark(e){t&&t.mark&&t.mark(e)}function performanceMeasure(e,n){t&&t.measure&&t.measure(e,n)}mark("Zone");const n=e.__Zone_symbol_prefix||"__zone_symbol__";function __symbol__(e){return n+e}const o=!0===e[__symbol__("forceDuplicateZoneCheck")];if(e.Zone){if(o||"function"!=typeof e.Zone.__symbol__)throw new Error("Zone already loaded.");return e.Zone}class Zone{constructor(e,t){this._parent=e,this._name=t?t.name||"unnamed":"<root>",this._properties=t&&t.properties||{},this._zoneDelegate=new _ZoneDelegate(this,this._parent&&this._parent._zoneDelegate,t)}static assertZonePatched(){if(e.Promise!==v.ZoneAwarePromise)throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` has been overwritten.\nMost likely cause is that a Promise polyfill has been loaded after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. If you must load one, do so before loading zone.js.)")}static get root(){let e=Zone.current;for(;e.parent;)e=e.parent;return e}static get current(){return E.zone}static get currentTask(){return w}static __load_patch(t,n,r=!1){if(v.hasOwnProperty(t)){if(!r&&o)throw Error("Already loaded patch: "+t)}else if(!e["__Zone_disable_"+t]){const o="Zone:"+t;mark(o),v[t]=n(e,Zone,b),performanceMeasure(o,o)}}get parent(){return this._parent}get name(){return this._name}get(e){const t=this.getZoneWith(e);if(t)return t._properties[e]}getZoneWith(e){let t=this;for(;t;){if(t._properties.hasOwnProperty(e))return t;t=t._parent}return null}fork(e){if(!e)throw new Error("ZoneSpec required!");return this._zoneDelegate.fork(this,e)}wrap(e,t){if("function"!=typeof e)throw new Error("Expecting function got: "+e);const n=this._zoneDelegate.intercept(this,e,t),o=this;return function(){return o.runGuarded(n,this,arguments,t)}}run(e,t,n,o){E={parent:E,zone:this};try{return this._zoneDelegate.invoke(this,e,t,n,o)}finally{E=E.parent}}runGuarded(e,t=null,n,o){E={parent:E,zone:this};try{try{return this._zoneDelegate.invoke(this,e,t,n,o)}catch(e){if(this._zoneDelegate.handleError(this,e))throw e}}finally{E=E.parent}}runTask(e,t,n){if(e.zone!=this)throw new Error("A task can only be run in the zone of creation! (Creation: "+(e.zone||u).name+"; Execution: "+this.name+")");if(e.state===p&&(e.type===y||e.type===T))return;const o=e.state!=_;o&&e._transitionTo(_,d),e.runCount++;const r=w;w=e,E={parent:E,zone:this};try{e.type==T&&e.data&&!e.data.isPeriodic&&(e.cancelFn=void 0);try{return this._zoneDelegate.invokeTask(this,e,t,n)}catch(e){if(this._zoneDelegate.handleError(this,e))throw e}}finally{e.state!==p&&e.state!==g&&(e.type==y||e.data&&e.data.isPeriodic?o&&e._transitionTo(d,_):(e.runCount=0,this._updateTaskCount(e,-1),o&&e._transitionTo(p,_,p))),E=E.parent,w=r}}scheduleTask(e){if(e.zone&&e.zone!==this){let t=this;for(;t;){if(t===e.zone)throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${e.zone.name}`);t=t.parent}}e._transitionTo(f,p);const t=[];e._zoneDelegates=t,e._zone=this;try{e=this._zoneDelegate.scheduleTask(this,e)}catch(t){throw e._transitionTo(g,f,p),this._zoneDelegate.handleError(this,t),t}return e._zoneDelegates===t&&this._updateTaskCount(e,1),e.state==f&&e._transitionTo(d,f),e}scheduleMicroTask(e,t,n,o){return this.scheduleTask(new ZoneTask(m,e,t,n,o,void 0))}scheduleMacroTask(e,t,n,o,r){return this.scheduleTask(new ZoneTask(T,e,t,n,o,r))}scheduleEventTask(e,t,n,o,r){return this.scheduleTask(new ZoneTask(y,e,t,n,o,r))}cancelTask(e){if(e.zone!=this)throw new Error("A task can only be cancelled in the zone of creation! (Creation: "+(e.zone||u).name+"; Execution: "+this.name+")");e._transitionTo(k,d,_);try{this._zoneDelegate.cancelTask(this,e)}catch(t){throw e._transitionTo(g,k),this._zoneDelegate.handleError(this,t),t}return this._updateTaskCount(e,-1),e._transitionTo(p,k),e.runCount=0,e}_updateTaskCount(e,t){const n=e._zoneDelegates;-1==t&&(e._zoneDelegates=null);for(let o=0;o<n.length;o++)n[o]._updateTaskCount(e.type,t)}}Zone.__symbol__=__symbol__;const r={name:"",onHasTask:(e,t,n,o)=>e.hasTask(n,o),onScheduleTask:(e,t,n,o)=>e.scheduleTask(n,o),onInvokeTask:(e,t,n,o,r,s)=>e.invokeTask(n,o,r,s),onCancelTask:(e,t,n,o)=>e.cancelTask(n,o)};class _ZoneDelegate{constructor(e,t,n){this._taskCounts={microTask:0,macroTask:0,eventTask:0},this.zone=e,this._parentDelegate=t,this._forkZS=n&&(n&&n.onFork?n:t._forkZS),this._forkDlgt=n&&(n.onFork?t:t._forkDlgt),this._forkCurrZone=n&&(n.onFork?this.zone:t._forkCurrZone),this._interceptZS=n&&(n.onIntercept?n:t._interceptZS),this._interceptDlgt=n&&(n.onIntercept?t:t._interceptDlgt),this._interceptCurrZone=n&&(n.onIntercept?this.zone:t._interceptCurrZone),this._invokeZS=n&&(n.onInvoke?n:t._invokeZS),this._invokeDlgt=n&&(n.onInvoke?t:t._invokeDlgt),this._invokeCurrZone=n&&(n.onInvoke?this.zone:t._invokeCurrZone),this._handleErrorZS=n&&(n.onHandleError?n:t._handleErrorZS),this._handleErrorDlgt=n&&(n.onHandleError?t:t._handleErrorDlgt),this._handleErrorCurrZone=n&&(n.onHandleError?this.zone:t._handleErrorCurrZone),this._scheduleTaskZS=n&&(n.onScheduleTask?n:t._scheduleTaskZS),this._scheduleTaskDlgt=n&&(n.onScheduleTask?t:t._scheduleTaskDlgt),this._scheduleTaskCurrZone=n&&(n.onScheduleTask?this.zone:t._scheduleTaskCurrZone),this._invokeTaskZS=n&&(n.onInvokeTask?n:t._invokeTaskZS),this._invokeTaskDlgt=n&&(n.onInvokeTask?t:t._invokeTaskDlgt),this._invokeTaskCurrZone=n&&(n.onInvokeTask?this.zone:t._invokeTaskCurrZone),this._cancelTaskZS=n&&(n.onCancelTask?n:t._cancelTaskZS),this._cancelTaskDlgt=n&&(n.onCancelTask?t:t._cancelTaskDlgt),this._cancelTaskCurrZone=n&&(n.onCancelTask?this.zone:t._cancelTaskCurrZone),this._hasTaskZS=null,this._hasTaskDlgt=null,this._hasTaskDlgtOwner=null,this._hasTaskCurrZone=null;const o=n&&n.onHasTask,s=t&&t._hasTaskZS;(o||s)&&(this._hasTaskZS=o?n:r,this._hasTaskDlgt=t,this._hasTaskDlgtOwner=this,this._hasTaskCurrZone=e,n.onScheduleTask||(this._scheduleTaskZS=r,this._scheduleTaskDlgt=t,this._scheduleTaskCurrZone=this.zone),n.onInvokeTask||(this._invokeTaskZS=r,this._invokeTaskDlgt=t,this._invokeTaskCurrZone=this.zone),n.onCancelTask||(this._cancelTaskZS=r,this._cancelTaskDlgt=t,this._cancelTaskCurrZone=this.zone))}fork(e,t){return this._forkZS?this._forkZS.onFork(this._forkDlgt,this.zone,e,t):new Zone(e,t)}intercept(e,t,n){return this._interceptZS?this._interceptZS.onIntercept(this._interceptDlgt,this._interceptCurrZone,e,t,n):t}invoke(e,t,n,o,r){return this._invokeZS?this._invokeZS.onInvoke(this._invokeDlgt,this._invokeCurrZone,e,t,n,o,r):t.apply(n,o)}handleError(e,t){return!this._handleErrorZS||this._handleErrorZS.onHandleError(this._handleErrorDlgt,this._handleErrorCurrZone,e,t)}scheduleTask(e,t){let n=t;if(this._scheduleTaskZS)this._hasTaskZS&&n._zoneDelegates.push(this._hasTaskDlgtOwner),n=this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt,this._scheduleTaskCurrZone,e,t),n||(n=t);else if(t.scheduleFn)t.scheduleFn(t);else{if(t.type!=m)throw new Error("Task is missing scheduleFn.");scheduleMicroTask(t)}return n}invokeTask(e,t,n,o){return this._invokeTaskZS?this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt,this._invokeTaskCurrZone,e,t,n,o):t.callback.apply(n,o)}cancelTask(e,t){let n;if(this._cancelTaskZS)n=this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt,this._cancelTaskCurrZone,e,t);else{if(!t.cancelFn)throw Error("Task is not cancelable");n=t.cancelFn(t)}return n}hasTask(e,t){try{this._hasTaskZS&&this._hasTaskZS.onHasTask(this._hasTaskDlgt,this._hasTaskCurrZone,e,t)}catch(t){this.handleError(e,t)}}_updateTaskCount(e,t){const n=this._taskCounts,o=n[e],r=n[e]=o+t;if(r<0)throw new Error("More tasks executed then were scheduled.");if(0==o||0==r){const t={microTask:n.microTask>0,macroTask:n.macroTask>0,eventTask:n.eventTask>0,change:e};this.hasTask(this.zone,t)}}}class ZoneTask{constructor(t,n,o,r,s,a){if(this._zone=null,this.runCount=0,this._zoneDelegates=null,this._state="notScheduled",this.type=t,this.source=n,this.data=r,this.scheduleFn=s,this.cancelFn=a,!o)throw new Error("callback is not defined");this.callback=o;const i=this;t===y&&r&&r.useG?this.invoke=ZoneTask.invokeTask:this.invoke=function(){return ZoneTask.invokeTask.call(e,i,this,arguments)}}static invokeTask(e,t,n){e||(e=this),Z++;try{return e.runCount++,e.zone.runTask(e,t,n)}finally{1==Z&&drainMicroTaskQueue(),Z--}}get zone(){return this._zone}get state(){return this._state}cancelScheduleRequest(){this._transitionTo(p,f)}_transitionTo(e,t,n){if(this._state!==t&&this._state!==n)throw new Error(`${this.type} '${this.source}': can not transition to '${e}', expecting state '${t}'${n?" or '"+n+"'":""}, was '${this._state}'.`);this._state=e,e==p&&(this._zoneDelegates=null)}toString(){return this.data&&void 0!==this.data.handleId?this.data.handleId.toString():Object.prototype.toString.call(this)}toJSON(){return{type:this.type,state:this.state,source:this.source,zone:this.zone.name,runCount:this.runCount}}}const s=__symbol__("setTimeout"),a=__symbol__("Promise"),i=__symbol__("then");let c,l=[],h=!1;function nativeScheduleMicroTask(t){if(c||e[a]&&(c=e[a].resolve(0)),c){let e=c[i];e||(e=c.then),e.call(c,t)}else e[s](t,0)}function scheduleMicroTask(e){0===Z&&0===l.length&&nativeScheduleMicroTask(drainMicroTaskQueue),e&&l.push(e)}function drainMicroTaskQueue(){if(!h){for(h=!0;l.length;){const e=l;l=[];for(let t=0;t<e.length;t++){const n=e[t];try{n.zone.runTask(n,null,null)}catch(e){b.onUnhandledError(e)}}}b.microtaskDrainDone(),h=!1}}const u={name:"NO ZONE"},p="notScheduled",f="scheduling",d="scheduled",_="running",k="canceling",g="unknown",m="microTask",T="macroTask",y="eventTask",v={},b={symbol:__symbol__,currentZoneFrame:()=>E,onUnhandledError:noop,microtaskDrainDone:noop,scheduleMicroTask,showUncaughtError:()=>!Zone[__symbol__("ignoreConsoleErrorUncaughtError")],patchEventTarget:()=>[],patchOnProperties:noop,patchMethod:()=>noop,bindArguments:()=>[],patchThen:()=>noop,patchMacroTask:()=>noop,patchEventPrototype:()=>noop,isIEOrEdge:()=>!1,getGlobalObjects:()=>{},ObjectDefineProperty:()=>noop,ObjectGetOwnPropertyDescriptor:()=>{},ObjectCreate:()=>{},ArraySlice:()=>[],patchClass:()=>noop,wrapWithCurrentZone:()=>noop,filterProperties:()=>[],attachOriginToPatched:()=>noop,_redefineProperty:()=>noop,patchCallbacks:()=>noop,nativeScheduleMicroTask};let E={parent:null,zone:new Zone(null,null)},w=null,Z=0;function noop(){}performanceMeasure("Zone","Zone"),e.Zone=Zone}("undefined"!=typeof window&&window||"undefined"!=typeof self&&self||n.g);const o=Object.getOwnPropertyDescriptor,r=Object.defineProperty,s=Object.getPrototypeOf,a=Object.create,i=Array.prototype.slice,c="addEventListener",l="removeEventListener",h=Zone.__symbol__(c),u=Zone.__symbol__(l),p="true",f="false",d=Zone.__symbol__("");function wrapWithCurrentZone(e,t){return Zone.current.wrap(e,t)}function scheduleMacroTaskWithCurrentZone(e,t,n,o,r){return Zone.current.scheduleMacroTask(e,t,n,o,r)}const _=Zone.__symbol__,k="undefined"!=typeof window,g=k?window:void 0,m=k&&g||"object"==typeof self&&self||n.g,T="removeAttribute";function bindArguments(e,t){for(let n=e.length-1;n>=0;n--)"function"==typeof e[n]&&(e[n]=wrapWithCurrentZone(e[n],t+"_"+n));return e}function isPropertyWritable(e){return!e||!1!==e.writable&&!("function"==typeof e.get&&void 0===e.set)}const y="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope,v=!("nw"in m)&&void 0!==m.process&&"[object process]"==={}.toString.call(m.process),b=!v&&!y&&!(!k||!g.HTMLElement),E=void 0!==m.process&&"[object process]"==={}.toString.call(m.process)&&!y&&!(!k||!g.HTMLElement),w={},wrapFn=function(e){if(!(e=e||m.event))return;let t=w[e.type];t||(t=w[e.type]=_("ON_PROPERTY"+e.type));const n=this||e.target||m,o=n[t];let r;if(b&&n===g&&"error"===e.type){const t=e;r=o&&o.call(this,t.message,t.filename,t.lineno,t.colno,t.error),!0===r&&e.preventDefault()}else r=o&&o.apply(this,arguments),null==r||r||e.preventDefault();return r};function patchProperty(e,t,n){let s=o(e,t);if(!s&&n){o(n,t)&&(s={enumerable:!0,configurable:!0})}if(!s||!s.configurable)return;const a=_("on"+t+"patched");if(e.hasOwnProperty(a)&&e[a])return;delete s.writable,delete s.value;const i=s.get,c=s.set,l=t.slice(2);let h=w[l];h||(h=w[l]=_("ON_PROPERTY"+l)),s.set=function(t){let n=this;if(n||e!==m||(n=m),!n)return;"function"==typeof n[h]&&n.removeEventListener(l,wrapFn),c&&c.call(n,null),n[h]=t,"function"==typeof t&&n.addEventListener(l,wrapFn,!1)},s.get=function(){let n=this;if(n||e!==m||(n=m),!n)return null;const o=n[h];if(o)return o;if(i){let e=i.call(this);if(e)return s.set.call(this,e),"function"==typeof n[T]&&n.removeAttribute(t),e}return null},r(e,t,s),e[a]=!0}function patchOnProperties(e,t,n){if(t)for(let o=0;o<t.length;o++)patchProperty(e,"on"+t[o],n);else{const t=[];for(const n in e)"on"==n.slice(0,2)&&t.push(n);for(let o=0;o<t.length;o++)patchProperty(e,t[o],n)}}const Z=_("originalInstance");function patchClass(e){const t=m[e];if(!t)return;m[_(e)]=t,m[e]=function(){const n=bindArguments(arguments,e);switch(n.length){case 0:this[Z]=new t;break;case 1:this[Z]=new t(n[0]);break;case 2:this[Z]=new t(n[0],n[1]);break;case 3:this[Z]=new t(n[0],n[1],n[2]);break;case 4:this[Z]=new t(n[0],n[1],n[2],n[3]);break;default:throw new Error("Arg list too long.")}},attachOriginToPatched(m[e],t);const n=new t((function(){}));let o;for(o in n)"XMLHttpRequest"===e&&"responseBlob"===o||function(t){"function"==typeof n[t]?m[e].prototype[t]=function(){return this[Z][t].apply(this[Z],arguments)}:r(m[e].prototype,t,{set:function(n){"function"==typeof n?(this[Z][t]=wrapWithCurrentZone(n,e+"."+t),attachOriginToPatched(this[Z][t],n)):this[Z][t]=n},get:function(){return this[Z][t]}})}(o);for(o in t)"prototype"!==o&&t.hasOwnProperty(o)&&(m[e][o]=t[o])}function patchMethod(e,t,n){let r=e;for(;r&&!r.hasOwnProperty(t);)r=s(r);!r&&e[t]&&(r=e);const a=_(t);let i=null;if(r&&(!(i=r[a])||!r.hasOwnProperty(a))){i=r[a]=r[t];if(isPropertyWritable(r&&o(r,t))){const e=n(i,a,t);r[t]=function(){return e(this,arguments)},attachOriginToPatched(r[t],i)}}return i}function patchMacroTask(e,t,n){let o=null;function scheduleTask(e){const t=e.data;return t.args[t.cbIdx]=function(){e.invoke.apply(this,arguments)},o.apply(t.target,t.args),e}o=patchMethod(e,t,(e=>function(t,o){const r=n(t,o);return r.cbIdx>=0&&"function"==typeof o[r.cbIdx]?scheduleMacroTaskWithCurrentZone(r.name,o[r.cbIdx],r,scheduleTask):e.apply(t,o)}))}function attachOriginToPatched(e,t){e[_("OriginalDelegate")]=t}let P=!1,S=!1;function isIE(){try{const e=g.navigator.userAgent;if(-1!==e.indexOf("MSIE ")||-1!==e.indexOf("Trident/"))return!0}catch(e){}return!1}function isIEOrEdge(){if(P)return S;P=!0;try{const e=g.navigator.userAgent;-1===e.indexOf("MSIE ")&&-1===e.indexOf("Trident/")&&-1===e.indexOf("Edge/")||(S=!0)}catch(e){}return S}Zone.__load_patch("ZoneAwarePromise",((e,t,n)=>{const o=Object.getOwnPropertyDescriptor,r=Object.defineProperty;const s=n.symbol,a=[],i=!0===e[s("DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION")],c=s("Promise"),l=s("then"),h="__creationTrace__";n.onUnhandledError=e=>{if(n.showUncaughtError()){const t=e&&e.rejection;t?console.error("Unhandled Promise rejection:",t instanceof Error?t.message:t,"; Zone:",e.zone.name,"; Task:",e.task&&e.task.source,"; Value:",t,t instanceof Error?t.stack:void 0):console.error(e)}},n.microtaskDrainDone=()=>{for(;a.length;){const e=a.shift();try{e.zone.runGuarded((()=>{if(e.throwOriginal)throw e.rejection;throw e}))}catch(e){handleUnhandledRejection(e)}}};const u=s("unhandledPromiseRejectionHandler");function handleUnhandledRejection(e){n.onUnhandledError(e);try{const n=t[u];"function"==typeof n&&n.call(this,e)}catch(e){}}function isThenable(e){return e&&e.then}function forwardResolution(e){return e}function forwardRejection(e){return ZoneAwarePromise.reject(e)}const p=s("state"),f=s("value"),d=s("finally"),_=s("parentPromiseValue"),k=s("parentPromiseState"),g="Promise.then",m=null,T=!0,y=!1,v=0;function makeResolver(e,t){return n=>{try{resolvePromise(e,t,n)}catch(t){resolvePromise(e,!1,t)}}}const once=function(){let e=!1;return function wrapper(t){return function(){e||(e=!0,t.apply(null,arguments))}}},b="Promise resolved with itself",E=s("currentTaskTrace");function resolvePromise(e,o,s){const c=once();if(e===s)throw new TypeError(b);if(e[p]===m){let l=null;try{"object"!=typeof s&&"function"!=typeof s||(l=s&&s.then)}catch(t){return c((()=>{resolvePromise(e,!1,t)}))(),e}if(o!==y&&s instanceof ZoneAwarePromise&&s.hasOwnProperty(p)&&s.hasOwnProperty(f)&&s[p]!==m)clearRejectedNoCatch(s),resolvePromise(e,s[p],s[f]);else if(o!==y&&"function"==typeof l)try{l.call(s,c(makeResolver(e,o)),c(makeResolver(e,!1)))}catch(t){c((()=>{resolvePromise(e,!1,t)}))()}else{e[p]=o;const c=e[f];if(e[f]=s,e[d]===d&&o===T&&(e[p]=e[k],e[f]=e[_]),o===y&&s instanceof Error){const e=t.currentTask&&t.currentTask.data&&t.currentTask.data[h];e&&r(s,E,{configurable:!0,enumerable:!1,writable:!0,value:e})}for(let t=0;t<c.length;)scheduleResolveOrReject(e,c[t++],c[t++],c[t++],c[t++]);if(0==c.length&&o==y){e[p]=v;let o=s;try{throw new Error("Uncaught (in promise): "+function readableObjectToString(e){if(e&&e.toString===Object.prototype.toString){return(e.constructor&&e.constructor.name||"")+": "+JSON.stringify(e)}return e?e.toString():Object.prototype.toString.call(e)}(s)+(s&&s.stack?"\n"+s.stack:""))}catch(e){o=e}i&&(o.throwOriginal=!0),o.rejection=s,o.promise=e,o.zone=t.current,o.task=t.currentTask,a.push(o),n.scheduleMicroTask()}}}return e}const w=s("rejectionHandledHandler");function clearRejectedNoCatch(e){if(e[p]===v){try{const n=t[w];n&&"function"==typeof n&&n.call(this,{rejection:e[f],promise:e})}catch(e){}e[p]=y;for(let t=0;t<a.length;t++)e===a[t].promise&&a.splice(t,1)}}function scheduleResolveOrReject(e,t,n,o,r){clearRejectedNoCatch(e);const s=e[p],a=s?"function"==typeof o?o:forwardResolution:"function"==typeof r?r:forwardRejection;t.scheduleMicroTask(g,(()=>{try{const o=e[f],r=!!n&&d===n[d];r&&(n[_]=o,n[k]=s);const i=t.run(a,void 0,r&&a!==forwardRejection&&a!==forwardResolution?[]:[o]);resolvePromise(n,!0,i)}catch(e){resolvePromise(n,!1,e)}}),n)}const noop=function(){},Z=e.AggregateError;class ZoneAwarePromise{static toString(){return"function ZoneAwarePromise() { [native code] }"}static resolve(e){return resolvePromise(new this(null),T,e)}static reject(e){return resolvePromise(new this(null),y,e)}static any(e){if(!e||"function"!=typeof e[Symbol.iterator])return Promise.reject(new Z([],"All promises were rejected"));const t=[];let n=0;try{for(let o of e)n++,t.push(ZoneAwarePromise.resolve(o))}catch(e){return Promise.reject(new Z([],"All promises were rejected"))}if(0===n)return Promise.reject(new Z([],"All promises were rejected"));let o=!1;const r=[];return new ZoneAwarePromise(((e,s)=>{for(let a=0;a<t.length;a++)t[a].then((t=>{o||(o=!0,e(t))}),(e=>{r.push(e),n--,0===n&&(o=!0,s(new Z(r,"All promises were rejected")))}))}))}static race(e){let t,n,o=new this(((e,o)=>{t=e,n=o}));function onResolve(e){t(e)}function onReject(e){n(e)}for(let t of e)isThenable(t)||(t=this.resolve(t)),t.then(onResolve,onReject);return o}static all(e){return ZoneAwarePromise.allWithCallback(e)}static allSettled(e){return(this&&this.prototype instanceof ZoneAwarePromise?this:ZoneAwarePromise).allWithCallback(e,{thenCallback:e=>({status:"fulfilled",value:e}),errorCallback:e=>({status:"rejected",reason:e})})}static allWithCallback(e,t){let n,o,r=new this(((e,t)=>{n=e,o=t})),s=2,a=0;const i=[];for(let r of e){isThenable(r)||(r=this.resolve(r));const e=a;try{r.then((o=>{i[e]=t?t.thenCallback(o):o,s--,0===s&&n(i)}),(r=>{t?(i[e]=t.errorCallback(r),s--,0===s&&n(i)):o(r)}))}catch(e){o(e)}s++,a++}return s-=2,0===s&&n(i),r}constructor(e){const t=this;if(!(t instanceof ZoneAwarePromise))throw new Error("Must be an instanceof Promise.");t[p]=m,t[f]=[];try{const n=once();e&&e(n(makeResolver(t,T)),n(makeResolver(t,y)))}catch(e){resolvePromise(t,!1,e)}}get[Symbol.toStringTag](){return"Promise"}get[Symbol.species](){return ZoneAwarePromise}then(e,n){var o;let r=null===(o=this.constructor)||void 0===o?void 0:o[Symbol.species];r&&"function"==typeof r||(r=this.constructor||ZoneAwarePromise);const s=new r(noop),a=t.current;return this[p]==m?this[f].push(a,s,e,n):scheduleResolveOrReject(this,a,s,e,n),s}catch(e){return this.then(null,e)}finally(e){var n;let o=null===(n=this.constructor)||void 0===n?void 0:n[Symbol.species];o&&"function"==typeof o||(o=ZoneAwarePromise);const r=new o(noop);r[d]=d;const s=t.current;return this[p]==m?this[f].push(s,r,e,e):scheduleResolveOrReject(this,s,r,e,e),r}}ZoneAwarePromise.resolve=ZoneAwarePromise.resolve,ZoneAwarePromise.reject=ZoneAwarePromise.reject,ZoneAwarePromise.race=ZoneAwarePromise.race,ZoneAwarePromise.all=ZoneAwarePromise.all;const P=e[c]=e.Promise;e.Promise=ZoneAwarePromise;const S=s("thenPatched");function patchThen(e){const t=e.prototype,n=o(t,"then");if(n&&(!1===n.writable||!n.configurable))return;const r=t.then;t[l]=r,e.prototype.then=function(e,t){return new ZoneAwarePromise(((e,t)=>{r.call(this,e,t)})).then(e,t)},e[S]=!0}return n.patchThen=patchThen,P&&(patchThen(P),patchMethod(e,"fetch",(e=>function zoneify(e){return function(t,n){let o=e.apply(t,n);if(o instanceof ZoneAwarePromise)return o;let r=o.constructor;return r[S]||patchThen(r),o}}(e)))),Promise[t.__symbol__("uncaughtPromiseErrors")]=a,ZoneAwarePromise})),Zone.__load_patch("toString",(e=>{const t=Function.prototype.toString,n=_("OriginalDelegate"),o=_("Promise"),r=_("Error"),s=function toString(){if("function"==typeof this){const s=this[n];if(s)return"function"==typeof s?t.call(s):Object.prototype.toString.call(s);if(this===Promise){const n=e[o];if(n)return t.call(n)}if(this===Error){const n=e[r];if(n)return t.call(n)}}return t.call(this)};s[n]=t,Function.prototype.toString=s;const a=Object.prototype.toString;Object.prototype.toString=function(){return"function"==typeof Promise&&this instanceof Promise?"[object Promise]":a.call(this)}}));let O=!1;if("undefined"!=typeof window)try{const e=Object.defineProperty({},"passive",{get:function(){O=!0}});window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){O=!1}const C={useG:!0},D={},j={},R=new RegExp("^"+d+"(\\w+)(true|false)$"),M=_("propagationStopped");function prepareEventNames(e,t){const n=(t?t(e):e)+f,o=(t?t(e):e)+p,r=d+n,s=d+o;D[e]={},D[e][f]=r,D[e][p]=s}function patchEventTarget(e,t,n,o){const r=o&&o.add||c,a=o&&o.rm||l,i=o&&o.listeners||"eventListeners",h=o&&o.rmAll||"removeAllListeners",u=_(r),k="."+r+":",g="prependListener",m="."+g+":",invokeTask=function(e,t,n){if(e.isRemoved)return;const o=e.callback;let r;"object"==typeof o&&o.handleEvent&&(e.callback=e=>o.handleEvent(e),e.originalDelegate=o);try{e.invoke(e,t,[n])}catch(e){r=e}const s=e.options;if(s&&"object"==typeof s&&s.once){const o=e.originalDelegate?e.originalDelegate:e.callback;t[a].call(t,n.type,o,s)}return r};function globalCallback(n,o,r){if(!(o=o||e.event))return;const s=n||o.target||e,a=s[D[o.type][r?p:f]];if(a){const e=[];if(1===a.length){const t=invokeTask(a[0],s,o);t&&e.push(t)}else{const t=a.slice();for(let n=0;n<t.length&&(!o||!0!==o[M]);n++){const r=invokeTask(t[n],s,o);r&&e.push(r)}}if(1===e.length)throw e[0];for(let n=0;n<e.length;n++){const o=e[n];t.nativeScheduleMicroTask((()=>{throw o}))}}}const globalZoneAwareCallback=function(e){return globalCallback(this,e,!1)},globalZoneAwareCaptureCallback=function(e){return globalCallback(this,e,!0)};function patchEventTargetMethods(t,n){if(!t)return!1;let o=!0;n&&void 0!==n.useG&&(o=n.useG);const c=n&&n.vh;let l=!0;n&&void 0!==n.chkDup&&(l=n.chkDup);let T=!1;n&&void 0!==n.rt&&(T=n.rt);let y=t;for(;y&&!y.hasOwnProperty(r);)y=s(y);if(!y&&t[r]&&(y=t),!y)return!1;if(y[u])return!1;const b=n&&n.eventNameToString,E={},w=y[u]=y[r],Z=y[_(a)]=y[a],P=y[_(i)]=y[i],S=y[_(h)]=y[h];let M;n&&n.prepend&&(M=y[_(n.prepend)]=y[n.prepend]);const customSchedulePrepend=function(e){return M.call(E.target,E.eventName,e.invoke,E.options)},z=o?function(e){if(!E.isExisting)return w.call(E.target,E.eventName,E.capture?globalZoneAwareCaptureCallback:globalZoneAwareCallback,E.options)}:function(e){return w.call(E.target,E.eventName,e.invoke,E.options)},A=o?function(e){if(!e.isRemoved){const t=D[e.eventName];let n;t&&(n=t[e.capture?p:f]);const o=n&&e.target[n];if(o)for(let t=0;t<o.length;t++){if(o[t]===e){o.splice(t,1),e.isRemoved=!0,0===o.length&&(e.allRemoved=!0,e.target[n]=null);break}}}if(e.allRemoved)return Z.call(e.target,e.eventName,e.capture?globalZoneAwareCaptureCallback:globalZoneAwareCallback,e.options)}:function(e){return Z.call(e.target,e.eventName,e.invoke,e.options)},I=n&&n.diff?n.diff:function(e,t){const n=typeof t;return"function"===n&&e.callback===t||"object"===n&&e.originalDelegate===t},N=Zone[_("UNPATCHED_EVENTS")],L=e[_("PASSIVE_EVENTS")],makeAddListener=function(t,r,s,a,i=!1,h=!1){return function(){const u=this||e;let d=arguments[0];n&&n.transferEventName&&(d=n.transferEventName(d));let _=arguments[1];if(!_)return t.apply(this,arguments);if(v&&"uncaughtException"===d)return t.apply(this,arguments);let k=!1;if("function"!=typeof _){if(!_.handleEvent)return t.apply(this,arguments);k=!0}if(c&&!c(t,_,u,arguments))return;const g=O&&!!L&&-1!==L.indexOf(d),m=function buildEventListenerOptions(e,t){return!O&&"object"==typeof e&&e?!!e.capture:O&&t?"boolean"==typeof e?{capture:e,passive:!0}:e?"object"==typeof e&&!1!==e.passive?Object.assign(Object.assign({},e),{passive:!0}):e:{passive:!0}:e}(arguments[2],g);if(N)for(let e=0;e<N.length;e++)if(d===N[e])return g?t.call(u,d,_,m):t.apply(this,arguments);const T=!!m&&("boolean"==typeof m||m.capture),y=!(!m||"object"!=typeof m)&&m.once,w=Zone.current;let Z=D[d];Z||(prepareEventNames(d,b),Z=D[d]);const P=Z[T?p:f];let S,R=u[P],M=!1;if(R){if(M=!0,l)for(let e=0;e<R.length;e++)if(I(R[e],_))return}else R=u[P]=[];const z=u.constructor.name,A=j[z];A&&(S=A[d]),S||(S=z+r+(b?b(d):d)),E.options=m,y&&(E.options.once=!1),E.target=u,E.capture=T,E.eventName=d,E.isExisting=M;const H=o?C:void 0;H&&(H.taskData=E);const F=w.scheduleEventTask(S,_,H,s,a);return E.target=null,H&&(H.taskData=null),y&&(m.once=!0),(O||"boolean"!=typeof F.options)&&(F.options=m),F.target=u,F.capture=T,F.eventName=d,k&&(F.originalDelegate=_),h?R.unshift(F):R.push(F),i?u:void 0}};return y[r]=makeAddListener(w,k,z,A,T),M&&(y[g]=makeAddListener(M,m,customSchedulePrepend,A,T,!0)),y[a]=function(){const t=this||e;let o=arguments[0];n&&n.transferEventName&&(o=n.transferEventName(o));const r=arguments[2],s=!!r&&("boolean"==typeof r||r.capture),a=arguments[1];if(!a)return Z.apply(this,arguments);if(c&&!c(Z,a,t,arguments))return;const i=D[o];let l;i&&(l=i[s?p:f]);const h=l&&t[l];if(h)for(let e=0;e<h.length;e++){const n=h[e];if(I(n,a)){if(h.splice(e,1),n.isRemoved=!0,0===h.length&&(n.allRemoved=!0,t[l]=null,"string"==typeof o)){t[d+"ON_PROPERTY"+o]=null}return n.zone.cancelTask(n),T?t:void 0}}return Z.apply(this,arguments)},y[i]=function(){const t=this||e;let o=arguments[0];n&&n.transferEventName&&(o=n.transferEventName(o));const r=[],s=findEventTasks(t,b?b(o):o);for(let e=0;e<s.length;e++){const t=s[e];let n=t.originalDelegate?t.originalDelegate:t.callback;r.push(n)}return r},y[h]=function(){const t=this||e;let o=arguments[0];if(o){n&&n.transferEventName&&(o=n.transferEventName(o));const e=D[o];if(e){const n=e[f],r=e[p],s=t[n],i=t[r];if(s){const e=s.slice();for(let t=0;t<e.length;t++){const n=e[t];let r=n.originalDelegate?n.originalDelegate:n.callback;this[a].call(this,o,r,n.options)}}if(i){const e=i.slice();for(let t=0;t<e.length;t++){const n=e[t];let r=n.originalDelegate?n.originalDelegate:n.callback;this[a].call(this,o,r,n.options)}}}}else{const e=Object.keys(t);for(let t=0;t<e.length;t++){const n=e[t],o=R.exec(n);let r=o&&o[1];r&&"removeListener"!==r&&this[h].call(this,r)}this[h].call(this,"removeListener")}if(T)return this},attachOriginToPatched(y[r],w),attachOriginToPatched(y[a],Z),S&&attachOriginToPatched(y[h],S),P&&attachOriginToPatched(y[i],P),!0}let T=[];for(let e=0;e<n.length;e++)T[e]=patchEventTargetMethods(n[e],o);return T}function findEventTasks(e,t){if(!t){const n=[];for(let o in e){const r=R.exec(o);let s=r&&r[1];if(s&&(!t||s===t)){const t=e[o];if(t)for(let e=0;e<t.length;e++)n.push(t[e])}}return n}let n=D[t];n||(prepareEventNames(t),n=D[t]);const o=e[n[f]],r=e[n[p]];return o?r?o.concat(r):o.slice():r?r.slice():[]}function patchEventPrototype(e,t){const n=e.Event;n&&n.prototype&&t.patchMethod(n.prototype,"stopImmediatePropagation",(e=>function(t,n){t[M]=!0,e&&e.apply(t,n)}))}function patchCallbacks(e,t,n,o,r){const s=Zone.__symbol__(o);if(t[s])return;const a=t[s]=t[o];t[o]=function(s,i,c){return i&&i.prototype&&r.forEach((function(t){const r=`${n}.${o}::`+t,s=i.prototype;try{if(s.hasOwnProperty(t)){const n=e.ObjectGetOwnPropertyDescriptor(s,t);n&&n.value?(n.value=e.wrapWithCurrentZone(n.value,r),e._redefineProperty(i.prototype,t,n)):s[t]&&(s[t]=e.wrapWithCurrentZone(s[t],r))}else s[t]&&(s[t]=e.wrapWithCurrentZone(s[t],r))}catch(e){}})),a.call(t,s,i,c)},e.attachOriginToPatched(t[o],a)}function filterProperties(e,t,n){if(!n||0===n.length)return t;const o=n.filter((t=>t.target===e));if(!o||0===o.length)return t;const r=o[0].ignoreProperties;return t.filter((e=>-1===r.indexOf(e)))}function patchFilteredProperties(e,t,n,o){if(!e)return;patchOnProperties(e,filterProperties(e,t,n),o)}function getOnEventNames(e){return Object.getOwnPropertyNames(e).filter((e=>e.startsWith("on")&&e.length>2)).map((e=>e.substring(2)))}function propertyDescriptorPatch(e,t){if(v&&!E)return;if(Zone[e.symbol("patchEvents")])return;const n=t.__Zone_ignore_on_properties;let o=[];if(b){const e=window;o=o.concat(["Document","SVGElement","Element","HTMLElement","HTMLBodyElement","HTMLMediaElement","HTMLFrameSetElement","HTMLFrameElement","HTMLIFrameElement","HTMLMarqueeElement","Worker"]);const t=isIE()?[{target:e,ignoreProperties:["error"]}]:[];patchFilteredProperties(e,getOnEventNames(e),n?n.concat(t):n,s(e))}o=o.concat(["XMLHttpRequest","XMLHttpRequestEventTarget","IDBIndex","IDBRequest","IDBOpenDBRequest","IDBDatabase","IDBTransaction","IDBCursor","WebSocket"]);for(let e=0;e<o.length;e++){const r=t[o[e]];r&&r.prototype&&patchFilteredProperties(r.prototype,getOnEventNames(r.prototype),n)}}Zone.__load_patch("util",((e,t,n)=>{const s=getOnEventNames(e);n.patchOnProperties=patchOnProperties,n.patchMethod=patchMethod,n.bindArguments=bindArguments,n.patchMacroTask=patchMacroTask;const h=t.__symbol__("BLACK_LISTED_EVENTS"),u=t.__symbol__("UNPATCHED_EVENTS");e[u]&&(e[h]=e[u]),e[h]&&(t[h]=t[u]=e[h]),n.patchEventPrototype=patchEventPrototype,n.patchEventTarget=patchEventTarget,n.isIEOrEdge=isIEOrEdge,n.ObjectDefineProperty=r,n.ObjectGetOwnPropertyDescriptor=o,n.ObjectCreate=a,n.ArraySlice=i,n.patchClass=patchClass,n.wrapWithCurrentZone=wrapWithCurrentZone,n.filterProperties=filterProperties,n.attachOriginToPatched=attachOriginToPatched,n._redefineProperty=Object.defineProperty,n.patchCallbacks=patchCallbacks,n.getGlobalObjects=()=>({globalSources:j,zoneSymbolEventNames:D,eventNames:s,isBrowser:b,isMix:E,isNode:v,TRUE_STR:p,FALSE_STR:f,ZONE_SYMBOL_PREFIX:d,ADD_EVENT_LISTENER_STR:c,REMOVE_EVENT_LISTENER_STR:l})}));const z=_("zoneTask");function patchTimer(e,t,n,o){let r=null,s=null;n+=o;const a={};function scheduleTask(t){const n=t.data;return n.args[0]=function(){return t.invoke.apply(this,arguments)},n.handleId=r.apply(e,n.args),t}function clearTask(t){return s.call(e,t.data.handleId)}r=patchMethod(e,t+=o,(n=>function(r,s){if("function"==typeof s[0]){const e={isPeriodic:"Interval"===o,delay:"Timeout"===o||"Interval"===o?s[1]||0:void 0,args:s},n=s[0];s[0]=function timer(){try{return n.apply(this,arguments)}finally{e.isPeriodic||("number"==typeof e.handleId?delete a[e.handleId]:e.handleId&&(e.handleId[z]=null))}};const r=scheduleMacroTaskWithCurrentZone(t,s[0],e,scheduleTask,clearTask);if(!r)return r;const i=r.data.handleId;return"number"==typeof i?a[i]=r:i&&(i[z]=r),i&&i.ref&&i.unref&&"function"==typeof i.ref&&"function"==typeof i.unref&&(r.ref=i.ref.bind(i),r.unref=i.unref.bind(i)),"number"==typeof i||i?i:r}return n.apply(e,s)})),s=patchMethod(e,n,(t=>function(n,o){const r=o[0];let s;"number"==typeof r?s=a[r]:(s=r&&r[z],s||(s=r)),s&&"string"==typeof s.type?"notScheduled"!==s.state&&(s.cancelFn&&s.data.isPeriodic||0===s.runCount)&&("number"==typeof r?delete a[r]:r&&(r[z]=null),s.zone.cancelTask(s)):t.apply(e,o)}))}function eventTargetPatch(e,t){if(Zone[t.symbol("patchEventTarget")])return;const{eventNames:n,zoneSymbolEventNames:o,TRUE_STR:r,FALSE_STR:s,ZONE_SYMBOL_PREFIX:a}=t.getGlobalObjects();for(let e=0;e<n.length;e++){const t=n[e],i=a+(t+s),c=a+(t+r);o[t]={},o[t][s]=i,o[t][r]=c}const i=e.EventTarget;return i&&i.prototype?(t.patchEventTarget(e,t,[i&&i.prototype]),!0):void 0}Zone.__load_patch("legacy",(e=>{const t=e[Zone.__symbol__("legacyPatch")];t&&t()})),Zone.__load_patch("queueMicrotask",((e,t,n)=>{n.patchMethod(e,"queueMicrotask",(e=>function(e,n){t.current.scheduleMicroTask("queueMicrotask",n[0])}))})),Zone.__load_patch("timers",(e=>{const t="set",n="clear";patchTimer(e,t,n,"Timeout"),patchTimer(e,t,n,"Interval"),patchTimer(e,t,n,"Immediate")})),Zone.__load_patch("requestAnimationFrame",(e=>{patchTimer(e,"request","cancel","AnimationFrame"),patchTimer(e,"mozRequest","mozCancel","AnimationFrame"),patchTimer(e,"webkitRequest","webkitCancel","AnimationFrame")})),Zone.__load_patch("blocking",((e,t)=>{const n=["alert","prompt","confirm"];for(let o=0;o<n.length;o++){patchMethod(e,n[o],((n,o,r)=>function(o,s){return t.current.run(n,e,s,r)}))}})),Zone.__load_patch("EventTarget",((e,t,n)=>{!function patchEvent(e,t){t.patchEventPrototype(e,t)}(e,n),eventTargetPatch(e,n);const o=e.XMLHttpRequestEventTarget;o&&o.prototype&&n.patchEventTarget(e,n,[o.prototype])})),Zone.__load_patch("MutationObserver",((e,t,n)=>{patchClass("MutationObserver"),patchClass("WebKitMutationObserver")})),Zone.__load_patch("IntersectionObserver",((e,t,n)=>{patchClass("IntersectionObserver")})),Zone.__load_patch("FileReader",((e,t,n)=>{patchClass("FileReader")})),Zone.__load_patch("on_property",((e,t,n)=>{propertyDescriptorPatch(n,e)})),Zone.__load_patch("customElements",((e,t,n)=>{!function patchCustomElements(e,t){const{isBrowser:n,isMix:o}=t.getGlobalObjects();if(!n&&!o||!e.customElements||!("customElements"in e))return;t.patchCallbacks(t,e.customElements,"customElements","define",["connectedCallback","disconnectedCallback","adoptedCallback","attributeChangedCallback"])}(e,n)})),Zone.__load_patch("XHR",((e,t)=>{!function patchXHR(e){const c=e.XMLHttpRequest;if(!c)return;const l=c.prototype;let p=l[h],f=l[u];if(!p){const t=e.XMLHttpRequestEventTarget;if(t){const e=t.prototype;p=e[h],f=e[u]}}const d="readystatechange",k="scheduled";function scheduleTask(e){const o=e.data,a=o.target;a[s]=!1,a[i]=!1;const c=a[r];p||(p=a[h],f=a[u]),c&&f.call(a,d,c);const l=a[r]=()=>{if(a.readyState===a.DONE)if(!o.aborted&&a[s]&&e.state===k){const n=a[t.__symbol__("loadfalse")];if(0!==a.status&&n&&n.length>0){const r=e.invoke;e.invoke=function(){const n=a[t.__symbol__("loadfalse")];for(let t=0;t<n.length;t++)n[t]===e&&n.splice(t,1);o.aborted||e.state!==k||r.call(e)},n.push(e)}else e.invoke()}else o.aborted||!1!==a[s]||(a[i]=!0)};p.call(a,d,l);return a[n]||(a[n]=e),y.apply(a,o.args),a[s]=!0,e}function placeholderCallback(){}function clearTask(e){const t=e.data;return t.aborted=!0,v.apply(t.target,t.args)}const g=patchMethod(l,"open",(()=>function(e,t){return e[o]=0==t[2],e[a]=t[1],g.apply(e,t)})),m=_("fetchTaskAborting"),T=_("fetchTaskScheduling"),y=patchMethod(l,"send",(()=>function(e,n){if(!0===t.current[T])return y.apply(e,n);if(e[o])return y.apply(e,n);{const t={target:e,url:e[a],isPeriodic:!1,args:n,aborted:!1},o=scheduleMacroTaskWithCurrentZone("XMLHttpRequest.send",placeholderCallback,t,scheduleTask,clearTask);e&&!0===e[i]&&!t.aborted&&o.state===k&&o.invoke()}})),v=patchMethod(l,"abort",(()=>function(e,o){const r=function findPendingTask(e){return e[n]}(e);if(r&&"string"==typeof r.type){if(null==r.cancelFn||r.data&&r.data.aborted)return;r.zone.cancelTask(r)}else if(!0===t.current[m])return v.apply(e,o)}))}(e);const n=_("xhrTask"),o=_("xhrSync"),r=_("xhrListener"),s=_("xhrScheduled"),a=_("xhrURL"),i=_("xhrErrorBeforeScheduled")})),Zone.__load_patch("geolocation",(e=>{e.navigator&&e.navigator.geolocation&&function patchPrototype(e,t){const n=e.constructor.name;for(let r=0;r<t.length;r++){const s=t[r],a=e[s];if(a){if(!isPropertyWritable(o(e,s)))continue;e[s]=(e=>{const patched=function(){return e.apply(this,bindArguments(arguments,n+"."+s))};return attachOriginToPatched(patched,e),patched})(a)}}}(e.navigator.geolocation,["getCurrentPosition","watchPosition"])})),Zone.__load_patch("PromiseRejectionEvent",((e,t)=>{function findPromiseRejectionHandler(t){return function(n){findEventTasks(e,t).forEach((o=>{const r=e.PromiseRejectionEvent;if(r){const e=new r(t,{promise:n.promise,reason:n.rejection});o.invoke(e)}}))}}e.PromiseRejectionEvent&&(t[_("unhandledPromiseRejectionHandler")]=findPromiseRejectionHandler("unhandledrejection"),t[_("rejectionHandledHandler")]=findPromiseRejectionHandler("rejectionhandled"))}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,