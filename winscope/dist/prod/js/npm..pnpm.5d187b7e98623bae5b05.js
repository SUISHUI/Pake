"use strict";(self.webpackChunkwinscope=self.webpackChunkwinscope||[]).push([[209],{6204:t=>{t.exports=function asPromise(t,e){var r=new Array(arguments.length-1),i=0,n=2,o=!0;for(;n<arguments.length;)r[i++]=arguments[n++];return new Promise((function executor(n,s){r[i]=function callback(t){if(o)if(o=!1,t)s(t);else{for(var e=new Array(arguments.length-1),r=0;r<e.length;)e[r++]=arguments[r];n.apply(null,e)}};try{t.apply(e||null,r)}catch(t){o&&(o=!1,s(t))}}))}},9508:(t,e)=>{var r=e;r.length=function length(t){var e=t.length;if(!e)return 0;for(var r=0;--e%4>1&&"="===t.charAt(e);)++r;return Math.ceil(3*t.length)/4-r};for(var i=new Array(64),n=new Array(123),o=0;o<64;)n[i[o]=o<26?o+65:o<52?o+71:o<62?o-4:o-59|43]=o++;r.encode=function encode(t,e,r){for(var n,o=null,s=[],u=0,f=0;e<r;){var a=t[e++];switch(f){case 0:s[u++]=i[a>>2],n=(3&a)<<4,f=1;break;case 1:s[u++]=i[n|a>>4],n=(15&a)<<2,f=2;break;case 2:s[u++]=i[n|a>>6],s[u++]=i[63&a],f=0}u>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,s)),u=0)}return f&&(s[u++]=i[n],s[u++]=61,1===f&&(s[u++]=61)),o?(u&&o.push(String.fromCharCode.apply(String,s.slice(0,u))),o.join("")):String.fromCharCode.apply(String,s.slice(0,u))};var s="invalid encoding";r.decode=function decode(t,e,r){for(var i,o=r,u=0,f=0;f<t.length;){var a=t.charCodeAt(f++);if(61===a&&u>1)break;if(void 0===(a=n[a]))throw Error(s);switch(u){case 0:i=a,u=1;break;case 1:e[r++]=i<<2|(48&a)>>4,i=a,u=2;break;case 2:e[r++]=(15&i)<<4|(60&a)>>2,i=a,u=3;break;case 3:e[r++]=(3&i)<<6|a,u=0}}if(1===u)throw Error(s);return r-o},r.test=function test(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)}},2106:t=>{function EventEmitter(){this._listeners={}}t.exports=EventEmitter,EventEmitter.prototype.on=function on(t,e,r){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:e,ctx:r||this}),this},EventEmitter.prototype.off=function off(t,e){if(void 0===t)this._listeners={};else if(void 0===e)this._listeners[t]=[];else for(var r=this._listeners[t],i=0;i<r.length;)r[i].fn===e?r.splice(i,1):++i;return this},EventEmitter.prototype.emit=function emit(t){var e=this._listeners[t];if(e){for(var r=[],i=1;i<arguments.length;)r.push(arguments[i++]);for(i=0;i<e.length;)e[i].fn.apply(e[i++].ctx,r)}return this}},2815:t=>{function factory(t){return"undefined"!=typeof Float32Array?function(){var e=new Float32Array([-0]),r=new Uint8Array(e.buffer),i=128===r[3];function writeFloat_f32_cpy(t,i,n){e[0]=t,i[n]=r[0],i[n+1]=r[1],i[n+2]=r[2],i[n+3]=r[3]}function writeFloat_f32_rev(t,i,n){e[0]=t,i[n]=r[3],i[n+1]=r[2],i[n+2]=r[1],i[n+3]=r[0]}function readFloat_f32_cpy(t,i){return r[0]=t[i],r[1]=t[i+1],r[2]=t[i+2],r[3]=t[i+3],e[0]}function readFloat_f32_rev(t,i){return r[3]=t[i],r[2]=t[i+1],r[1]=t[i+2],r[0]=t[i+3],e[0]}t.writeFloatLE=i?writeFloat_f32_cpy:writeFloat_f32_rev,t.writeFloatBE=i?writeFloat_f32_rev:writeFloat_f32_cpy,t.readFloatLE=i?readFloat_f32_cpy:readFloat_f32_rev,t.readFloatBE=i?readFloat_f32_rev:readFloat_f32_cpy}():function(){function writeFloat_ieee754(t,e,r,i){var n=e<0?1:0;if(n&&(e=-e),0===e)t(1/e>0?0:2147483648,r,i);else if(isNaN(e))t(2143289344,r,i);else if(e>34028234663852886e22)t((n<<31|2139095040)>>>0,r,i);else if(e<11754943508222875e-54)t((n<<31|Math.round(e/1401298464324817e-60))>>>0,r,i);else{var o=Math.floor(Math.log(e)/Math.LN2);t((n<<31|o+127<<23|8388607&Math.round(e*Math.pow(2,-o)*8388608))>>>0,r,i)}}function readFloat_ieee754(t,e,r){var i=t(e,r),n=2*(i>>31)+1,o=i>>>23&255,s=8388607&i;return 255===o?s?NaN:n*(1/0):0===o?1401298464324817e-60*n*s:n*Math.pow(2,o-150)*(s+8388608)}t.writeFloatLE=writeFloat_ieee754.bind(null,writeUintLE),t.writeFloatBE=writeFloat_ieee754.bind(null,writeUintBE),t.readFloatLE=readFloat_ieee754.bind(null,readUintLE),t.readFloatBE=readFloat_ieee754.bind(null,readUintBE)}(),"undefined"!=typeof Float64Array?function(){var e=new Float64Array([-0]),r=new Uint8Array(e.buffer),i=128===r[7];function writeDouble_f64_cpy(t,i,n){e[0]=t,i[n]=r[0],i[n+1]=r[1],i[n+2]=r[2],i[n+3]=r[3],i[n+4]=r[4],i[n+5]=r[5],i[n+6]=r[6],i[n+7]=r[7]}function writeDouble_f64_rev(t,i,n){e[0]=t,i[n]=r[7],i[n+1]=r[6],i[n+2]=r[5],i[n+3]=r[4],i[n+4]=r[3],i[n+5]=r[2],i[n+6]=r[1],i[n+7]=r[0]}function readDouble_f64_cpy(t,i){return r[0]=t[i],r[1]=t[i+1],r[2]=t[i+2],r[3]=t[i+3],r[4]=t[i+4],r[5]=t[i+5],r[6]=t[i+6],r[7]=t[i+7],e[0]}function readDouble_f64_rev(t,i){return r[7]=t[i],r[6]=t[i+1],r[5]=t[i+2],r[4]=t[i+3],r[3]=t[i+4],r[2]=t[i+5],r[1]=t[i+6],r[0]=t[i+7],e[0]}t.writeDoubleLE=i?writeDouble_f64_cpy:writeDouble_f64_rev,t.writeDoubleBE=i?writeDouble_f64_rev:writeDouble_f64_cpy,t.readDoubleLE=i?readDouble_f64_cpy:readDouble_f64_rev,t.readDoubleBE=i?readDouble_f64_rev:readDouble_f64_cpy}():function(){function writeDouble_ieee754(t,e,r,i,n,o){var s=i<0?1:0;if(s&&(i=-i),0===i)t(0,n,o+e),t(1/i>0?0:2147483648,n,o+r);else if(isNaN(i))t(0,n,o+e),t(2146959360,n,o+r);else if(i>17976931348623157e292)t(0,n,o+e),t((s<<31|2146435072)>>>0,n,o+r);else{var u;if(i<22250738585072014e-324)t((u=i/5e-324)>>>0,n,o+e),t((s<<31|u/4294967296)>>>0,n,o+r);else{var f=Math.floor(Math.log(i)/Math.LN2);1024===f&&(f=1023),t(4503599627370496*(u=i*Math.pow(2,-f))>>>0,n,o+e),t((s<<31|f+1023<<20|1048576*u&1048575)>>>0,n,o+r)}}}function readDouble_ieee754(t,e,r,i,n){var o=t(i,n+e),s=t(i,n+r),u=2*(s>>31)+1,f=s>>>20&2047,a=4294967296*(1048575&s)+o;return 2047===f?a?NaN:u*(1/0):0===f?5e-324*u*a:u*Math.pow(2,f-1075)*(a+4503599627370496)}t.writeDoubleLE=writeDouble_ieee754.bind(null,writeUintLE,0,4),t.writeDoubleBE=writeDouble_ieee754.bind(null,writeUintBE,4,0),t.readDoubleLE=readDouble_ieee754.bind(null,readUintLE,0,4),t.readDoubleBE=readDouble_ieee754.bind(null,readUintBE,4,0)}(),t}function writeUintLE(t,e,r){e[r]=255&t,e[r+1]=t>>>8&255,e[r+2]=t>>>16&255,e[r+3]=t>>>24}function writeUintBE(t,e,r){e[r]=t>>>24,e[r+1]=t>>>16&255,e[r+2]=t>>>8&255,e[r+3]=255&t}function readUintLE(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}function readUintBE(t,e){return(t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3])>>>0}t.exports=factory(factory)},5386:module=>{function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(t){}return null}module.exports=inquire},4242:t=>{t.exports=function pool(t,e,r){var i=r||8192,n=i>>>1,o=null,s=i;return function pool_alloc(r){if(r<1||r>n)return t(r);s+r>i&&(o=t(i),s=0);var u=e.call(o,s,s+=r);return 7&s&&(s=1+(7|s)),u}}},226:(t,e)=>{var r=e;r.length=function utf8_length(t){for(var e=0,r=0,i=0;i<t.length;++i)(r=t.charCodeAt(i))<128?e+=1:r<2048?e+=2:55296==(64512&r)&&56320==(64512&t.charCodeAt(i+1))?(++i,e+=4):e+=3;return e},r.read=function utf8_read(t,e,r){if(r-e<1)return"";for(var i,n=null,o=[],s=0;e<r;)(i=t[e++])<128?o[s++]=i:i>191&&i<224?o[s++]=(31&i)<<6|63&t[e++]:i>239&&i<365?(i=((7&i)<<18|(63&t[e++])<<12|(63&t[e++])<<6|63&t[e++])-65536,o[s++]=55296+(i>>10),o[s++]=56320+(1023&i)):o[s++]=(15&i)<<12|(63&t[e++])<<6|63&t[e++],s>8191&&((n||(n=[])).push(String.fromCharCode.apply(String,o)),s=0);return n?(s&&n.push(String.fromCharCode.apply(String,o.slice(0,s))),n.join("")):String.fromCharCode.apply(String,o.slice(0,s))},r.write=function utf8_write(t,e,r){for(var i,n,o=r,s=0;s<t.length;++s)(i=t.charCodeAt(s))<128?e[r++]=i:i<2048?(e[r++]=i>>6|192,e[r++]=63&i|128):55296==(64512&i)&&56320==(64512&(n=t.charCodeAt(s+1)))?(i=65536+((1023&i)<<10)+(1023&n),++s,e[r++]=i>>18|240,e[r++]=i>>12&63|128,e[r++]=i>>6&63|128,e[r++]=63&i|128):(e[r++]=i>>12|224,e[r++]=i>>6&63|128,e[r++]=63&i|128);return r-o}},6779:(t,e,r)=>{t.exports=r(4852)},4852:(t,e,r)=>{var i=e;function configure(){i.util._configure(),i.Writer._configure(i.BufferWriter),i.Reader._configure(i.BufferReader)}i.build="minimal",i.Writer=r(1162),i.BufferWriter=r(3371),i.Reader=r(906),i.BufferReader=r(3467),i.util=r(6709),i.rpc=r(3966),i.roots=r(4875),i.configure=configure,configure()},906:(t,e,r)=>{t.exports=Reader;var i,n=r(6709),o=n.LongBits,s=n.utf8;function indexOutOfRange(t,e){return RangeError("index out of range: "+t.pos+" + "+(e||1)+" > "+t.len)}function Reader(t){this.buf=t,this.pos=0,this.len=t.length}var u="undefined"!=typeof Uint8Array?function create_typed_array(t){if(t instanceof Uint8Array||Array.isArray(t))return new Reader(t);throw Error("illegal buffer")}:function create_array(t){if(Array.isArray(t))return new Reader(t);throw Error("illegal buffer")},f=function create(){return n.Buffer?function create_buffer_setup(t){return(Reader.create=function create_buffer(t){return n.Buffer.isBuffer(t)?new i(t):u(t)})(t)}:u};function readLongVarint(){var t=new o(0,0),e=0;if(!(this.len-this.pos>4)){for(;e<3;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t}return t.lo=(t.lo|(127&this.buf[this.pos++])<<7*e)>>>0,t}for(;e<4;++e)if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t;if(t.lo=(t.lo|(127&this.buf[this.pos])<<28)>>>0,t.hi=(t.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return t;if(e=0,this.len-this.pos>4){for(;e<5;++e)if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}else for(;e<5;++e){if(this.pos>=this.len)throw indexOutOfRange(this);if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}throw Error("invalid varint encoding")}function readFixed32_end(t,e){return(t[e-4]|t[e-3]<<8|t[e-2]<<16|t[e-1]<<24)>>>0}function readFixed64(){if(this.pos+8>this.len)throw indexOutOfRange(this,8);return new o(readFixed32_end(this.buf,this.pos+=4),readFixed32_end(this.buf,this.pos+=4))}Reader.create=f(),Reader.prototype._slice=n.Array.prototype.subarray||n.Array.prototype.slice,Reader.prototype.uint32=function read_uint32_setup(){var t=4294967295;return function read_uint32(){if(t=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return t;if(t=(t|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return t;if(t=(t|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return t;if(t=(t|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return t;if(t=(t|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return t;if((this.pos+=5)>this.len)throw this.pos=this.len,indexOutOfRange(this,10);return t}}(),Reader.prototype.int32=function read_int32(){return 0|this.uint32()},Reader.prototype.sint32=function read_sint32(){var t=this.uint32();return t>>>1^-(1&t)},Reader.prototype.bool=function read_bool(){return 0!==this.uint32()},Reader.prototype.fixed32=function read_fixed32(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)},Reader.prototype.sfixed32=function read_sfixed32(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return 0|readFixed32_end(this.buf,this.pos+=4)},Reader.prototype.float=function read_float(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);var t=n.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t},Reader.prototype.double=function read_double(){if(this.pos+8>this.len)throw indexOutOfRange(this,4);var t=n.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t},Reader.prototype.bytes=function read_bytes(){var t=this.uint32(),e=this.pos,r=this.pos+t;if(r>this.len)throw indexOutOfRange(this,t);if(this.pos+=t,Array.isArray(this.buf))return this.buf.slice(e,r);if(e===r){var i=n.Buffer;return i?i.alloc(0):new this.buf.constructor(0)}return this._slice.call(this.buf,e,r)},Reader.prototype.string=function read_string(){var t=this.bytes();return s.read(t,0,t.length)},Reader.prototype.skip=function skip(t){if("number"==typeof t){if(this.pos+t>this.len)throw indexOutOfRange(this,t);this.pos+=t}else do{if(this.pos>=this.len)throw indexOutOfRange(this)}while(128&this.buf[this.pos++]);return this},Reader.prototype.skipType=function(t){switch(t){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(t=7&this.uint32());)this.skipType(t);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+t+" at offset "+this.pos)}return this},Reader._configure=function(t){i=t,Reader.create=f(),i._configure();var e=n.Long?"toLong":"toNumber";n.merge(Reader.prototype,{int64:function read_int64(){return readLongVarint.call(this)[e](!1)},uint64:function read_uint64(){return readLongVarint.call(this)[e](!0)},sint64:function read_sint64(){return readLongVarint.call(this).zzDecode()[e](!1)},fixed64:function read_fixed64(){return readFixed64.call(this)[e](!0)},sfixed64:function read_sfixed64(){return readFixed64.call(this)[e](!1)}})}},3467:(t,e,r)=>{t.exports=BufferReader;var i=r(906);(BufferReader.prototype=Object.create(i.prototype)).constructor=BufferReader;var n=r(6709);function BufferReader(t){i.call(this,t)}BufferReader._configure=function(){n.Buffer&&(BufferReader.prototype._slice=n.Buffer.prototype.slice)},BufferReader.prototype.string=function read_string_buffer(){var t=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+t,this.len))},BufferReader._configure()},4875:t=>{t.exports={}},3966:(t,e,r)=>{e.Service=r(7998)},7998:(t,e,r)=>{t.exports=Service;var i=r(6709);function Service(t,e,r){if("function"!=typeof t)throw TypeError("rpcImpl must be a function");i.EventEmitter.call(this),this.rpcImpl=t,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(r)}(Service.prototype=Object.create(i.EventEmitter.prototype)).constructor=Service,Service.prototype.rpcCall=function rpcCall(t,e,r,n,o){if(!n)throw TypeError("request must be specified");var s=this;if(!o)return i.asPromise(rpcCall,s,t,e,r,n);if(s.rpcImpl)try{return s.rpcImpl(t,e[s.requestDelimited?"encodeDelimited":"encode"](n).finish(),(function rpcCallback(e,i){if(e)return s.emit("error",e,t),o(e);if(null!==i){if(!(i instanceof r))try{i=r[s.responseDelimited?"decodeDelimited":"decode"](i)}catch(e){return s.emit("error",e,t),o(e)}return s.emit("data",i,t),o(null,i)}s.end(!0)}))}catch(e){return s.emit("error",e,t),void setTimeout((function(){o(e)}),0)}else setTimeout((function(){o(Error("already ended"))}),0)},Service.prototype.end=function end(t){return this.rpcImpl&&(t||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},5790:(t,e,r)=>{t.exports=LongBits;var i=r(6709);function LongBits(t,e){this.lo=t>>>0,this.hi=e>>>0}var n=LongBits.zero=new LongBits(0,0);n.toNumber=function(){return 0},n.zzEncode=n.zzDecode=function(){return this},n.length=function(){return 1};var o=LongBits.zeroHash="\0\0\0\0\0\0\0\0";LongBits.fromNumber=function fromNumber(t){if(0===t)return n;var e=t<0;e&&(t=-t);var r=t>>>0,i=(t-r)/4294967296>>>0;return e&&(i=~i>>>0,r=~r>>>0,++r>4294967295&&(r=0,++i>4294967295&&(i=0))),new LongBits(r,i)},LongBits.from=function from(t){if("number"==typeof t)return LongBits.fromNumber(t);if(i.isString(t)){if(!i.Long)return LongBits.fromNumber(parseInt(t,10));t=i.Long.fromString(t)}return t.low||t.high?new LongBits(t.low>>>0,t.high>>>0):n},LongBits.prototype.toNumber=function toNumber(t){if(!t&&this.hi>>>31){var e=1+~this.lo>>>0,r=~this.hi>>>0;return e||(r=r+1>>>0),-(e+4294967296*r)}return this.lo+4294967296*this.hi},LongBits.prototype.toLong=function toLong(t){return i.Long?new i.Long(0|this.lo,0|this.hi,Boolean(t)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(t)}};var s=String.prototype.charCodeAt;LongBits.fromHash=function fromHash(t){return t===o?n:new LongBits((s.call(t,0)|s.call(t,1)<<8|s.call(t,2)<<16|s.call(t,3)<<24)>>>0,(s.call(t,4)|s.call(t,5)<<8|s.call(t,6)<<16|s.call(t,7)<<24)>>>0)},LongBits.prototype.toHash=function toHash(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},LongBits.prototype.zzEncode=function zzEncode(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this},LongBits.prototype.zzDecode=function zzDecode(){var t=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this},LongBits.prototype.length=function length(){var t=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,r=this.hi>>>24;return 0===r?0===e?t<16384?t<128?1:2:t<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:r<128?9:10}},6709:function(t,e,r){var i=e;function merge(t,e,r){for(var i=Object.keys(e),n=0;n<i.length;++n)void 0!==t[i[n]]&&r||(t[i[n]]=e[i[n]]);return t}function newError(t){function CustomError(t,e){if(!(this instanceof CustomError))return new CustomError(t,e);Object.defineProperty(this,"message",{get:function(){return t}}),Error.captureStackTrace?Error.captureStackTrace(this,CustomError):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),e&&merge(this,e)}return CustomError.prototype=Object.create(Error.prototype,{constructor:{value:CustomError,writable:!0,enumerable:!1,configurable:!0},name:{get:function get(){return t},set:void 0,enumerable:!1,configurable:!0},toString:{value:function value(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),CustomError}i.asPromise=r(6204),i.base64=r(9508),i.EventEmitter=r(2106),i.float=r(2815),i.inquire=r(5386),i.utf8=r(226),i.pool=r(4242),i.LongBits=r(5790),i.isNode=Boolean(void 0!==r.g&&r.g&&r.g.process&&r.g.process.versions&&r.g.process.versions.node),i.global=i.isNode&&r.g||"undefined"!=typeof window&&window||"undefined"!=typeof self&&self||this,i.emptyArray=Object.freeze?Object.freeze([]):[],i.emptyObject=Object.freeze?Object.freeze({}):{},i.isInteger=Number.isInteger||function isInteger(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},i.isString=function isString(t){return"string"==typeof t||t instanceof String},i.isObject=function isObject(t){return t&&"object"==typeof t},i.isset=i.isSet=function isSet(t,e){var r=t[e];return!(null==r||!t.hasOwnProperty(e))&&("object"!=typeof r||(Array.isArray(r)?r.length:Object.keys(r).length)>0)},i.Buffer=function(){try{var t=i.inquire("buffer").Buffer;return t.prototype.utf8Write?t:null}catch(t){return null}}(),i._Buffer_from=null,i._Buffer_allocUnsafe=null,i.newBuffer=function newBuffer(t){return"number"==typeof t?i.Buffer?i._Buffer_allocUnsafe(t):new i.Array(t):i.Buffer?i._Buffer_from(t):"undefined"==typeof Uint8Array?t:new Uint8Array(t)},i.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,i.Long=i.global.dcodeIO&&i.global.dcodeIO.Long||i.global.Long||i.inquire("long"),i.key2Re=/^true|false|0|1$/,i.key32Re=/^-?(?:0|[1-9][0-9]*)$/,i.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,i.longToHash=function longToHash(t){return t?i.LongBits.from(t).toHash():i.LongBits.zeroHash},i.longFromHash=function longFromHash(t,e){var r=i.LongBits.fromHash(t);return i.Long?i.Long.fromBits(r.lo,r.hi,e):r.toNumber(Boolean(e))},i.merge=merge,i.lcFirst=function lcFirst(t){return t.charAt(0).toLowerCase()+t.substring(1)},i.newError=newError,i.ProtocolError=newError("ProtocolError"),i.oneOfGetter=function getOneOf(t){for(var e={},r=0;r<t.length;++r)e[t[r]]=1;return function(){for(var t=Object.keys(this),r=t.length-1;r>-1;--r)if(1===e[t[r]]&&void 0!==this[t[r]]&&null!==this[t[r]])return t[r]}},i.oneOfSetter=function setOneOf(t){return function(e){for(var r=0;r<t.length;++r)t[r]!==e&&delete this[t[r]]}},i.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},i._configure=function(){var t=i.Buffer;t?(i._Buffer_from=t.from!==Uint8Array.from&&t.from||function Buffer_from(e,r){return new t(e,r)},i._Buffer_allocUnsafe=t.allocUnsafe||function Buffer_allocUnsafe(e){return new t(e)}):i._Buffer_from=i._Buffer_allocUnsafe=null}},1162:(t,e,r)=>{t.exports=Writer;var i,n=r(6709),o=n.LongBits,s=n.base64,u=n.utf8;function Op(t,e,r){this.fn=t,this.len=e,this.next=void 0,this.val=r}function noop(){}function State(t){this.head=t.head,this.tail=t.tail,this.len=t.len,this.next=t.states}function Writer(){this.len=0,this.head=new Op(noop,0,0),this.tail=this.head,this.states=null}var f=function create(){return n.Buffer?function create_buffer_setup(){return(Writer.create=function create_buffer(){return new i})()}:function create_array(){return new Writer}};function writeByte(t,e,r){e[r]=255&t}function VarintOp(t,e){this.len=t,this.next=void 0,this.val=e}function writeVarint64(t,e,r){for(;t.hi;)e[r++]=127&t.lo|128,t.lo=(t.lo>>>7|t.hi<<25)>>>0,t.hi>>>=7;for(;t.lo>127;)e[r++]=127&t.lo|128,t.lo=t.lo>>>7;e[r++]=t.lo}function writeFixed32(t,e,r){e[r]=255&t,e[r+1]=t>>>8&255,e[r+2]=t>>>16&255,e[r+3]=t>>>24}Writer.create=f(),Writer.alloc=function alloc(t){return new n.Array(t)},n.Array!==Array&&(Writer.alloc=n.pool(Writer.alloc,n.Array.prototype.subarray)),Writer.prototype._push=function push(t,e,r){return this.tail=this.tail.next=new Op(t,e,r),this.len+=e,this},VarintOp.prototype=Object.create(Op.prototype),VarintOp.prototype.fn=function writeVarint32(t,e,r){for(;t>127;)e[r++]=127&t|128,t>>>=7;e[r]=t},Writer.prototype.uint32=function write_uint32(t){return this.len+=(this.tail=this.tail.next=new VarintOp((t>>>=0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this},Writer.prototype.int32=function write_int32(t){return t<0?this._push(writeVarint64,10,o.fromNumber(t)):this.uint32(t)},Writer.prototype.sint32=function write_sint32(t){return this.uint32((t<<1^t>>31)>>>0)},Writer.prototype.uint64=function write_uint64(t){var e=o.from(t);return this._push(writeVarint64,e.length(),e)},Writer.prototype.int64=Writer.prototype.uint64,Writer.prototype.sint64=function write_sint64(t){var e=o.from(t).zzEncode();return this._push(writeVarint64,e.length(),e)},Writer.prototype.bool=function write_bool(t){return this._push(writeByte,1,t?1:0)},Writer.prototype.fixed32=function write_fixed32(t){return this._push(writeFixed32,4,t>>>0)},Writer.prototype.sfixed32=Writer.prototype.fixed32,Writer.prototype.fixed64=function write_fixed64(t){var e=o.from(t);return this._push(writeFixed32,4,e.lo)._push(writeFixed32,4,e.hi)},Writer.prototype.sfixed64=Writer.prototype.fixed64,Writer.prototype.float=function write_float(t){return this._push(n.float.writeFloatLE,4,t)},Writer.prototype.double=function write_double(t){return this._push(n.float.writeDoubleLE,8,t)};var a=n.Array.prototype.set?function writeBytes_set(t,e,r){e.set(t,r)}:function writeBytes_for(t,e,r){for(var i=0;i<t.length;++i)e[r+i]=t[i]};Writer.prototype.bytes=function write_bytes(t){var e=t.length>>>0;if(!e)return this._push(writeByte,1,0);if(n.isString(t)){var r=Writer.alloc(e=s.length(t));s.decode(t,r,0),t=r}return this.uint32(e)._push(a,e,t)},Writer.prototype.string=function write_string(t){var e=u.length(t);return e?this.uint32(e)._push(u.write,e,t):this._push(writeByte,1,0)},Writer.prototype.fork=function fork(){return this.states=new State(this),this.head=this.tail=new Op(noop,0,0),this.len=0,this},Writer.prototype.reset=function reset(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Op(noop,0,0),this.len=0),this},Writer.prototype.ldelim=function ldelim(){var t=this.head,e=this.tail,r=this.len;return this.reset().uint32(r),r&&(this.tail.next=t.next,this.tail=e,this.len+=r),this},Writer.prototype.finish=function finish(){for(var t=this.head.next,e=this.constructor.alloc(this.len),r=0;t;)t.fn(t.val,e,r),r+=t.len,t=t.next;return e},Writer._configure=function(t){i=t,Writer.create=f(),i._configure()}},3371:(t,e,r)=>{t.exports=BufferWriter;var i=r(1162);(BufferWriter.prototype=Object.create(i.prototype)).constructor=BufferWriter;var n=r(6709);function BufferWriter(){i.call(this)}function writeStringBuffer(t,e,r){t.length<40?n.utf8.write(t,e,r):e.utf8Write?e.utf8Write(t,r):e.write(t,r)}BufferWriter._configure=function(){BufferWriter.alloc=n._Buffer_allocUnsafe,BufferWriter.writeBytesBuffer=n.Buffer&&n.Buffer.prototype instanceof Uint8Array&&"set"===n.Buffer.prototype.set.name?function writeBytesBuffer_set(t,e,r){e.set(t,r)}:function writeBytesBuffer_copy(t,e,r){if(t.copy)t.copy(e,r,0,t.length);else for(var i=0;i<t.length;)e[r++]=t[i++]}},BufferWriter.prototype.bytes=function write_bytes_buffer(t){n.isString(t)&&(t=n._Buffer_from(t,"base64"));var e=t.length>>>0;return this.uint32(e),e&&this._push(BufferWriter.writeBytesBuffer,e,t),this},BufferWriter.prototype.string=function write_string_buffer(t){var e=n.Buffer.byteLength(t);return this.uint32(e),e&&this._push(writeStringBuffer,e,t),this},BufferWriter._configure()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,